results[https://github.com/Ourobor/petulant-batman!javaproject/src/Study/FileStudy.java!FileStudy!saveState][SEQ] =  -> TRY { -> saveFile=new File(getMyPath()+File.separator+SAVE_FILE_NAME,)@ -> IF { -> saveFile.createNewFile()@!saveFile.exists() } -> out=new FileOutputStream(saveFile,false,)@ -> entryIt=sav.getValNames().iterator()@ -> LOOP { -> str=entryIt.next()@entryIt.hasNext() -> byteEntry=new String(str+"="+sav.get(str,)+"\n",).getBytes()@entryIt.hasNext() -> out.write(byteEntry,)@entryIt.hasNext() } -> out.close()@ -> save=save.merge(sav,)@ } CATCH { }
results[https://github.com/Ourobor/petulant-batman!javaproject/src/deprecated/FileStudy.java!FileStudy!saveState][SEQ] =  -> TRY { -> save=new File(myPath+File.separator+"0.sav",)@ -> IF { -> save.createNewFile()@!save.exists() } -> out=new FileOutputStream(save,false,)@ -> indexEntry=new String("index="+index+"\n",).getBytes()@ -> stateEntry=new String("state="+stateToString(StateHolder.images(),)+"\n",).getBytes()@ -> out.write(indexEntry,)@ -> out.write(stateEntry,)@ -> out.close()@ } CATCH { }
results[https://github.com/Ourobor/petulant-batman!javaproject/src/deprecated/FileStudy.java!FileStudy!saveState][SEQ] =  -> TRY { -> save=new File(myPath+File.separator+"0.sav",)@ -> IF { -> save.createNewFile()@!save.exists() } -> out=new FileOutputStream(save,false,)@ -> indexEntry=new String("index="+curIndexthis+"\n",).getBytes()@ -> stateEntry=new String("state="+stateToString(StateHolder.images(),)+"\n",).getBytes()@ -> out.write(indexEntry,)@ -> out.write(stateEntry,)@ -> out.close()@ } CATCH { }
results[https://github.com/Ourobor/petulant-batman!src/Study/FileStudy.java!FileStudy!saveState][SEQ] =  -> TRY { -> saveFile=new File(getMyPath()+File.separator+SAVE_FILE_NAME,)@ -> IF { -> saveFile.createNewFile()@!saveFile.exists() } -> out=new FileOutputStream(saveFile,false,)@ -> entryIt=sav.getValNames().iterator()@ -> LOOP { -> str=entryIt.next()@entryIt.hasNext() -> byteEntry=new String(str+"="+sav.get(str,)+"\n",).getBytes()@entryIt.hasNext() -> out.write(byteEntry,)@entryIt.hasNext() } -> out.close()@ -> save=save.merge(sav,)@ } CATCH { }
results[https://github.com/Ourobor/petulant-batman!src/deprecated/FileStudy.java!FileStudy!saveState][SEQ] =  -> TRY { -> save=new File(myPath+File.separator+"0.sav",)@ -> IF { -> save.createNewFile()@!save.exists() } -> out=new FileOutputStream(save,false,)@ -> indexEntry=new String("index="+curIndexthis+"\n",).getBytes()@ -> stateEntry=new String("state="+stateToString(StateHolder.images(),)+"\n",).getBytes()@ -> out.write(indexEntry,)@ -> out.write(stateEntry,)@ -> out.close()@ } CATCH { }
results[https://github.com/Ourobor/petulant-batman!src/deprecated/FileStudy.java!FileStudy!saveState][SEQ] =  -> TRY { -> save=new File(myPath+File.separator+"0.sav",)@ -> IF { -> save.createNewFile()@!save.exists() } -> out=new FileOutputStream(save,false,)@ -> indexEntry=new String("index="+index+"\n",).getBytes()@ -> stateEntry=new String("state="+stateToString(StateHolder.images(),)+"\n",).getBytes()@ -> out.write(indexEntry,)@ -> out.write(stateEntry,)@ -> out.close()@ } CATCH { }
results[https://github.com/ceylon/ceylon-compiler!langtools/test/tools/apt/Discovery/PhantomTouch.java!PhantomTouchProc!process][SEQ] =  -> IF { -> TRY { -> f=new java.io.File("touched",)@ -> result=f.createNewFile()@ -> IF { } ELSE { -> throw new RuntimeException("touched file already exists!",)@!(result) } } CATCH { -> result=false@ } }
results[https://github.com/ceylon/ceylon-compiler!langtools/test/tools/apt/Discovery/Touch.java!TouchProc!process][SEQ] =  -> IF { -> TRY { -> f=new java.io.File("touched",)@ -> result=f.createNewFile()@ } CATCH { -> result=false@ } -> IF { -> throw new RuntimeException("touched file already exists or other error",)@!result } }
results[https://github.com/craig-a-roach/geowx!ebx/src/test/java/com/metservice/argon/cache/disk/TestUnit1Mru.java!TestUnit1Mru!t20_space][SEQ] =  -> SPACE=new SpaceId("t20",)@ -> TRY { -> probe=new Probe()@ -> cfg=ArgonDiskMruCacheController.newConfig(probe,SID,SPACE,)@ -> cfg.enableSafeNaming(false,)@ -> cfg.populationLimit(10,)@ -> cfg.enableClean(true,)@ -> cfg.sizeLimitBytes(3*CArgon.K*8,)@ -> cfg.auditCycle(4,)@ -> cfg.checkpointHoldoff(TimeUnit.SECONDS,1,)@ -> cfg.checkpointPeriod(TimeUnit.SECONDS,2,)@ -> cfg.impliedFresh(TimeUnit.SECONDS,60,)@ -> cfg.minLife(TimeUnit.SECONDS,3,)@ -> dcc=ArgonDiskMruCacheController.newInstance(cfg,)@ -> supplier=new Supplier()@ -> supplier.put("A",5000,LM03,EX08,)@ -> supplier.put("B",3000,LM03,EX08,)@ -> supplier.put("C",7000,LM03,EX08,)@ -> supplier.putHole("E",EX08,)@ -> supplier.put("F",0,LM03,EX11,)@ -> TRY { -> new File(cfg.cndir,"wilful_damage",).createNewFile()@ } CATCH { -> Assert.fail("Cannot create damage file..."+ex.getMessage(),)@ } -> rq=new Request("A",)@ -> oFile=dcc.find(supplier,rq,)@ -> Assert.assertNotNull("Found A",oFile,)@ -> Assert.assertTrue(probe.noPurgeAgenda(),)@ -> Assert.assertTrue(probe.noPurgeReclaim(),)@ -> Assert.assertTrue(probe.reachedCheckpoint(),)@ -> Assert.assertEquals("A:H0M1",probe.statsReport(),)@ -> fA=oFile@ -> rq=new Request("C",)@ -> oFile=dcc.find(supplier,rq,)@ -> Assert.assertNotNull("Found C",oFile,)@ -> Assert.assertTrue(probe.noPurgeAgenda(),)@ -> Assert.assertTrue(probe.noPurgeReclaim(),)@ -> Assert.assertTrue(probe.reachedCheckpoint(),)@ -> Assert.assertEquals("C:H0M1",probe.statsReport(),)@ -> rq=new Request("B",)@ -> oFile=dcc.find(supplier,rq,)@ -> Assert.assertNotNull("Found B",oFile,)@ -> Assert.assertTrue(probe.reachedPurgeAgenda(),)@ -> probe.allowPurgeReclaim()@ -> Assert.assertTrue(probe.reachedPurgeReclaim(),)@ -> Assert.assertTrue(probe.reachedCheckpoint(),)@ -> Assert.assertFalse("file A purged",fA.exists(),)@ -> Assert.assertEquals("B:H0M1",probe.statsReport(),)@ -> rq=new Request("C",)@ -> oFile=dcc.find(supplier,rq,)@ -> Assert.assertNotNull("Found C",oFile,)@ -> Assert.assertTrue(probe.noPurgeAgenda(),)@ -> Assert.assertTrue(probe.noPurgeReclaim(),)@ -> Assert.assertTrue(probe.reachedCheckpoint(),)@ -> Assert.assertTrue("file C exists",oFile.exists(),)@ -> Assert.assertEquals("C:H1M0",probe.statsReport(),)@ -> rq=new Request("D",)@ -> oFile=dcc.find(supplier,rq,)@ -> Assert.assertNull("NotFound D",oFile,)@ -> Assert.assertTrue(probe.noPurgeAgenda(),)@ -> Assert.assertTrue(probe.noPurgeReclaim(),)@ -> Assert.assertTrue(probe.noCheckpoint(),)@ -> Assert.assertTrue(probe.noAudit(),)@ -> Assert.assertEquals("D:H0M1",probe.statsReport(),)@ -> rq=new Request("E",)@ -> oFile=dcc.find(supplier,rq,)@ -> Assert.assertNull("NotFound E",oFile,)@ -> Assert.assertTrue(probe.noPurgeAgenda(),)@ -> Assert.assertTrue(probe.noPurgeReclaim(),)@ -> Assert.assertTrue(probe.reachedCheckpoint(),)@ -> Assert.assertTrue(probe.noAudit(),)@ -> Assert.assertEquals("E:H0M1",probe.statsReport(),)@ -> rq=new Request("F",)@ -> oFile=dcc.find(supplier,rq,)@ -> Assert.assertNotNull("Found F",oFile,)@ -> Assert.assertTrue(probe.noPurgeAgenda(),)@ -> Assert.assertTrue(probe.noPurgeReclaim(),)@ -> Assert.assertTrue(probe.reachedCheckpoint(),)@ -> Assert.assertTrue(probe.reachedAudit(),)@ -> Assert.assertEquals("F:H0M1",probe.statsReport(),)@ -> rq=new Request("E",)@ -> oFile=dcc.find(supplier,rq,)@ -> Assert.assertNull("NotFound E",oFile,)@ -> Assert.assertTrue(probe.noPurgeAgenda(),)@ -> Assert.assertTrue(probe.noPurgeReclaim(),)@ -> Assert.assertTrue(probe.reachedCheckpoint(),)@ -> Assert.assertTrue(probe.noAudit(),)@ -> Assert.assertEquals("E:H1M0",probe.statsReport(),)@ -> dcc.cancel()@ -> mgt=probe.mruManagementTranscript@ -> Assert.assertEquals("newState.noCheckpoint",mgt.get(0,),)@ -> Assert.assertEquals("newState.initialise",mgt.get(1,),)@ -> Assert.assertEquals("purge.agenda(StatePre{kB=24  agenda(0)=A})",mgt.get(2,),)@ -> Assert.assertEquals("purge.reclaim(StatePost{kB=16})",mgt.get(3,),)@ -> Assert.assertEquals("audit.delete(State{unreferenced(0)=wilful_damage})",mgt.get(4,),)@ -> oSensor=dcc.findSensor(dcc.getSensorId(0,),)@ -> Assert.assertNotNull(oSensor,)@ -> Assert.assertTrue(oSensor,)@ -> sensorRatio=(IArgonSensorRatio) oSensor.ratio()@ -> Assert.assertTrue(!Float.isNaN(sensorRatio,)&&sensorRatio>0.0&&sensorRatio<1.0f,)@ -> System.out.println("SENSOR: "+oSensor,)@ -> Assert.fail(ex.getMessage(),)@ } CATCH { -> Assert.fail(ex.getMessage(),)@ } CATCH { -> Assert.fail(ex.getMessage(),)@ } CATCH { -> Assert.fail("Latch interrupted",)@ } -> TRY { -> probe=new Probe()@ -> cfg=ArgonDiskMruCacheController.newConfig(probe,SID,SPACE,)@ -> cfg.enableSafeNaming(false,)@ -> cfg.populationLimit(10,)@ -> cfg.enableClean(false,)@ -> cfg.sizeLimitBytes(5*CArgon.K*8,)@ -> cfg.auditCycle(3,)@ -> cfg.checkpointHoldoff(TimeUnit.SECONDS,1,)@ -> cfg.checkpointPeriod(TimeUnit.SECONDS,2,)@ -> cfg.minLife(TimeUnit.SECONDS,3,)@ -> dcc=ArgonDiskMruCacheController.newInstance(cfg,)@ -> supplier=new Supplier()@ -> xc=Executors.newFixedThreadPool(3,)@ -> probe.setConcurrentMode(true,)@ -> fuB=xc.submit(new Agent(dcc,supplier,new Request("B",),),)@ -> fuF=xc.submit(new Agent(dcc,supplier,new Request("F",),),)@ -> fuE=xc.submit(new Agent(dcc,supplier,new Request("E",),),)@ -> TRY { -> oFile=fuB.get(10,TimeUnit.SECONDS,)@ -> Assert.assertNotNull("Found B",oFile,)@ -> Assert.assertEquals("Bv1 length",3000,oFile.length(),)@ } CATCH { -> Assert.fail(ex.getMessage(),)@ } -> TRY { -> oFile=fuF.get(10,TimeUnit.SECONDS,)@ -> Assert.assertNotNull("Found F",oFile,)@ -> Assert.assertEquals("Fv1 length",0,oFile.length(),)@ } CATCH { -> Assert.fail(ex.getMessage(),)@ } -> TRY { -> oFile=fuE.get(10,TimeUnit.SECONDS,)@ -> Assert.assertNull("NotFound E",oFile,)@ } CATCH { -> Assert.fail(ex.getMessage(),)@ } -> Assert.assertTrue(probe.noPurgeAgenda(),)@ -> Assert.assertTrue(probe.noPurgeReclaim(),)@ -> Assert.assertTrue(probe.reachedCheckpoint(),)@ -> Assert.assertTrue(probe.noAudit(),)@ -> Assert.assertEquals("B:H1M0 E:H1M0 F:H1M0",probe.statsReport(),)@ -> supplier.put("B",9000,LM09,EX11,)@ -> supplier.put("G",13000,LM09,EX11,)@ -> supplier.put("H",17000,LM09,EX11,)@ -> probe.setConcurrentMode(true,)@ -> probe.allowPurgeReclaim()@ -> fuBm09=xc.submit(new Agent(dcc,supplier,new Request("B",),),)@ -> fuG=xc.submit(new Agent(dcc,supplier,new Request("G",),),)@ -> TRY { -> oFile=fuBm09.get(10,TimeUnit.SECONDS,)@ -> Assert.assertNotNull("Found B mod 09",oFile,)@ -> Assert.assertEquals("B mod 09 length",9000,oFile.length(),)@ } CATCH { -> Assert.fail(ex.getMessage(),)@ } -> TRY { -> oFile=fuG.get(10,TimeUnit.SECONDS,)@ -> Assert.assertNotNull("Found G",oFile,)@ } CATCH { -> Assert.fail(ex.getMessage(),)@ } -> Assert.assertTrue(probe.reachedPurgeAgenda(),)@ -> Assert.assertTrue(probe.reachedPurgeReclaim(),)@ -> Assert.assertTrue(probe.reachedCheckpoint(),)@ -> Assert.assertTrue(probe.noAudit(),)@ -> Assert.assertEquals("B:H0M1 G:H0M1",probe.statsReport(),)@ -> Assert.assertTrue(probe.noPurgeAgenda(),)@ -> fuH=xc.submit(new Agent(dcc,supplier,new Request("H",),),)@ -> TRY { -> oFile=fuH.get(10,TimeUnit.SECONDS,)@ -> Assert.assertNotNull("Found H",oFile,)@ } CATCH { -> Assert.fail(ex.getMessage(),)@ } -> Assert.assertEquals("H:H0M1",probe.statsReport(),)@ -> Assert.assertTrue(probe.reachedPurgeAgenda(),)@ -> fu2F=xc.submit(new Agent(dcc,supplier,new Request("F",),),)@ -> TRY { -> oFile=fu2F.get(10,TimeUnit.SECONDS,)@ -> Assert.assertNotNull("Found F",oFile,)@ } CATCH { -> Assert.fail(ex.getMessage(),)@ } -> probe.allowPurgeReclaim()@ -> Assert.assertTrue(probe.reachedPurgeReclaim(),)@ -> Assert.assertTrue(probe.reachedCheckpoint(),)@ -> Assert.assertTrue(probe.noAudit(),)@ -> Assert.assertEquals("F:H1M0",probe.statsReport(),)@ -> supplier.put("J",7000,LM11,EX13,)@ -> fuJav1=xc.submit(new Agent(dcc,supplier,new Request("J",),),)@ -> fuJbv1=xc.submit(new Agent(dcc,supplier,new Request("J",),),)@ -> fuJcv1=xc.submit(new Agent(dcc,supplier,new Request("J",),),)@ -> TRY { -> oFileA=fuJav1.get(10,TimeUnit.SECONDS,)@ -> oFileB=fuJbv1.get(10,TimeUnit.SECONDS,)@ -> oFileC=fuJcv1.get(10,TimeUnit.SECONDS,)@ -> Assert.assertNotNull("Found Jav1",oFileA,)@ -> Assert.assertNotNull("Found Jbv1",oFileB,)@ -> Assert.assertNotNull("Found Jcv1",oFileC,)@ } CATCH { -> Assert.fail(ex.getMessage(),)@ } -> Assert.assertTrue(probe.noPurgeAgenda(),)@ -> Assert.assertTrue(probe.noPurgeReclaim(),)@ -> Assert.assertTrue(probe.reachedCheckpoint(),)@ -> Assert.assertTrue(probe.noAudit(),)@ -> Assert.assertEquals("J:H2M1",probe.statsReport(),)@ -> dcc.cancel()@ -> mgt=probe.mruManagementTranscript@ -> Assert.assertEquals("newState.loadedCheckpoint",mgt.get(0,),)@ -> Assert.assertEquals("purge.agenda(StatePre{kB=40  agenda(0)=C})",mgt.get(1,),)@ -> Assert.assertEquals("purge.reclaim(StatePost{kB=32})",mgt.get(2,),)@ -> mgt3a="purge.agenda(StatePre{kB=56  agenda(0)=D"@ -> mgt3c="agenda(3)=B  agenda(4)=G})"@ -> mgt3b1=mgt3a+"  agenda(1)=F  agenda(2)=E  "+mgt3c@ -> mgt3b2=mgt3a+"  agenda(1)=E  agenda(2)=F  "+mgt3c@ -> Assert.assertTrue(mgt.get(3,).equals(mgt3b1,)||mgt.get(3,).equals(mgt3b2,),)@ -> Assert.assertEquals("purge.file.trackerNotPurgeSafe",mgt.get(4,),)@ -> Assert.assertEquals("purge.reclaim(StatePost{kB=24})",mgt.get(5,),)@ -> Assert.fail(ex.getMessage(),)@ } CATCH { -> Assert.fail(ex.getMessage(),)@ } CATCH { -> Assert.fail("Latch interrupted",)@ }
results[https://github.com/dana-i2cat/opennaas-routing-nfv!bundles/net.i2cat.mantychore.actionsets.junos/src/main/java/net/i2cat/mantychore/actionsets/junos/actions/TempFileManager.java!TempFileManager!createFile][SEQ] =  -> TRY { -> temp=new File(name,)@ -> noExists=temp.createNewFile()@ -> IF { -> temp.delete()@!noExists -> temp.createNewFile()@!noExists } -> out=new BufferedWriter(new FileWriter(temp,),contain.length(),)@ -> out.write(contain,)@ -> out.close()@ -> pathFile=temp.getAbsolutePath()@ } CATCH { }
results[https://github.com/dana-i2cat/opennaas-routing-nfv!extensions/bundles/router.actionsets.junos/src/main/java/org/opennaas/extensions/router/junos/actionssets/actions/TempFileManager.java!TempFileManager!createFile][SEQ] =  -> TRY { -> temp=new File(name,)@ -> noExists=temp.createNewFile()@ -> IF { -> temp.delete()@!noExists -> temp.createNewFile()@!noExists } -> out=new BufferedWriter(new FileWriter(temp,),contain.length(),)@ -> out.write(contain,)@ -> out.close()@ -> pathFile=temp.getAbsolutePath()@ } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/builders/WsdlWithPublicServiceGenerator.java!WsdlWithPublicServiceGenerator!writeNewwsdl][SEQ] =  -> transferFact=TransformerFactory.newInstance()@ -> TRY { -> transformer=transferFact.newTransformer()@ -> transformer.setOutputProperty(OutputKeys.INDENT,"yes",)@ } CATCH { } -> sourcewsdl=new DOMSource(document,)@ -> TRY { -> file=new File(wsdlPath,)@ -> TRY { -> created=file.createNewFile()@ -> IF { } } CATCH { } -> output=new FileOutputStream(file,)@ -> newWsdl=new StreamResult(output,)@ -> sourcewsdl.setNode(document,)@ -> transformer.transform(sourcewsdl,newWsdl,)@ } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/wsdl/parser/WSDLConversionToSingleNamespace.java!WSDLConversionToSingleNamespace!writeNewwsdl][SEQ] =  -> s_logger.log(Level.FINE,"BEGIN writeNewwsdl()....",)@ -> transferFact=TransformerFactory.newInstance()@ -> TRY { -> transformer=transferFact.newTransformer()@ -> transformer.setOutputProperty(OutputKeys.INDENT,VALUE_YES,)@ } CATCH { -> s_logger.log(Level.SEVERE,e.getMessageAndLocation(),)@ -> throw new CodeGenFailedException(e.getMessage(),)@ } -> sourcewsdl=new DOMSource(m_Document,)@ -> TRY { -> file=new File(fileLocation,)@ -> TRY { -> s_logger.log(Level.FINE,"Creating new File...",)@ -> created=file.createNewFile()@ -> IF { -> s_logger.log(Level.FINE,"File created: "+fileLocation,)@created } } CATCH { -> s_logger.log(Level.SEVERE,e.getMessage(),)@ -> throw new CodeGenFailedException(e.getMessage(),)@ } -> output=new FileOutputStream(file,)@ -> newWsdl=new StreamResult(output,)@ -> sourcewsdl.setNode(m_Document,)@ -> transformer.transform(sourcewsdl,newWsdl,)@ -> s_logger.log(Level.SEVERE,e.getMessage(),)@ -> throw new CodeGenFailedException(e.getMessage(),)@ } CATCH { -> s_logger.log(Level.SEVERE,e.getMessage(),)@ -> throw new CodeGenFailedException(e.getMessage(),)@ } FINALLY { -> CodeGenUtil.flushAndCloseQuietly(output,)@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/errorlibrary/FileErrorIdGenerator.java!FileErrorIdGenerator!tryGetFileLock][SEQ] =  -> file=new File(m_fileName,)@ -> lockFilePath=getLockFilesPath()@ -> lockFile=new File(lockFilePath,)@ -> IF { -> s_Logger.log(Level.SEVERE,"#1 Could not get lock for the file : "+m_fileName,)@lockFile.exists() -> throw new ErrorIdGeneratorException("#1 Could not get lock for the file : "+m_fileName,)@lockFile.exists() } ELSE { -> TRY { -> IF { -> errMsg="#1 Could not create the lock file : "+m_fileName@lockFile.exists() && !(!lockFile.createNewFile()) -> s_Logger.log(Level.SEVERE,errMsg,)@lockFile.exists() && !(!lockFile.createNewFile()) -> throw new ErrorIdGeneratorException(errMsg,)@!lockFile.createNewFile() && !(lockFile.exists()) } } CATCH { -> errMsg=e.getMessage()@lockFile.exists() -> s_Logger.log(Level.SEVERE,errMsg,)@lockFile.exists() -> throw new ErrorIdGeneratorException(errMsg,)@!(lockFile.exists()) } } -> TRY { -> tempFile=new File(m_fileName+".copy",)@lockFile.exists() && !(!lockFile.createNewFile()) -> IF { -> errMsg="#1 Could not copy the original file to temp file: "+m_fileName@lockFile.exists() && !copyFile(file,tempFile,) && !(!lockFile.createNewFile()) -> s_Logger.log(Level.SEVERE,errMsg,)@lockFile.exists() && !copyFile(file,tempFile,) && !(!lockFile.createNewFile()) -> throw new ErrorIdGeneratorException(errMsg,)@lockFile.exists() && !copyFile(file,tempFile,) && !(!lockFile.createNewFile()) } -> IF { -> errMsg="#1 Could not delete the file : "+m_fileName@!(!copyFile(file,tempFile,)) && !file.delete() && lockFile.exists() && !(!lockFile.createNewFile()) -> s_Logger.log(Level.SEVERE,errMsg,)@!(!copyFile(file,tempFile,)) && !file.delete() && lockFile.exists() && !(!lockFile.createNewFile()) -> throw new ErrorIdGeneratorException(errMsg,)@!(!copyFile(file,tempFile,)) && !file.delete() && lockFile.exists() && !(!lockFile.createNewFile()) } -> file=new File(m_fileName,)@!(!copyFile(file,tempFile,)) && !(!file.delete()) && lockFile.exists() && !(!lockFile.createNewFile()) -> IF { -> errMsg="#1 Could not rename the file : "+m_fileName@!(!copyFile(file,tempFile,)) && !(!file.delete()) && lockFile.exists() && !tempFile.renameTo(file,) && !(!lockFile.createNewFile()) -> s_Logger.log(Level.SEVERE,errMsg,)@!(!copyFile(file,tempFile,)) && !(!file.delete()) && lockFile.exists() && !tempFile.renameTo(file,) && !(!lockFile.createNewFile()) -> throw new ErrorIdGeneratorException(errMsg,)@!(!copyFile(file,tempFile,)) && !(!file.delete()) && lockFile.exists() && !tempFile.renameTo(file,) && !(!lockFile.createNewFile()) } -> tempStream=new FileOutputStream(file,)@!(!copyFile(file,tempFile,)) && !(!tempFile.renameTo(file,)) && !(!file.delete()) && lockFile.exists() && !(!lockFile.createNewFile()) -> fileChannel=tempStream.getChannel()@!(!copyFile(file,tempFile,)) && !(!tempFile.renameTo(file,)) && !(!file.delete()) && lockFile.exists() && !(!lockFile.createNewFile()) -> fileLock=fileChannel.tryLock()@!(!copyFile(file,tempFile,)) && !(!tempFile.renameTo(file,)) && !(!file.delete()) && lockFile.exists() && !(!lockFile.createNewFile()) -> IF { -> throw new ErrorIdGeneratorException("#2 Could not get lock for the file : "+m_fileName,)@fileLock==null && !(!copyFile(file,tempFile,)) && !(!tempFile.renameTo(file,)) && !(!file.delete()) && lockFile.exists() && !(!lockFile.createNewFile()) } } CATCH { -> throw new ErrorIdGeneratorException("Could not make the file writable : "+e.getMessage(),)@lockFile.exists() && !(!lockFile.createNewFile()) } CATCH { -> throw new ErrorIdGeneratorException("Could not make the file writable "+e.getMessage(),)@lockFile.exists() && !(!lockFile.createNewFile()) } FINALLY { -> CodeGenUtil.closeQuietly(tempStream,)@lockFile.exists() && !(!lockFile.createNewFile()) }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/library/utils/TypeLibraryUtilities.java!TypeLibraryUtilities!create][SEQ] =  -> IF { -> result=file.mkdirs()@isPath(file,) } ELSE { -> TRY { -> result=new File(getPath(file,),).mkdirs()@!(isPath(file,)) -> result=file.createNewFile()@!(isPath(file,)) } CATCH { -> result=false@ } }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/AbstractServiceGeneratorTestCase.java!AbstractServiceGeneratorTestCase!createInterfacePropsFile][SEQ] =  -> file=new File(path+File.separator+"service_intf_project.properties",)@ -> destDir=new File(path,)@ -> TRY { -> IF { -> destDir.mkdir()@!destDir.exists() } -> IF { -> file.createNewFile()@!file.exists() } -> out=new FileOutputStream(file,)@ -> pro.store(out,null,)@ -> out.close()@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/AbstractServiceGeneratorTestCase.java!AbstractServiceGeneratorTestCase!createPropertyFile][SEQ] =  -> testDir=new File(dir,)@ -> IF { -> testDir.mkdirs()@!testDir.exists() } -> intfProps=new File(dir+File.separator+propertyFileName,)@ -> IF { -> intfProps.createNewFile()@!intfProps.exists() }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/BetterToolingQE2Test.java!BetterToolingQE2Test!createConsumerPropsFile][SEQ] =  -> dir=new File(destDir.getAbsolutePath(),)@ -> IF { -> dir.mkdirs()@!dir.exists() } -> file=new File(destDir.getAbsolutePath()+"/service_consumer_project.properties",)@ -> IF { -> file.createNewFile()@!file.exists() } -> pro=new Properties()@ -> in=new FileInputStream(file,)@ -> pro.load(in,)@ -> pro.setProperty("client_name","clientname",)@ -> pro.setProperty("scpp_version","1.0",)@ -> pro.setProperty("not_generate_base_consumer","xyz",)@ -> pro.setProperty("envMapper","org.ebayopensource.turmeric.tools.codegen.EnvironmentMapperImpl",)@ -> out=new FileOutputStream(destDir.getAbsolutePath()+"/service_consumer_project.properties",)@ -> pro.store(out,null,)@ -> in.close()@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ConsumerIDQE2Test.java!ConsumerIDQE2Test!CreateInterfacePropsFile][SEQ] =  -> dDir=new File(destDir.getAbsolutePath(),)@ -> IF { -> dDir.mkdir()@!dDir.exists() } -> file=new File(filePath,)@ -> IF { -> file.createNewFile()@!file.exists() } -> pro=new Properties()@ -> in=new FileInputStream(file,)@ -> pro.load(in,)@ -> pro.setProperty("service_interface_class_name",interfacePropertiesFileMap.get("service_interface_class_name",),)@ -> pro.setProperty("original_wsdl_uri",interfacePropertiesFileMap.get("original_wsdl_uri",),)@ -> pro.setProperty("service_version",interfacePropertiesFileMap.get("service_version",),)@ -> pro.setProperty("sipp_version",interfacePropertiesFileMap.get("sipp_version",),)@ -> pro.setProperty("service_layer",interfacePropertiesFileMap.get("service_layer",),)@ -> pro.setProperty("admin_name",interfacePropertiesFileMap.get("admin_name",),)@ -> pro.setProperty("envMapper",interfacePropertiesFileMap.get("envMapper",),)@ -> out=new FileOutputStream(destDir.getAbsolutePath()+"/service_intf_project.properties",)@ -> pro.store(out,null,)@ -> in.close()@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ConsumerIDQETest.java!ConsumerIDQETest!createConsumerPropsFile][SEQ] =  -> file=new File(path+File.separator+"service_consumer_project.properties",)@ -> destDir=new File(path,)@ -> TRY { -> IF { -> destDir.mkdir()@!destDir.exists() } -> IF { -> file.createNewFile()@!file.exists() } -> out=new FileOutputStream(file,)@ -> pro.store(out,null,)@ -> out.close()@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ObjectFactorySortOrderTest.java!ObjectFactorySortOrderTest!getObjectFactoryFile][SEQ] =  -> time=System.currentTimeMillis()@ -> TRY { -> new File(destDir.getAbsolutePath()+"/objFactory/"+pkg,).mkdirs()@ -> objFactory=new File(destDir.getAbsolutePath()+"/objFactory/"+pkg+"/ObjectFactory"+time+".java",)@ -> objFactory.createNewFile()@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ObjectFactorySortOrderTest.java!ObjectFactorySortOrderTest!initialize][SEQ] =  -> testingdir.ensureEmpty()@ -> destDir=testingdir.getDir()@ -> binDir=testingdir.getFile("bin",)@ -> objFactFolder=new File(destDir.getAbsolutePath()+"/obFjactory",)@ -> IF { -> objFactFolder.createNewFile()@!objFactFolder.exists() } -> TRY { -> intfProperty=createPropertyFile(destDir.getAbsolutePath(),INTF_PROPERTIES,)@ } -> intfProps=new Properties()@ -> intfProps.put("sipp_version","1.1",)@ -> intfProps.put("service_interface_class_name","org.ebayopensource.test.soaframework.tools.codegen.AccountService",)@ -> intfProps.put("service_layer","COMMON",)@ -> intfProps.put("original_wsdl_uri","Vanilla-Codegen\\ServiceInputFiles\\ebaySvc.wsdl",)@ -> intfProps.put("service_version","1.0.0",)@ -> intfProps.put("admin_name","AccountService",)@ -> intfProps.put("service_namespace_part","billing",)@ -> intfProps.put("domainName","Billing",)@ -> fillProperties(intfProps,intfProperty,)@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ObjectFactorySortOrderV3Test.java!ObjectFactorySortOrderV3Test!getObjectFactoryFile][SEQ] =  -> time=System.currentTimeMillis()@ -> TRY { -> new File(destDir.getAbsolutePath()+"/objFactory/"+pkg,).mkdirs()@ -> objFactory=new File(destDir.getAbsolutePath()+"/objFactory/"+pkg+"/ObjectFactory"+time+".java",)@ -> objFactory.createNewFile()@ } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ObjectFactorySortOrderV3Test.java!ObjectFactorySortOrderV3Test!initialize][SEQ] =  -> testingdir.ensureEmpty()@ -> destDir=testingdir.getDir()@ -> binDir=testingdir.getFile("bin",)@ -> objFactFolder=new File(destDir.getAbsolutePath()+"/obFjactory",)@ -> IF { -> objFactFolder.createNewFile()@!objFactFolder.exists() } -> TRY { -> intfProperty=createPropertyFile(destDir.getAbsolutePath(),INTF_PROPERTIES,)@ } CATCH { } -> intfProps=new Properties()@ -> intfProps.put("sipp_version","1.1",)@ -> intfProps.put("service_interface_class_name","org.ebayopensource.test.soaframework.tools.codegen.AccountService",)@ -> intfProps.put("service_layer","COMMON",)@ -> intfProps.put("original_wsdl_uri","Vanilla-Codegen\\ServiceInputFiles\\ebaySvc.wsdl",)@ -> intfProps.put("service_version","1.0.0",)@ -> intfProps.put("admin_name","AccountService",)@ -> intfProps.put("service_namespace_part","billing",)@ -> intfProps.put("domainName","Billing",)@ -> fillProperties(intfProps,intfProperty,)@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ServiceGeneratorTest8.java!ServiceGeneratorTest8!updateServiceImplProjectProperties][SEQ] =  -> destDir=getTestDestDir()@ -> IF { -> destDir.mkdir()@!destDir.exists() } -> propsFilePath=destDir.getAbsolutePath()+File.separator+"service_impl_project.properties"@ -> IF { -> new File(propsFilePath,).createNewFile()@!new File(propsFilePath,).exists() } -> fis=new FileInputStream(propsFilePath,)@ -> props=new Properties()@ -> props.load(fis,)@ -> fis.close()@ -> IF { -> props.remove(propertyName,)@ } ELSE { -> props.setProperty(propertyName,propertyValue,)@ } -> fos=new FileOutputStream(propsFilePath,)@ -> props.store(fos,"Junit test",)@ -> fos.flush()@ -> fos.close()@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ServiceUIDQE2Test.java!ServiceUIDQE2Test!CreateInterfacePropsFile][SEQ] =  -> file=new File(path+File.separator+"service_intf_project.properties",)@ -> destDir=new File(path,)@ -> TRY { -> IF { -> destDir.mkdir()@!destDir.exists() } -> IF { -> file.createNewFile()@!file.exists() } -> out=new FileOutputStream(file,)@ -> pro.store(out,null,)@ -> out.close()@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ServiceUIDQE2Test.java!ServiceUIDQE2Test!createImplPropsFile][SEQ] =  -> file=new File(destDir.getAbsolutePath()+File.separator+IMPL_PROPERTIES,)@ -> IF { -> destDir.mkdir()@!destDir.exists() } -> IF { -> TRY { -> file.createNewFile()@!file.exists() -> pro=new Properties()@!file.exists() -> in=new FileInputStream(file,)@!file.exists() -> pro.load(in,)@!file.exists() -> pro.setProperty("simp_version","1.1",)@!file.exists() -> out=new FileOutputStream(destDir.getAbsolutePath()+File.separator+IMPL_PROPERTIES,)@!file.exists() -> pro.store(out,null,)@!file.exists() -> out.close()@!file.exists() -> in.close()@!file.exists() } }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ServiceUIDQE3Test.java!ServiceUIDQE3Test!CreateConsumerPropsFile][SEQ] =  -> file=new File(destDir.getAbsolutePath()+File.separator+"service_consumer_project.properties",)@ -> dDir=new File(destDir.getAbsolutePath(),)@ -> IF { -> dDir.mkdir()@!dDir.exists() } -> IF { -> file.createNewFile()@!file.exists() } -> pro=new Properties()@ -> in=new FileInputStream(file,)@ -> pro.load(in,)@ -> pro.setProperty("client_name","clientname",)@ -> pro.setProperty("scpp_version","1.1",)@ -> out=new FileOutputStream(destDir.getAbsolutePath()+File.separator+"service_consumer_project.properties",)@ -> pro.store(out,null,)@ -> out.close()@ -> in.close()@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ServiceUIDQETest.java!ServiceUIDQETest!CreateConsumerPropsFile][SEQ] =  -> dest=new File(destDir,)@ -> file=new File(destDir+File.separator+"service_consumer_project.properties",)@ -> IF { -> dest.mkdirs()@!dest.exists() } -> IF { -> file.createNewFile()@!file.exists() } -> pro=new Properties()@ -> in=new FileInputStream(file,)@ -> pro.load(in,)@ -> pro.setProperty("client_name","clientname",)@ -> pro.setProperty("scpp_version","1.1",)@ -> out=new FileOutputStream(destDir+File.separator+"service_consumer_project.properties",)@ -> pro.store(out,null,)@ -> out.close()@ -> in.close()@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ServiceUIDQETest.java!ServiceUIDQETest!CreateInterfacePropsFile][SEQ] =  -> file=new File(path+File.separator+"service_intf_project.properties",)@ -> destDir=new File(path,)@ -> IF { -> destDir.mkdirs()@!destDir.exists() } -> IF { -> file.createNewFile()@!file.exists() } -> pro=new Properties()@ -> in=new FileInputStream(file,)@ -> pro.load(in,)@ -> pro.setProperty("service_interface_class_name",map.get("service_interface_class_name",),)@ -> pro.setProperty("service_layer",map.get("service_layer",),)@ -> pro.setProperty("original_wsdl_uri",map.get("original_wsdl_uri",),)@ -> pro.setProperty("service_version",map.get("service_version",),)@ -> pro.setProperty("admin_name",map.get("admin_name",),)@ -> pro.setProperty("sipp_version",map.get("sipp_version",),)@ -> pro.setProperty("service_namespace_part",map.get("service_namespace_part",),)@ -> pro.setProperty("domainName",map.get("domainName",),)@ -> out=new FileOutputStream(path+File.separator+"service_intf_project.properties",)@ -> pro.store(out,null,)@ -> out.close()@ -> in.close()@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/errorlibrary/ErrorLibraryFileGenerationTest.java!ErrorLibraryFileGenerationTest!createDomainPropertiesFile][SEQ] =  -> testDir=testingdir.getFile("meta-src/META-INF/errorlibrary/"+errorLibName,)@ -> MavenTestingUtils.ensureDirExists(testDir,)@ -> testProp=new File(testDir,ERRORLIBPROPS,)@ -> IF { -> Assert.assertTrue("Creating empty file: "+testProp,testProp.createNewFile(),)@!testProp.exists() }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/library/BugTest.java!BugTest!testBug][SEQ] =  -> intfaceProps=createPropertyFile(destDir.getAbsolutePath(),INTF_PROPERTIES,)@ -> fillProperties(intfProps,intfaceProps,)@ -> createTypeLibrary(destDir.getAbsolutePath()+"/TestTypeLibrary",TEST_TYPE_LIBRARY,TEST_NAMESPACE,)@ -> setClassPath(destDir.getAbsolutePath(),)@ -> TestResourceUtil.copyResource("META-INF/"+TEST_TYPE_LIBRARY+"/TypeDependencies.xml",testingdir,TEST_TYPE_LIBRARY+"/meta-src",)@ -> TestResourceUtil.copyResource("types/C1Type.xsd",testingdir,TEST_TYPE_LIBRARY+"/meta-src",)@ -> createType(destDir.getAbsolutePath()+"/TestTypeLibrary",TEST_TYPE_LIBRARY,"C1Type.xsd",)@ -> TestResourceUtil.copyResource("types/C2Type.xsd",testingdir,TEST_TYPE_LIBRARY+"/meta-src",)@ -> createType(destDir.getAbsolutePath()+"/TestTypeLibrary",TEST_TYPE_LIBRARY,"C2Type.xsd",)@ -> createTypeLibrary(destDir.getAbsolutePath()+"/TestTypeLibrary2",TEST_TYPE_LIBRARY2,TEST_NAMESPACE2,)@ -> setClassPath(destDir.getAbsolutePath(),)@ -> TestResourceUtil.copyResource("META-INF/"+TEST_TYPE_LIBRARY2+"/TypeDependencies.xml",testingdir,TEST_TYPE_LIBRARY2+"/meta-src",)@ -> TestResourceUtil.copyResource("types/AType.xsd",testingdir,TEST_TYPE_LIBRARY2+"/meta-src",)@ -> createType(destDir.getAbsolutePath()+"/TestTypeLibrary2",TEST_TYPE_LIBRARY2,"AType.xsd",)@ -> TestResourceUtil.copyResource("types/C3Type.xsd",testingdir,TEST_TYPE_LIBRARY+"/meta-src",)@ -> createType(destDir.getAbsolutePath()+"/TestTypeLibrary",TEST_TYPE_LIBRARY,"C3Type.xsd",)@ -> TestResourceUtil.copyResource("META-INF/TurnTheServiceV1/TypeDependencies.xml",testingdir,"meta-src",)@ -> binDir=new File(destDir.getAbsolutePath()+"/bin",)@ -> dest=createFolders(binDir,"/org/ebayopensource/turmeric/services/v1/",)@ -> javaFilePath=destDir.getAbsolutePath()+"/TestTypeLibrary/gen-src/org/ebayopensource/turmeric/services/v1/"@ -> type=new File(dest+"/C1Type.java",)@ -> IF { -> type.createNewFile()@!type.exists() } -> type2=new File(dest+"/C2Type.java",)@ -> IF { -> type.createNewFile()@!type.exists() } -> FileUtils.copyFile(javaFilePath+"/C1Type.java",dest+"/C1Type.java",)@ -> FileUtils.copyFile(javaFilePath+"/C2Type.java",dest+"/C2Type.java",)@ -> compileJavaFile(type.getAbsolutePath(),)@ -> compileJavaFile(type2.getAbsolutePath(),)@ -> fillProperties(intfProps,intfaceProps,)@ -> wsdl=getCodegenQEDataFileInput("TurnTheServiceV1.wsdl",)@ -> testArgs1="-serviceName""NewService""-genType""ServiceFromWSDLIntf""-wsdl"wsdl.getAbsolutePath()"-gip""com.ebay.test.soaframework.tools.codegen""-dest"destDir.getAbsolutePath()"-src"destDir.getAbsolutePath()"-slayer""INTERMEDIATE""-scv""1.0.0""-bin"binDirectory.getAbsolutePath()"-pr"destDir.getAbsolutePath()@ -> performDirectCodeGen(testArgs1,binDirectory,)@ -> fileDirectories=new FileFilter()@ -> genJavaFile=new FileFilter()@ -> javaTypeLibDir=new File(javaFilePath,)@ -> IF { -> file=javaTypeLibDir.listFiles()@javaTypeLibDir.isDirectory() -> file=javaTypeLibDir.listFiles(fileDirectories,)@javaTypeLibDir.isDirectory() -> file=javaTypeLibDir.listFiles(genJavaFile,)@javaTypeLibDir.isDirectory() -> Assert.assertTrue(file.length==0,)@javaTypeLibDir.isDirectory() }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/library/TypeLibraryUtility.java!TypeLibraryUtility!copyXSDFileToTypesFolder1][SEQ] =  -> toXsdFile=new File(toXsdFilePath,)@ -> IF { -> TRY { -> toXsdFile.createNewFile()@!toXsdFile.exists() } } -> fromXsdFile=new File(fromXsdFilePath,)@ -> IF { -> TRY { -> fromXsdFile.createNewFile()@!fromXsdFile.exists() } } -> TRY { -> in=new FileInputStream(fromXsdFile,)@ -> out=new FileOutputStream(toXsdFile,)@ -> buf=1024@ -> len@ -> LOOP { -> out.write(buf,0,len,)@len=in.read(buf,)>0 } -> in.close()@ -> out.close()@ -> toXsdFile=null@ -> fromXsdFile=null@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/library/TypeLibraryUtility.java!TypeLibraryUtility!copyXSDFileToTypesFolder][SEQ] =  -> libfolder=new File(getTestDestDir().getAbsolutePath()+File.separator+libraryName+"\\meta-src\\types\\"+libraryName,)@ -> libfolder.mkdirs()@ -> toXsdFilePath=libfolder.toString()+"\\"+xsdName@ -> toXsdFile=new File(toXsdFilePath,)@ -> IF { -> TRY { -> toXsdFile.createNewFile()@!toXsdFile.exists() } } -> fromXsdFile=new File(fromXsdFilePath,)@ -> fromXsdFile.getAbsolutePath()@ -> IF { -> TRY { -> fromXsdFile.createNewFile()@!fromXsdFile.exists() } } -> TRY { -> in=new FileInputStream(fromXsdFile,)@ -> out=new FileOutputStream(toXsdFile,)@ -> buf=1024@ -> len@ -> LOOP { -> out.write(buf,0,len,)@len=in.read(buf,)>0 } -> in.close()@ -> out.close()@ -> toXsdFile=null@ -> fromXsdFile=null@ }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/JSFUtils.java!JSFUtils!createConfigFile][SEQ] =  -> TRY { -> dirPath=configPath.removeLastSegments(1,)@ -> dirPath.toFile().mkdirs()@ -> file=configPath.toFile()@ -> file.createNewFile()@ -> os=new FileOutputStream(file,)@ -> printConfigFile(os,)@ } CATCH { } CATCH { } FINALLY { -> IF { -> TRY { -> os.close()@os!=null } CATCH { } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/designtime/internal/view/model/jsp/persistence/TagRepository.java!TagRepository!getOrCreateMasterIndex][SEQ] =  -> wkspacePath=JSFCorePlugin.getDefault().getStateLocation()@ -> repoPath=wkspacePath.append(PATH_TO_REPOSITORY,)@ -> repoDir=new File(repoPath.toOSString(),)@ -> IF { -> createNewRepo(repoDir,)@!(GLOBAL_MASTER_INDEX!=null) && !repoDir.exists() } -> masterIndexFile=new File(new Path(repoDir.getAbsolutePath(),).append(MASTER_INDEX_FILE_NAME,).toOSString(),)@!(GLOBAL_MASTER_INDEX!=null) -> index=new MasterIndex(masterIndexFile,repoDir.getAbsolutePath(),)@!(GLOBAL_MASTER_INDEX!=null) -> IF { -> IF { -> throw new IOException("Could not create new master index file: "+masterIndexFile.toString(),)@!(GLOBAL_MASTER_INDEX!=null) && !masterIndexFile.createNewFile() && !masterIndexFile.exists() } -> index.create(new SerializableVersion(1,0,0,),)@!(GLOBAL_MASTER_INDEX!=null) && !(!masterIndexFile.createNewFile()) && !masterIndexFile.exists() } ELSE { -> index.load(new SerializableVersion(1,0,0,),)@!(GLOBAL_MASTER_INDEX!=null) && !(!masterIndexFile.exists()) }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/utils/PreviewUtil.java!PreviewUtil!toFile][SEQ] =  -> TRY { -> file=File.createTempFile("previewtmp",".html",)@ -> IF { -> file.createNewFile()@!file.exists() } -> contentTypeManager=Platform.getContentTypeManager()@ -> contentType=contentTypeManager.getContentType("org.eclipse.wst.html.core.htmlsource",)@ -> contentDescription=contentType.getDescriptionFor(new StringReader(result.toString(),),null,)@ -> charset=contentDescription.getCharset()@ -> IF { -> charset=ResourcesPlugin.getEncoding()@charset==null||!Charset.isSupported(charset,) -> IF { -> charset="UTF-8"@charset==null && charset==null||!Charset.isSupported(charset,) } } -> fos=new FileOutputStream(file,)@ -> ps=new PrintStream(fos,true,charset,)@ -> ps.print(result.toString(),)@ -> ps.close()@ -> fos.close()@ -> return file@ } CATCH { }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/pad/fragment/ChatRoomFragment.java!ChatRoomFragment!initValues][SEQ] =  -> path=Environment.getExternalStorageDirectory()+"/CubeImageCache/sendFiles/"@ -> dir=new File(path,)@ -> IF { -> dir.mkdirs()@!dir.exists() } -> mFileTemp=new File(path,)@ -> IF { -> TRY { -> mFileTemp.createNewFile()@!mFileTemp.exists() } CATCH { } }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/phone/chat/camera/CameraActivity.java!CameraActivity!save][SEQ] =  -> path=uri.getPath()@ -> TRY { -> IF { -> storage=Environment.getExternalStorageDirectory().toString()@ -> fs=new StatFs(storage,)@ -> available=fs.getAvailableBlocks()*fs.getBlockSize()@ -> Log.e("获取sd卡大小：","available="+available,)@ -> IF { -> return null@available>0&&available<data.length } -> file=new File(path,)@!(available>0&&available<data.length) -> IF { -> file.createNewFile()@!(available>0&&available<data.length) && !file.exists() } -> fos=new FileOutputStream(file,)@!(available>0&&available<data.length) -> fos.write(data,)@!(available>0&&available<data.length) -> fos.close()@!(available>0&&available<data.length) } } CATCH { -> e.printStackTrace()@ -> Log.e("保存文件异常：","Message="+e.getMessage(),)@ }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/phone/chat/chatroom/PicutureDetailActivity.java!PicutureDetailActivity!onClick][SEQ] =  -> System.gc()@ -> imageFilePath=Environment.getExternalStorageDirectory()+"/CubeImageCache/sendFiles/"@ -> dir=new File(imageFilePath,)@ -> IF { -> dir.mkdirs()@!dir.exists() } -> imageFilePath+=System.currentTimeMillis()@ -> imageFile=new File(imageFilePath,)@ -> IF { -> TRY { -> imageFile.createNewFile()@!imageFile.exists() } CATCH { } } -> new AsyncTask<String, Integer, String>().execute(sendFilePath,imageFile.getAbsolutePath(),)@
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/phone/chat/chatroom/PicutureDetailActivity.java!PicutureDetailActivity!onCreate][SEQ] =  -> imagePath=getIntent().getStringExtra("imagePath",)@ -> IF { -> IF { -> Log.e("---------点击打开图片：",imagePath,)@imagePath!=null -> path=Environment.getExternalStorageDirectory()+"/CubeImageCache/sendFiles/"@imagePath!=null -> dir=new File(path,)@ -> IF { -> dir.mkdirs()@!dir.exists() } -> fileTemp=new File(path,)@ -> IF { -> TRY { -> fileTemp.createNewFile()@!fileTemp.exists() } CATCH { } } -> new AsyncTask<String, Void, Bitmap>().execute(imagePath,path,)@imagePath!=null } } ELSE { -> IF { -> Log.e("---------点击打开图片：",imagePath,)@imagePath!=null } }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/phone/chat/image/CropImage.java!CropImage!saveOutput][SEQ] =  -> path=Environment.getExternalStorageDirectory()+"/CubeImageCache/sendFiles/"@ -> dir=new File(path,)@ -> IF { -> dir.mkdirs()@!dir.exists() } -> fileCrop=new File(path,)@ -> IF { -> TRY { -> fileCrop.createNewFile()@!fileCrop.exists() } CATCH { } } -> saveUrl=Uri.fromFile(fileCrop,)@ -> IF { -> TRY { -> outputStream=mContentResolver.openOutputStream(saveUrl,)@saveUrl!=null -> IF { -> croppedImage.compress(mOutputFormat,90,outputStream,)@outputStream!=null && saveUrl!=null } } CATCH { -> Log.e(TAG,"Cannot open file: "+saveUrl,ex,)@saveUrl!=null -> return @saveUrl!=null } FINALLY { -> Util.closeSilently(outputStream,)@saveUrl!=null } -> intent=getIntent()@saveUrl!=null -> intent.putExtra(IMAGE_PATH,path,)@saveUrl!=null -> intent.putExtra(ORIENTATION_IN_DEGREES,Util.getOrientationInDegree(this,),)@saveUrl!=null -> setResult(RESULT_OK,intent,)@saveUrl!=null } ELSE { -> Log.e(TAG,"not defined image url",)@!(saveUrl!=null) } -> croppedImage.recycle()@!(saveUrl!=null)
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/update/DownloadUpdateActivity.java!DownloadTask!doInBackground][SEQ] =  -> System.out.println(params[0],)@ -> httpParameters=new BasicHttpParams()@ -> HttpConnectionParams.setConnectionTimeout(httpParameters,15*1000,)@ -> client=new DefaultHttpClient(httpParameters,)@ -> updateUrl=URL.getUpdateAppplicationUrl(DownloadUpdateActivity.this,newApp.getBundle(),)@ -> get=new HttpGet(updateUrl,)@ -> System.out.println("更新包地址为:url ="+get.getURI(),)@ -> get.setHeader("User-Agent","Deamon",)@ -> apkFile=getAPKFile(app,)@ -> TRY { -> response=client.execute(get,)@ -> IF { -> entity=response.getEntity()@response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> length=entity.getContentLength()@response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> Log.d("VersionUpdate","安装包大小:"+length/1000+"kb",)@response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> is=entity.getContent()@response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> IF { -> apkFile.createNewFile()@!apkFile.exists() && response.getStatusLine().getStatusCode()==HttpStatus.SC_OK } -> fos=new FileOutputStream(apkFile,)@response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> buffer=1024*100@response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> count=0@response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> total=0@response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> LOOP { -> fos.write(buffer,0,count,)@count=is.read(buffer,0,buffer.length,)!=-1 && response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> total+=count@count=is.read(buffer,0,buffer.length,)!=-1 && response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> progress=total*100/length@count=is.read(buffer,0,buffer.length,)!=-1 && response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> publishProgress((int) progress,)@count=is.read(buffer,0,buffer.length,)!=-1 && response.getStatusLine().getStatusCode()==HttpStatus.SC_OK } -> Log.d("VersionUpdate","实际大小:"+total/1000+"kb",)@response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> IF { -> throw new RuntimeException("安装包大小与服务器不符，可能由于网络不稳定导致，请重新更新",)@response.getStatusLine().getStatusCode()==HttpStatus.SC_OK && total!=length } } ELSE { -> throw new RuntimeException("安装包下载失败，服务器连接异常，状态码:"+response.getStatusLine().getStatusCode(),)@!(response.getStatusLine().getStatusCode()==HttpStatus.SC_OK) } } CATCH { -> Log.e("VersionUpdate","获取更新失败",e,)@ } FINALLY { -> TRY { -> IF { -> fos.flush()@fos!=null -> fos.close()@fos!=null } -> IF { -> is.close()@is!=null } } }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/util/LogUtil.java!LogUtil!storeLog][SEQ] =  -> fileDir=new File(SAVE_LOG_DIR_PATH,)@ -> IF { -> IF { -> Log.e(tag,"Failed to create directory "+SAVE_LOG_DIR_PATH,)@!fileDir.mkdir() && !fileDir.exists() } } -> file=new File(save_log_path,)@!(!fileDir.exists()) -> IF { -> TRY { -> IF { -> Log.e(tag,"Failed to create log file "+save_log_path,)@!(!fileDir.exists()) && !file.exists() && !file.createNewFile() -> return @!(!fileDir.exists()) && !file.exists() && !file.createNewFile() } } CATCH { } } -> TRY { -> fos=new FileOutputStream(file,true,)@!(!fileDir.exists()) && !(!file.exists()) -> out=new PrintWriter(fos,)@!(!fileDir.exists()) && !(!file.exists()) -> out.println(" --module--"+tag+" "+msg+'\r',)@!(!fileDir.exists()) && !(!file.exists()) -> out.flush()@!(!fileDir.exists()) && !(!file.exists()) -> out.close()@!(!fileDir.exists()) && !(!file.exists()) } CATCH { } CATCH { }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/util/imageTool/CubeAsyncImage.java!CubeAsyncImage!doBufferImage][SEQ] =  -> TRY { -> fileName@ -> IF { -> return @!isSdCardExist(activity,)||fileName=getImageFileName(url,)==null } -> f=new File(new File(sdcard,imgBufferParent,),fileName,)@!(!isSdCardExist(activity,)||fileName=getImageFileName(url,)==null) -> IF { -> f.getParentFile().mkdirs()@!(!isSdCardExist(activity,)||fileName=getImageFileName(url,)==null) && !f.getParentFile().exists() } -> IF { -> f.delete()@!(!isSdCardExist(activity,)||fileName=getImageFileName(url,)==null) && f.exists() } -> f.createNewFile()@!(!isSdCardExist(activity,)||fileName=getImageFileName(url,)==null) -> bos=new BufferedOutputStream(new FileOutputStream(f,),)@!(!isSdCardExist(activity,)||fileName=getImageFileName(url,)==null) -> bitmap.compress(Bitmap.CompressFormat.PNG,100,bos,)@!(!isSdCardExist(activity,)||fileName=getImageFileName(url,)==null) -> bos.flush()@!(!isSdCardExist(activity,)||fileName=getImageFileName(url,)==null) -> bos.close()@!(!isSdCardExist(activity,)||fileName=getImageFileName(url,)==null) } CATCH { } CATCH { } CATCH { }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/org/apache/cordova/file/FileUtils.java!FileUtils!getFile][SEQ] =  -> IF { -> create=options.optBoolean("create",)@options!=null -> IF { -> exclusive=options.optBoolean("exclusive",)@options!=null && create } } -> IF { -> throw new EncodingException("This file has a : in it's name",)@fileName.contains(":",) } -> fp=createFileObject(dirPath,fileName,)@!(fileName.contains(":",)) -> IF { -> IF { -> throw new FileExistsException("create/exclusive fails",)@!(fileName.contains(":",)) && exclusive&&fp.exists() && create } -> IF { -> fp.mkdir()@!(fileName.contains(":",)) && !(exclusive&&fp.exists()) && create } ELSE { -> fp.createNewFile()@!(fileName.contains(":",)) && !(exclusive&&fp.exists()) && create } -> IF { -> throw new FileExistsException("create fails",)@!(fileName.contains(":",)) && !(exclusive&&fp.exists()) && !fp.exists() && create } } ELSE { -> IF { -> throw new FileNotFoundException("path does not exist",)@!(fileName.contains(":",)) && !(create) && !fp.exists() } -> IF { -> IF { -> throw new TypeMismatchException("path doesn't exist or is file",)@!(!fp.exists()) && !(fileName.contains(":",)) && !(create) && fp.isFile() } } ELSE { -> IF { -> throw new TypeMismatchException("path doesn't exist or is directory",)@!(!fp.exists()) && !(fileName.contains(":",)) && !(create) && fp.isDirectory() } } } -> return getEntry(fp,)@!(fileName.contains(":",)) && create
results[https://github.com/hyxf/coder!eoecn/src/cn/eoe/app/utils/ImageUtil.java!ImageUtil!saveImage][SEQ] =  -> f=new File(imagePath,)@ } ELSE { -> parentFile=f.getParentFile()@!(f.exists()) -> IF { -> parentFile.mkdirs()@!parentFile.exists() && !(f.exists()) } -> f.createNewFile()@!(f.exists()) -> fos=new FileOutputStream(imagePath,)@!(f.exists()) -> fos.write(buffer,)@!(f.exists()) -> fos.flush()@!(f.exists()) -> fos.close()@!(f.exists())
results[https://github.com/hyxf/coder!eoecn/src/cn/eoe/app/utils/ImageUtil.java!ImageUtil!saveImage][SEQ] =  -> IF { -> return @bm==null||imagePath==null||"".equals(imagePath,) } -> f=new File(imagePath,)@!(bm==null||imagePath==null||"".equals(imagePath,)) } ELSE { -> TRY { -> parentFile=f.getParentFile()@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) -> IF { -> parentFile.mkdirs()@!parentFile.exists() && !(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) } -> f.createNewFile()@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) -> fos=new FileOutputStream(f,)@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) -> bm.compress(Bitmap.CompressFormat.PNG,100,fos,)@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) -> fos.close()@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) } CATCH { -> f.delete()@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) } CATCH { -> f.delete()@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) }
results[https://github.com/hyxf/coder!eoecn/src/cn/eoe/app/utils/RequestCacheUtil.java!RequestCacheUtil!saveFileForLocal][SEQ] =  -> file=new File(requestPath,)@ -> IF { -> TRY { -> parentFile=file.getParentFile()@!file.exists() -> IF { -> parentFile.mkdirs()@!parentFile.exists() && !file.exists() } -> file.createNewFile()@!file.exists() -> fout=new FileOutputStream(file,)@!file.exists() -> buffer=result.getBytes()@ -> fout.write(buffer,)@!file.exists() -> fout.close()@!file.exists() } CATCH { } CATCH { } }
results[https://github.com/hyxf/coder!source/src/cn/eoe/app/utils/ImageUtil.java!ImageUtil!saveImage][SEQ] =  -> f=new File(imagePath,)@ } ELSE { -> parentFile=f.getParentFile()@!(f.exists()) -> IF { -> parentFile.mkdirs()@!parentFile.exists() && !(f.exists()) } -> f.createNewFile()@!(f.exists()) -> fos=new FileOutputStream(imagePath,)@!(f.exists()) -> fos.write(buffer,)@!(f.exists()) -> fos.flush()@!(f.exists()) -> fos.close()@!(f.exists())
results[https://github.com/hyxf/coder!source/src/cn/eoe/app/utils/ImageUtil.java!ImageUtil!saveImage][SEQ] =  -> IF { -> return @bm==null||imagePath==null||"".equals(imagePath,) } -> f=new File(imagePath,)@!(bm==null||imagePath==null||"".equals(imagePath,)) } ELSE { -> TRY { -> parentFile=f.getParentFile()@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) -> IF { -> parentFile.mkdirs()@!parentFile.exists() && !(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) } -> f.createNewFile()@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) -> fos=new FileOutputStream(f,)@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) -> bm.compress(Bitmap.CompressFormat.PNG,100,fos,)@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) -> fos.close()@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) } CATCH { -> f.delete()@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) } CATCH { -> f.delete()@!(bm==null||imagePath==null||"".equals(imagePath,)) && !(f.exists()) }
results[https://github.com/hyxf/coder!source/src/cn/eoe/app/utils/RequestCacheUtil.java!RequestCacheUtil!saveFileForLocal][SEQ] =  -> file=new File(requestPath,)@ -> IF { -> TRY { -> parentFile=file.getParentFile()@!file.exists() -> IF { -> parentFile.mkdirs()@!parentFile.exists() && !file.exists() } -> file.createNewFile()@!file.exists() -> fout=new FileOutputStream(file,)@!file.exists() -> buffer=result.getBytes()@ -> fout.write(buffer,)@!file.exists() -> fout.close()@!file.exists() } CATCH { } CATCH { } }
results[https://github.com/hyxf/coder!source/src/cn/hyxf/app/utils/RequestCacheUtil.java!RequestCacheUtil!saveFileForLocal][SEQ] =  -> file=new File(requestPath,)@ -> IF { -> TRY { -> parentFile=file.getParentFile()@!file.exists() -> IF { -> parentFile.mkdirs()@!parentFile.exists() && !file.exists() } -> file.createNewFile()@!file.exists() -> fout=new FileOutputStream(file,)@!file.exists() -> buffer=result.getBytes()@ -> fout.write(buffer,)@!file.exists() -> fout.close()@!file.exists() } CATCH { } CATCH { } }
results[https://github.com/raymondBourges/esup-commons-import!esup-commons/esup-commons-core/src/main/java/org/esupportail/commons/utils/lock/FileLockImpl.java!FileLockImpl!lock][SEQ] =  -> TRY { -> file=new File(filename,)@ -> IF { -> throw new AlreadyLockedException("file ["+filename+"] is already locked",)@!file.createNewFile() } } CATCH { -> throw new LockException("could not lock file ["+filename+"]",)@ }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/io/flv/impl/FLV.java!FLV!getReader][SEQ] =  -> fileName=file.getName()@ -> IF { -> log.info("FLV cache is null, forcing NoCacheImpl instance",)@ -> cache=NoCacheImpl.getInstance()@cache==null } -> ic=cache.get(fileName,)@ -> IF { -> IF { -> log.debug("File size: {}",file.length(),)@null==ic||null==ic.getByteBuffer() && file.exists() -> reader=new FLVReader(file,generateMetadata,)@null==ic||null==ic.getByteBuffer() && file.exists() -> fileData=reader.getFileData()@null==ic||null==ic.getByteBuffer() && file.exists() -> IF { -> log.debug("Item accepted by the cache: {}",fileName,)@fileData!=null&&cache.offer(fileName,fileData,) && null==ic||null==ic.getByteBuffer() && file.exists() } ELSE { -> log.debug("Item will not be cached: {}",fileName,)@!(fileData!=null&&cache.offer(fileName,fileData,)) && null==ic||null==ic.getByteBuffer() && file.exists() } } ELSE { -> log.info("Creating new file: {}",file,)@!(file.exists()) && null==ic||null==ic.getByteBuffer() -> file.createNewFile()@!(file.exists()) && null==ic||null==ic.getByteBuffer() } } ELSE { -> fileData=IoBuffer.wrap(ic.getBytes(),)@!(null==ic||null==ic.getByteBuffer()) -> reader=new FLVReader(fileData,generateMetadata,)@!(null==ic||null==ic.getByteBuffer()) }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/io/flv/impl/FLVWriter.java!FLVWriter!<init>][SEQ] =  -> filePath=file.getAbsolutePath()@ -> log.debug("Writing to: {}",filePath,)@ -> TRY { -> IF { -> timeOffset=FLVReader.getDuration(file,)@ -> duration=timeOffset@ -> log.debug("Duration: {}",timeOffset,)@ -> dataFilethis=new RandomAccessFile(file,"rws",)@ -> IF { -> log.warn("File does not exist or cannot be accessed",)@ } ELSE { -> log.trace("File size: {} last modified: {}",file.length(),file.lastModified(),)@!(!file.exists()||!file.canRead()||!file.canWrite()) -> bytesWritten=file.length()@!(!file.exists()||!file.canRead()||!file.canWrite()) } -> IF { -> dataFile.seek(META_POSITION,)@duration==0 } } ELSE { -> dat=new File(filePath+".ser",)@ -> IF { -> dat.delete()@dat.exists() -> dat.createNewFile()@dat.exists() } -> dataFilethis=new RandomAccessFile(dat,"rws",)@ -> filethis=new RandomAccessFile(file,"rws",)@ } } CATCH { -> log.error("Failed to create FLV writer",e,)@ }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/io/mp4/impl/MP4.java!MP4!getReader][SEQ] =  -> fileName=file.getName()@ -> IF { -> log.debug("File name: {} size: {}",fileName,file.length(),)@file.exists() -> reader=new MP4Reader(file,)@file.exists() -> fileData=reader.getFileData()@file.exists() -> log.trace("File data size: {}",fileData,)@file.exists() } ELSE { -> log.info("Creating new file: {}",file,)@!(file.exists()) -> file.createNewFile()@!(file.exists()) }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/net/proxy/DebugProxyHandler.java!DebugProxyHandler!sessionCreated][SEQ] =  -> isClient=session.getRemoteAddress().equals(forward,)@ -> IF { -> log.debug("Is downstream: "+isClient,)@log.isDebugEnabled() -> session.setAttribute(ProtocolState.SESSION_KEY,new RTMP(isClient,),)@log.isDebugEnabled() -> session.getFilterChain().addFirst("protocol",new ProtocolCodecFilter(codecFactory,),)@ } -> session.getFilterChain().addFirst("proxy",new ProxyFilter((isClient)?"client":"server",),)@ -> IF { -> fileName=System.currentTimeMillis()+'_'+forward.getHostName()+'_'+forward.getPort()+'_'+(isClient)?"DOWNSTREAM":"UPSTREAM"@ -> headersFile=loader.getResource(dumpTo+fileName+".cap",).getFile()@ -> headersFile.createNewFile()@ -> rawFile=loader.getResource(dumpTo+fileName+".raw",).getFile()@ -> rawFile.createNewFile()@ -> headersFos=new FileOutputStream(headersFile,)@ -> headers=headersFos.getChannel()@ -> rawFos=new FileOutputStream(rawFile,)@ -> raw=rawFos.getChannel()@ -> header=IoBuffer.allocate(1,)@ -> header.put((byte) (isClient)?0x00:0x01,)@ -> header.flip()@ -> headers.write(header.buf(),)@ -> session.getFilterChain().addFirst("dump",new NetworkDumpFilter(headers,raw,),)@ } -> IF { -> log.debug("Connecting..",)@!isClient -> connector=new NioSocketConnector()@!isClient -> connector.setHandler(this,)@ -> future=connector.connect(forward,)@!isClient -> future.awaitUninterruptibly()@!isClient -> IF { -> IF { -> log.debug("Connected: {}",forward,)@log.isDebugEnabled() && future.isConnected() && !isClient } -> client=future.getSession()@future.isConnected() && !isClient -> client.setAttribute(ProxyFilter.FORWARD_KEY,session,)@future.isConnected() && !isClient -> session.setAttribute(ProxyFilter.FORWARD_KEY,client,)@future.isConnected() && !isClient } } -> super.sessionCreated(session,)@
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/stream/BroadcastStreamNew.java!BroadcastStreamNew!saveAs][SEQ] =  -> TRY { -> IF { } -> IF { } -> IF { } -> IF { } ELSE { } }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/stream/ClientBroadcastStream.java!ClientBroadcastStream!saveAs][SEQ] =  -> log.debug("SaveAs - name: {} append: {}",name,isAppend,)@ -> recordParamMap=new HashMap<String, Object>(1,)@ -> IF { -> recordPipe=new InMemoryPushPushPipe()@recordPipe==null -> recordParamMap.put("record",null,)@ -> recordPipe.subscribe((IProvider) this,recordParamMap,)@recordPipe==null -> recordParamMap.clear()@recordPipe==null } -> conn=getConnection()@ -> IF { -> throw new IOException("Stream is no longer connected",)@conn==null } -> scope=conn.getScope()@!(conn==null) -> generator=(IStreamFilenameGenerator) ScopeUtils.getScopeService(scope,IStreamFilenameGenerator.class,DefaultStreamFilenameGenerator.class,)@!(conn==null) -> recordingFilename=generator.generateFilename(scope,name,".flv",GenerationType.RECORD,)@!(conn==null) -> IF { -> file=new File(recordingFilename,)@!(conn==null) && generator.resolvesToAbsolutePath() } ELSE { -> file=scope.getContext().getResource(recordingFilename,).getFile()@!(generator.resolvesToAbsolutePath()) && !(conn==null) } -> log.debug("File exists: {} writable: {}",file.exists(),file.canWrite(),)@!(conn==null) -> IF { -> IF { -> IF { -> throw new IOException(String.format("File: %s could not be deleted",file.getName(),),)@!file.delete() && !(conn==null) && !isAppend && file.exists() } } } -> IF { -> path=file.getAbsolutePath()@!file.exists() && !(!isAppend) && !(conn==null) -> slashPos=path.lastIndexOf(File.separator,)@!file.exists() && !(!isAppend) && !(conn==null) -> IF { -> path=path.substring(0,slashPos,)@slashPos!=-1 && !file.exists() && !(!isAppend) && !(conn==null) } -> tmp=new File(path,)@!file.exists() && !(!isAppend) && !(conn==null) -> IF { -> tmp.mkdirs()@!file.exists() && !tmp.isDirectory() && !(!isAppend) && !(conn==null) } -> file.createNewFile()@!file.exists() && !(!isAppend) && !(conn==null) } -> meta=new File(file.getCanonicalPath()+".meta",)@!(!isAppend) && !(conn==null) -> IF { -> log.trace("Meta file exists",)@!(!isAppend) && !(conn==null) && meta.exists() -> IF { -> log.debug("Meta file deleted - {}",meta.getName(),)@meta.delete() && !(!isAppend) && !(conn==null) && meta.exists() } ELSE { -> log.warn("Meta file was not deleted - {}",meta.getName(),)@!(!isAppend) && !(conn==null) && !(meta.delete()) && meta.exists() -> meta.deleteOnExit()@!(!isAppend) && !(conn==null) && !(meta.delete()) && meta.exists() } } ELSE { -> log.debug("Meta file does not exist: {}",meta.getCanonicalPath(),)@!(!isAppend) && !(meta.exists()) && !(conn==null) } -> log.debug("Recording file: {}",file.getCanonicalPath(),)@!(!isAppend) && !(conn==null) -> IF { -> log.debug("Context contains a file consumer",)@!(!isAppend) && !(conn==null) -> recordingFile=(FileConsumer) scope.getContext().getBean("fileConsumer",)@!(!isAppend) && scope.getContext().hasBean("fileConsumer",) && !(conn==null) -> recordingFile.setScope(scope,)@!(!isAppend) && scope.getContext().hasBean("fileConsumer",) && !(conn==null) -> recordingFile.setFile(file,)@!(!isAppend) && scope.getContext().hasBean("fileConsumer",) && !(conn==null) } ELSE { -> log.debug("Context does not contain a file consumer, using direct instance",)@!(!isAppend) && !(conn==null) -> recordingFile=new FileConsumer(scope,file,)@!(!isAppend) && !(scope.getContext().hasBean("fileConsumer",)) && !(conn==null) } -> codecInfo=getCodecInfo()@!(!isAppend) && !(conn==null) -> log.debug("Codec info: {}",codecInfo,)@!(!isAppend) && !(conn==null) -> IF { -> info=(StreamCodecInfo) codecInfo@codecInfo && !(!isAppend) && !(conn==null) -> videoCodec=info.getVideoCodec()@codecInfo && !(!isAppend) && !(conn==null) -> log.debug("Video codec: {}",videoCodec,)@codecInfo && !(!isAppend) && !(conn==null) -> IF { -> config=videoCodec.getDecoderConfiguration()@codecInfo && !(!isAppend) && !(conn==null) && videoCodec!=null -> IF { -> log.debug("Decoder configuration is available for {}",videoCodec.getName(),)@codecInfo && !(!isAppend) && !(conn==null) && videoCodec!=null && config!=null -> conf=new VideoData(config.asReadOnlyBuffer(),)@codecInfo && !(!isAppend) && !(conn==null) && videoCodec!=null && config!=null -> TRY { -> log.debug("Setting decoder configuration for recording",)@codecInfo && !(!isAppend) && !(conn==null) && videoCodec!=null && config!=null -> recordingFile.setVideoDecoderConfiguration(conf,)@codecInfo && !(!isAppend) && !(conn==null) && videoCodec!=null && config!=null -> conf.release()@codecInfo && !(!isAppend) && !(conn==null) && videoCodec!=null && config!=null } } } ELSE { -> log.debug("Could not initialize stream output, videoCodec is null.",)@codecInfo && !(videoCodec!=null) && !(!isAppend) && !(conn==null) } -> audioCodec=info.getAudioCodec()@codecInfo && !(!isAppend) && !(conn==null) -> log.debug("Audio codec: {}",audioCodec,)@codecInfo && !(!isAppend) && !(conn==null) -> IF { -> config=audioCodec.getDecoderConfiguration()@codecInfo && !(!isAppend) && !(conn==null) && audioCodec!=null -> IF { -> log.debug("Decoder configuration is available for {}",audioCodec.getName(),)@codecInfo && !(!isAppend) && !(conn==null) && config!=null && audioCodec!=null -> conf=new AudioData(config.asReadOnlyBuffer(),)@codecInfo && !(!isAppend) && !(conn==null) && config!=null && audioCodec!=null -> TRY { -> log.debug("Setting decoder configuration for recording",)@codecInfo && !(!isAppend) && !(conn==null) && config!=null && audioCodec!=null -> recordingFile.setAudioDecoderConfiguration(conf,)@codecInfo && !(!isAppend) && !(conn==null) && config!=null && audioCodec!=null -> conf.release()@codecInfo && !(!isAppend) && !(conn==null) && config!=null && audioCodec!=null } } } ELSE { -> log.debug("No decoder configuration available, audioCodec is null.",)@codecInfo && !(!isAppend) && !(conn==null) && !(audioCodec!=null) } } -> IF { -> recordParamMap.put("mode","append",)@!(!isAppend) && !(conn==null) } ELSE { -> recordParamMap.put("mode","record",)@!(!isAppend) && !(conn==null) } -> recording=recordPipe.subscribe(recordingFile,recordParamMap,)@!(!isAppend) && !(conn==null)
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/stream/ServerStream.java!ServerStream!saveAs][SEQ] =  -> TRY { -> scope=getScope()@ -> generator=(IStreamFilenameGenerator) ScopeUtils.getScopeService(scope,IStreamFilenameGenerator.class,DefaultStreamFilenameGenerator.class,)@ -> filename=generator.generateFilename(scope,name,".flv",GenerationType.RECORD,)@ -> IF { -> file=new File(filename,)@generator.resolvesToAbsolutePath() } ELSE { -> file=scope.getContext().getResource(filename,).getFile()@!(generator.resolvesToAbsolutePath()) } -> IF { -> IF { -> IF { -> throw new IOException("file could not be deleted",)@!file.delete() && file.exists() } } } ELSE { -> IF { } } -> IF { -> path=file.getAbsolutePath()@!file.exists() -> slashPos=path.lastIndexOf(File.separator,)@!file.exists() -> IF { -> path=path.substring(0,slashPos,)@slashPos!=-1 && !file.exists() } -> tmp=new File(path,)@!file.exists() -> IF { -> tmp.mkdirs()@!file.exists() && !tmp.isDirectory() } -> IF { -> log.warn("File cannot be written to {}",file.getCanonicalPath(),)@!file.exists() && !file.canWrite() } -> file.createNewFile()@!file.exists() } ELSE { -> meta=new File(file.getAbsolutePath()+".meta",)@!(!file.exists()) -> IF { -> log.debug("Meta file deleted - {}",meta.getName(),)@meta.delete() && !(!file.exists()) } ELSE { -> log.warn("Meta file was not deleted - {}",meta.getName(),)@!(!file.exists()) && !(meta.delete()) -> meta.deleteOnExit()@!(!file.exists()) && !(meta.delete()) } } -> log.debug("Recording file: {}",file.getCanonicalPath(),)@ -> IF { -> recordingFile=(FileConsumer) scope.getContext().getBean("fileConsumer",)@scope.getContext().hasBean("fileConsumer",) -> recordingFile.setScope(scope,)@scope.getContext().hasBean("fileConsumer",) -> recordingFile.setFile(file,)@scope.getContext().hasBean("fileConsumer",) } ELSE { -> recordingFile=new FileConsumer(scope,file,)@!(scope.getContext().hasBean("fileConsumer",)) } -> paramMap=new HashMap<String, Object>()@ -> IF { -> paramMap.put("mode","append",)@ } ELSE { -> paramMap.put("mode","record",)@ } -> IF { -> recordPipe=new InMemoryPushPushPipe()@null==recordPipe } -> recordPipe.subscribe(recordingFile,paramMap,)@ -> recordingFilename=filename@ } CATCH { -> log.warn("Save as exception",e,)@ }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/stream/consumer/FileConsumer.java!FileConsumer!init][SEQ] =  -> factory=(IStreamableFileFactory) ScopeUtils.getScopeService(scope,IStreamableFileFactory.class,StreamableFileFactory.class,)@ -> folder=file.getParentFile()@ -> IF { -> IF { -> throw new IOException("Could not create parent folder",)@!folder.mkdirs() && !folder.exists() } } -> IF { -> file.createNewFile()@!(!folder.exists()) && !file.isFile() } ELSE { -> IF { -> throw new IOException("The file is read-only",)@!(!folder.exists()) && !file.canWrite() && !(!file.isFile()) } } -> service=factory.getService(file,)@!(!folder.exists()) && !file.isFile() -> flv=service.getStreamableFile(file,)@!(!folder.exists()) && !file.isFile() -> IF { -> writer=flv.getWriter()@mode==null||mode.equals(IClientStream.MODE_RECORD,) && !(!folder.exists()) && !file.isFile() -> IF { -> writer.writeTag(videoConfigurationTag,)@mode==null||mode.equals(IClientStream.MODE_RECORD,) && videoConfigurationTag!=null && !(!folder.exists()) && !file.isFile() } -> IF { -> writer.writeTag(audioConfigurationTag,)@mode==null||mode.equals(IClientStream.MODE_RECORD,) && !(!folder.exists()) && audioConfigurationTag!=null && !file.isFile() } } ELSE { -> IF { -> writer=flv.getAppendWriter()@mode==null||mode.equals(IClientStream.MODE_RECORD,) && !(!folder.exists()) && mode.equals(IClientStream.MODE_APPEND,) && !file.isFile() } }
results[https://github.com/rfkrocktk/red5-server!test/org/red5/server/stream/NoSyncServerStream.java!NoSyncServerStream!saveAs][SEQ] =  -> TRY { -> scope=getScope()@ -> generator=(IStreamFilenameGenerator) ScopeUtils.getScopeService(scope,IStreamFilenameGenerator.class,DefaultStreamFilenameGenerator.class,)@ -> filename=generator.generateFilename(scope,name,".flv",GenerationType.RECORD,)@ -> res=scope.getContext().getResource(filename,)@ -> IF { -> IF { -> IF { -> throw new IOException("file could not be deleted",)@!res.getFile().delete() && res.exists() } } } ELSE { -> IF { } } -> IF { -> TRY { -> path=res.getFile().getAbsolutePath()@!res.exists() -> slashPos=path.lastIndexOf(File.separator,)@!res.exists() -> IF { -> path=path.substring(0,slashPos,)@slashPos!=-1 && !res.exists() } -> tmp=new File(path,)@!res.exists() -> IF { -> tmp.mkdirs()@!res.exists() && !tmp.isDirectory() } } CATCH { -> log.error("Could not create destination directory.",err,)@ } -> res=scope.getResource(filename,)@!res.exists() } -> IF { -> IF { -> log.warn("File cannot be written to "+res.getFile().getCanonicalPath(),)@!res.exists() && !res.getFile().canWrite() } -> res.getFile().createNewFile()@!res.exists() } -> fc=new FileConsumer(scope,res.getFile(),)@ -> paramMap=new HashMap<String, Object>()@ -> IF { -> paramMap.put("mode","append",)@ } ELSE { -> paramMap.put("mode","record",)@ } -> IF { -> recordPipe=new InMemoryPushPushPipe()@null==recordPipe } -> recordPipe.subscribe(fc,paramMap,)@ -> recordingFilename=filename@ -> log.warn("Save as exception",e,)@ }
results[https://github.com/twigkit/fig!fig-core/src/main/java/twigkit/fig/loader/PropertiesLoader.java!PropertiesLoader!findFileForConfig][SEQ] =  -> logger.debug("Checking for config file in: {} (prefix: {})",folder,prefix,)@ -> IF { -> currentConfiguration=iterator.next()@iterator.hasNext() } -> f=new File(folder,(prefix.length()>0)?prefix+LEVEL_SEPARATOR:""+currentConfiguration.name()+FILE_EXTENSION,)@ -> logger.debug("Checking file: {}",f,)@ -> IF { -> logger.debug("Found file for parent configuration: {}",f,)@f.exists() -> return findFileForConfig(iterator,config,folder,prefix+LEVEL_SEPARATOR+currentConfiguration.name(),)@f.exists() } ELSE { -> TRY { -> logger.debug("File [{}] not found, creating...",f,)@!(f.exists()) -> f.createNewFile()@!(f.exists()) } CATCH { } } -> logger.debug("Final file found [{}]",f,)@!(f.exists())
results[https://github.com/twigkit/fig!fig-core/src/main/java/twigkit/fig/loader/PropertiesLoader.java!PropertiesLoader!write][SEQ] =  -> TRY { -> IF { -> logger.debug("Creating a new config file {} for {}",file.getAbsolutePath(),config.name(),)@!file.exists() -> file.createNewFile()@!file.exists() } -> logger.debug("Writing to file: {}",file,)@ -> out=new OutputStreamWriter(new FileOutputStream(file,),"UTF-8",)@ -> val@ -> LOOP { -> out.write(val.label()+": "+val.as_string(),)@ -> out.write("\n",)@ } -> filePaths.put(config.path(),file,)@ } CATCH { } FINALLY { -> TRY { -> IF { -> out.close()@out!=null } } CATCH { } }
results[https://github.com/yangfuhai/afinal!src/net/tsz/afinal/FinalDb.java!FinalDb!createDbFileOnSDCard][SEQ] =  -> dbf=new File(sdcardPath,dbfilename,)@ -> IF { -> TRY { -> IF { -> return SQLiteDatabase.openOrCreateDatabase(dbf,null,)@dbf.createNewFile() && !dbf.exists() } } CATCH { -> throw new DbException("数据库文件创建失败",ioex,)@!dbf.exists() } } ELSE { -> return SQLiteDatabase.openOrCreateDatabase(dbf,null,)@!(!dbf.exists()) }
results[https://github.com/yangfuhai/afinal!src/net/tsz/afinal/http/entityhandler/FileEntityHandler.java!FileEntityHandler!handleEntity][SEQ] =  -> IF { -> return null@TextUtils.isEmpty(target,)||target.trim().length()==0 } -> targetFile=new File(target,)@!(TextUtils.isEmpty(target,)||target.trim().length()==0) -> IF { -> targetFile.createNewFile()@!(TextUtils.isEmpty(target,)||target.trim().length()==0) && !targetFile.exists() } -> IF { -> return targetFile@mStop && !(TextUtils.isEmpty(target,)||target.trim().length()==0) } -> IF { -> current=targetFile.length()@!(mStop) && !(TextUtils.isEmpty(target,)||target.trim().length()==0) -> os=new FileOutputStream(target,true,)@!(mStop) && !(TextUtils.isEmpty(target,)||target.trim().length()==0) } ELSE { -> os=new FileOutputStream(target,)@!(mStop) && !(TextUtils.isEmpty(target,)||target.trim().length()==0) } -> IF { -> return targetFile@mStop && !(TextUtils.isEmpty(target,)||target.trim().length()==0) } -> input=entity.getContent()@!(mStop) && !(TextUtils.isEmpty(target,)||target.trim().length()==0) -> count=entity.getContentLength()+current@!(mStop) && !(TextUtils.isEmpty(target,)||target.trim().length()==0) -> LOOP { -> os.write(buffer,0,readLen,)@!(mStop) && !mStop&&!current>=count&&readLen=input.read(buffer,0,1024,)>0 && !(TextUtils.isEmpty(target,)||target.trim().length()==0) && !(current>=count||mStop) -> callback.callBack(count,current,false,)@!(mStop) && !mStop&&!current>=count&&readLen=input.read(buffer,0,1024,)>0 && !(TextUtils.isEmpty(target,)||target.trim().length()==0) && !(current>=count||mStop) } -> callback.callBack(count,current,true,)@!(mStop) && !(TextUtils.isEmpty(target,)||target.trim().length()==0) && !(current>=count||mStop) -> IF { -> throw new IOException("user stop download thread",)@!(mStop) && !(TextUtils.isEmpty(target,)||target.trim().length()==0) && !(current>=count||mStop) && mStop&&current<count }