results[https://github.com/DownGoat/MonsterMash!G12/src/MonsterMash/org/json/JSONObject.java!JSONObject!put][SEQ] =  -> IF { -> throw new JSONException("Null key.",)@key==null } -> IF { -> testValidity(value,)@!(key==null) && value!=null -> pooled=(String) keyPool.get(key,)@!(key==null) -> IF { -> IF { -> keyPool=new HashMap(keyPoolSize,)@!(key==null) && keyPool.size()>=keyPoolSize && pooled==null } -> keyPool.put(key,key,)@!(key==null) && pooled==null } -> mapthis.put(key,value,)@!(key==null) && value!=null } ELSE { -> this.remove(key,)@!(key==null) }
results[https://github.com/DownGoat/MonsterMash!G12/src/MonsterMash/org/json/XMLTokener.java!XMLTokener!nextEntity][SEQ] =  -> sb=new StringBuffer()@ -> LOOP { -> c=next()@ -> IF { -> sb.append(Character.toLowerCase(c,),)@Character.isLetterOrDigit(c,)||c=='#' } ELSE { } ELSE { -> throw syntaxError("Missing ';' in XML entity: &"+sb,)@!(Character.isLetterOrDigit(c,)||c=='#') && !(c==';') } } -> string=sb.toString()@ -> object=entity.get(string,)@ -> return (object!=null)?object:ampersand+string+";"@
results[https://github.com/ceylon/ceylon-compiler!langtools/test/tools/javac/processing/model/util/directSupersOfErr/C1.java!Main!getClassTextList][SEQ] =  -> return (ArrayList) textMap.get(name,)@
results[https://github.com/ceylon/ceylon-compiler!langtools/test/tools/javac/processing/model/util/directSupersOfErr/C1.java!Main!getClass][SEQ] =  -> IF { -> resource=name.replace('.','/',)+".class"@!classMap.containsKey(name,) -> url=loader.findResource(resource,)@!classMap.containsKey(name,) -> IF { -> throw new IOException("can't find class file "+resource+" in "+loader,)@!classMap.containsKey(name,) && url==null } -> is=url.openStream()@!(url==null) && !classMap.containsKey(name,) -> result=readClass(is,)@!(url==null) && !classMap.containsKey(name,) -> classMap.put(name,result,)@!(url==null) && !classMap.containsKey(name,) } -> return (ClassWrapper) classMap.get(name,)@!(!classMap.containsKey(name,))
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/jaxbri/CodeGenerationUtility.java!CodeGenerationUtility!processSchemas][SEQ] =  -> TRY { -> IF { -> return new DefaultTypeMapper()@schemas==null||schemas.isEmpty() } -> schemaToInputSourceMap=new HashMap()@!(schemas==null||schemas.isEmpty()) -> mapper=new JavaTypeMapper()@!(schemas==null||schemas.isEmpty()) -> baseURI=cgconfig.getBaseURI()@!(schemas==null||schemas.isEmpty()) -> IF { -> baseURI=baseURI+"/"@!baseURI.endsWith("/",) && !(schemas==null||schemas.isEmpty()) } -> i=0@!(schemas==null||schemas.isEmpty()) -> LOOP { -> schema=(XmlSchema) schemas.get(i,)@!(schemas==null||schemas.isEmpty()) && i<schemas.size() -> inputSource=new InputSource(new StringReader(getSchemaAsString(schema,),),)@!(schemas==null||schemas.isEmpty()) && i<schemas.size() -> inputSource.setSystemId(baseURI+"xsd"+i+".xsd",)@!(schemas==null||schemas.isEmpty()) && i<schemas.size() -> inputSource.setPublicId(schema.getTargetNamespace(),)@!(schemas==null||schemas.isEmpty()) && i<schemas.size() -> schemaToInputSourceMap.put(schema,inputSource,)@!(schemas==null||schemas.isEmpty()) && i<schemas.size() -> ++i@!(schemas==null||schemas.isEmpty()) && i<schemas.size() } -> outputDir=new File(cgconfig.getOutputLocation(),"src",)@!(schemas==null||schemas.isEmpty()) -> createDir(outputDir,)@!(schemas==null||schemas.isEmpty()) -> nsMap=cgconfig.getUri2PackageNameMap()@!(schemas==null||schemas.isEmpty()) -> resolver=new EntityResolver()@!(schemas==null||schemas.isEmpty()) -> properties=cgconfig.getProperties()@!(schemas==null||schemas.isEmpty()) -> bindingFileName=(String) properties.get(BINDING_FILE_NAME,)@!(schemas==null||schemas.isEmpty()) -> schemaIter=schemaToInputSourceMap.keySet().iterator()@!(schemas==null||schemas.isEmpty()) -> LOOP { -> sc=XJC.createSchemaCompiler()@schemaIter.hasNext() && !(schemas==null||schemas.isEmpty()) -> IF { -> IF { -> scanEpisodeFile(new File(bindingFileName,),sc,)@!(schemaIter.hasNext()) && bindingFileName!=null && !(schemas==null||schemas.isEmpty()) && bindingFileName.endsWith(".jar",) } ELSE { -> inputSoruce=new InputSource(new FileInputStream(bindingFileName,),)@!(schemaIter.hasNext()) && bindingFileName!=null && !(schemas==null||schemas.isEmpty()) && !(bindingFileName.endsWith(".jar",)) -> inputSoruce.setSystemId(new File(bindingFileName,).toURI().toString(),)@!(schemaIter.hasNext()) && bindingFileName!=null && !(schemas==null||schemas.isEmpty()) && !(bindingFileName.endsWith(".jar",)) -> sc.getOptions().addBindFile(inputSoruce,)@!(schemaIter.hasNext()) && bindingFileName!=null && !(schemas==null||schemas.isEmpty()) && !(bindingFileName.endsWith(".jar",)) } } -> key=(XmlSchema) schemaIter.next()@schemaIter.hasNext() && !(schemas==null||schemas.isEmpty()) -> IF { -> iterator=nsMap.entrySet().iterator()@!(schemaIter.hasNext()) && nsMap!=null && !(schemas==null||schemas.isEmpty()) -> LOOP { -> entry=(Map.Entry) iterator.next()@!(schemaIter.hasNext()) && iterator.hasNext() && nsMap!=null && !(schemas==null||schemas.isEmpty()) -> namespace=(String) entry.getKey()@!(schemaIter.hasNext()) && iterator.hasNext() && nsMap!=null && !(schemas==null||schemas.isEmpty()) -> pkg=(String) nsMap.get(namespace,)@!(schemaIter.hasNext()) && iterator.hasNext() && nsMap!=null && !(schemas==null||schemas.isEmpty()) -> registerNamespace(sc,namespace,pkg,)@!(schemaIter.hasNext()) && iterator.hasNext() && nsMap!=null && !(schemas==null||schemas.isEmpty()) } } -> sc.setEntityResolver(resolver,)@!(schemaIter.hasNext()) && !(schemas==null||schemas.isEmpty()) -> sc.setErrorListener(new ErrorListener(),)@!(schemaIter.hasNext()) && !(schemas==null||schemas.isEmpty()) -> sc.parseSchema((InputSource) schemaToInputSourceMap.get(key,),)@schemaIter.hasNext() && !(schemas==null||schemas.isEmpty()) -> sc.getOptions().addGrammar((InputSource) schemaToInputSourceMap.get(key,),)@schemaIter.hasNext() && !(schemas==null||schemas.isEmpty()) -> property@!(schemaIter.hasNext()) && !(schemas==null||schemas.isEmpty()) -> LOOP { -> propertyName=(String) property@!(schemaIter.hasNext()) && !(schemas==null||schemas.isEmpty()) -> IF { -> propertyValue=(String) properties.get(property,)@!(schemaIter.hasNext()) && properties.keySet() && propertyName.startsWith("X",) && !(schemas==null||schemas.isEmpty()) -> IF { -> args="-"+propertyNamepropertyValue@!(schemaIter.hasNext()) && properties.keySet() && propertyValue!=null && propertyName.startsWith("X",) && !(schemas==null||schemas.isEmpty()) } ELSE { -> args="-"+propertyName@!(schemaIter.hasNext()) && properties.keySet() && propertyName.startsWith("X",) && !(schemas==null||schemas.isEmpty()) && !(propertyValue!=null) } -> sc.getOptions().parseArguments(args,)@properties.keySet() && schemaIter.hasNext() && propertyName.startsWith("X",) && !(schemas==null||schemas.isEmpty()) } } -> jaxbModel=sc.bind()@schemaIter.hasNext() && !(schemas==null||schemas.isEmpty()) -> IF { -> throw new RuntimeException("Unable to generate code using jaxbri",)@jaxbModel==null && schemaIter.hasNext() && !(schemas==null||schemas.isEmpty()) } -> sortGeneratedObjectFactoryClasses(jaxbModel,)@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> codeModel=jaxbModel.generateCode(null,null,)@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> writer=new FileCodeWriter(outputDir,)@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> codeModel.build(writer,)@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> mappings=jaxbModel.getMappings()@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> iter=mappings.iterator()@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> LOOP { -> mapping=(Mapping) iter.next()@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && iter.hasNext() -> qn=mapping.getElement()@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && iter.hasNext() -> typeName=mapping.getType().getTypeClass().fullName()@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && iter.hasNext() -> mapper.addTypeMappingName(qn,typeName,)@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && iter.hasNext() } -> IF { -> axisServices=cgconfig.getAxisServices()@!(schemaIter.hasNext()) && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> servicesIter=axisServices.iterator()@!(schemaIter.hasNext()) && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> LOOP { -> axisService=(AxisService) servicesIter.next()@!(schemaIter.hasNext()) && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> operations=axisService.getOperations()@!(schemaIter.hasNext()) && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> LOOP { -> op=(AxisOperation) operations.next()@!(schemaIter.hasNext()) && operations.hasNext() && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> IF { -> message=op.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE,)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && !(schemaIter.hasNext()) && operations.hasNext() && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> IF { -> mapping=jaxbModel.get(message.getElementQName(),)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> elementProperties=mapping.getWrapperStyleDrilldown()@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> j=0@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> LOOP { -> elementProperty=(Property) elementProperties.get(j,)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() -> partQName=WSDLUtil.getPartQName(op.getName().getLocalPart(),WSDLConstants.INPUT_PART_QNAME_SUFFIX,elementProperty.elementName().getLocalPart(),)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() -> fullJaveName=elementProperty.type().fullName()@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() -> IF { -> fullJaveName=fullJaveName.concat("[]",)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && elementProperty.type().isArray() && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() } -> mapper.addTypeMappingName(partQName,fullJaveName,)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() -> IF { -> mapper.addTypeMappingStatus(partQName,Boolean.TRUE,)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && elementProperty.type().isPrimitive() && servicesIter.hasNext() } -> IF { -> mapper.addTypeMappingStatus(partQName,Constants.ARRAY_TYPE,)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && elementProperty.type().isArray() && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() } -> ++j@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() } } } -> IF { -> message=op.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE,)@!(schemaIter.hasNext()) && operations.hasNext() && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && servicesIter.hasNext() -> IF { -> mapping=jaxbModel.get(message.getElementQName(),)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && servicesIter.hasNext() -> elementProperties=mapping.getWrapperStyleDrilldown()@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && servicesIter.hasNext() -> j=0@!(schemaIter.hasNext()) && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> LOOP { -> elementProperty=(Property) elementProperties.get(j,)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && servicesIter.hasNext() -> partQName=WSDLUtil.getPartQName(op.getName().getLocalPart(),WSDLConstants.OUTPUT_PART_QNAME_SUFFIX,elementProperty.elementName().getLocalPart(),)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && servicesIter.hasNext() -> fullJaveName=elementProperty.type().fullName()@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && servicesIter.hasNext() -> IF { -> fullJaveName=fullJaveName.concat("[]",)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && elementProperty.type().isArray() && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && servicesIter.hasNext() } -> mapper.addTypeMappingName(partQName,fullJaveName,)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && servicesIter.hasNext() -> IF { -> mapper.addTypeMappingStatus(partQName,Boolean.TRUE,)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && elementProperty.type().isPrimitive() && servicesIter.hasNext() } -> IF { -> mapper.addTypeMappingStatus(partQName,Constants.ARRAY_TYPE,)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && elementProperty.type().isArray() && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && servicesIter.hasNext() } -> ++j@!(schemaIter.hasNext()) && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() } } } } } } } -> return mapper@!(schemaIter.hasNext()) && !(schemas==null||schemas.isEmpty()) } CATCH { }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.ui/src/org/eclipse/jst/jsf/common/ui/internal/utils/FavoriteConfigurations.java!FavoriteConfigurations!saveFavorites][SEQ] =  -> TRY { -> memento=XMLMemento.createWriteRoot(ELEMENT_ROOT,)@ -> it=_favorites.keySet().iterator()@ -> LOOP { -> favName=(String) it.next()@it.hasNext() -> props=new HashMap((Properties) _favorites.get(favName,),)@it.hasNext() -> config=memento.createChild(ELEMENT_CONFIG,)@it.hasNext() -> config.putString(ELEMENT_NAME,favName,)@it.hasNext() -> it1=props.keySet().iterator()@it.hasNext() -> LOOP { -> entry=config.createChild(ELEMENT_PROPERTY,)@it.hasNext() && it1.hasNext() -> name=(String) it1.next()@it.hasNext() && it1.hasNext() -> entry.putString(ELEMENT_NAME,name,)@it.hasNext() && it1.hasNext() -> entry.putString(ELEMENT_VALUE,(String) props.get(name,),)@it.hasNext() && it1.hasNext() } } -> fw=new FileWriter(_favoriteFile.toFile(),)@ -> memento.save(fw,)@ } CATCH { -> _log.info("log.FavoriteConfigurations.save.error",_favoriteName,_favoriteFile.toOSString(),ee,)@ } FINALLY { -> IF { -> TRY { -> fw.close()@fw!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/context/symbol/internal/impl/IMapTypeDescriptorImpl.java!IMapTypeDescriptorImpl!processSegments][SEQ] =  -> segmentMap=new HashMap()@ -> LOOP { -> key=entry.getKey()@ -> segments=fastTokenSplit(key,)@ -> property=(IPropertySymbol) segmentMap.get(segments[0],)@ -> IF { -> propValue=entry.getValue()@property==null -> property=SymbolFactory.eINSTANCE.createIPropertySymbol()@property==null -> property.setName(segments[0],)@property==null -> IF { -> IF { -> typeDesc=SymbolFactory.eINSTANCE.createIJavaTypeDescriptor2()@propValue && propValue!=null && property==null -> (IJavaTypeDescriptor2) typeDesc.setType((IType) propValue,)@propValue && propValue!=null && property==null } ELSE { -> IF { -> typeDesc=(IInstanceSymbol) propValue.getTypeDescriptor()@propValue && !(propValue) && propValue!=null && property==null } ELSE { -> IF { -> typeDesc=(IPropertySymbol) propValue.getTypeDescriptor()@propValue && propValue!=null && !(propValue) && property==null } ELSE { -> className=propValue.getClass().getName()@propValue!=null && !(propValue) && property==null -> typeSignature=Signature.createTypeSignature(className,true,)@propValue!=null && !(propValue) && property==null -> typeDesc=SymbolFactory.eINSTANCE.createIMapTypeDescriptor()@propValue!=null && !(propValue) && property==null -> (IMapTypeDescriptor) typeDesc.setMapSource(new HashMap(),)@!(propValue) -> (IMapTypeDescriptor) typeDesc.setTypeSignatureDelegate(typeSignature,)@propValue!=null && !(propValue) && property==null -> (IMapTypeDescriptor) typeDesc.setImmutable(isImmutable(),)@propValue!=null && !(propValue) && property==null -> property.setIntermediate(true,)@propValue!=null && !(propValue) && property==null } } } -> property.setTypeDescriptor(typeDesc,)@propValue!=null && property==null -> property.setReadable(true,)@propValue!=null && property==null -> property.setWritable(!isImmutable(),)@propValue!=null && property==null } -> segmentMap.put(segments[0],property,)@property==null } -> typeDesc=property.getTypeDescriptor()@ -> IF { -> IF { -> property.setIntermediate(false,)@typeDesc && segments.length==1 } ELSE { -> (IMapTypeDescriptor) typeDesc.getMapSource().put(key.substring(key.indexOf('.',)+1,),entry.getValue(),)@!(segments.length==1) && typeDesc } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryconfig/JSFLibraryRegistryUtil.java!JSFLibraryRegistryUtil!loadJSFLibraryRegistry][SEQ] =  -> TRY { -> jsfLibRegURI=JSFLibraryRegistryUpgradeUtil.getRegistryURI(JSFLibraryRegistryUpgradeUtil.JSF_LIBRARY_REGISTRY_LATESTVERSION_URL,)@ -> JSFLibraryRegistryUpgradeUtil.getInstance().upgradeRegistryIfNecessary(JSFLibraryRegistryUpgradeUtil.LATESTVERSION,)@ -> resourceFactory=new JSFLibraryRegistryResourceFactoryImpl()@ -> jsfLibraryRegistryResource=(JSFLibraryRegistryResourceImpl) resourceFactory.createResource(jsfLibRegURI,)@ -> TRY { -> options=new HashMap()@ -> options.put(XMLResource.OPTION_DISABLE_NOTIFY,Boolean.TRUE,)@ -> jsfLibraryRegistryResource.load(options,)@ -> jsfLibraryRegistry=(JSFLibraryRegistry) jsfLibraryRegistryResource.getContents().get(0,)@ } CATCH { -> jsfLibraryRegistry=JSFLibraryRegistryFactory.eINSTANCE.createJSFLibraryRegistry()@ -> jsfLibraryRegistryResource=(JSFLibraryRegistryResourceImpl) resourceFactory.createResource(jsfLibRegURI,)@ -> jsfLibraryRegistryResource.getContents().add(jsfLibraryRegistry,)@ } -> IF { -> defLib=jsfLibraryRegistry.getDefaultImplementation()@jsfLibraryRegistry!=null -> IF { -> jsfLibraryRegistry.setDefaultImplementation((JSFLibrary) jsfLibraryRegistry.getImplJSFLibraries().get(0,),)@defLib==null&&jsfLibraryRegistry.getImplJSFLibraries().size()>0 && jsfLibraryRegistry!=null } -> jsfLibraryRegistry.eAdapters().add(MaintainDefaultImplementationAdapter.getInstance(),)@jsfLibraryRegistry!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/metadataprocessors/internal/AbstractMetaDataEnabledTypeRegistry.java!AbstractMetaDataEnabledTypeRegistry!getType][SEQ] =  -> IF { -> return (AbstractMetaDataEnabledType) typeMap.get(id,)@typeMap.containsKey(id,) }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/validation/internal/appconfig/EObjectValidationVisitor.java!EObjectValidationVisitor!getVisitorForFeature][SEQ] =  -> IF { -> _childFeatures=new HashMap()@_childFeatures==null -> children=getChildNodeValidators()@ -> LOOP { -> _childFeatures.put(child.getStructuralFeature(),child,)@_childFeatures==null && i<children.length } } -> return (EObjectValidationVisitor) _childFeatures.get(feature,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/FacesConfigEditor.java!MultiPageCommandStackListener!commandStackChanged][SEQ] =  -> IF { -> setEditorDirty((IEditorPart) mapEditorCommandStack.get(event.getSource(),),true,)@(CommandStack) event.getSource().isDirty() } ELSE { -> IF { -> setEditorDirty((IEditorPart) mapEditorCommandStack.get(event.getSource(),),true,)@!((CommandStack) event.getSource().isDirty()) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/layout/PageflowLayoutManager.java!PageflowLayoutManager!createGraphs][SEQ] =  -> IF { -> nodesMap=new HashMap()@ -> nodes=new NodeList()@ -> edges=new EdgeList()@ -> pfNodes=pageflow.getNodes()@pageflow!=null -> IF { -> iter=pfNodes.iterator()@pageflow!=null && pfNodes!=null -> LOOP { -> pfNode=(PageflowNode) iter.next()@pageflow!=null && iter.hasNext() && pfNodes!=null -> node=new Node(pfNode,)@pageflow!=null && iter.hasNext() && pfNodes!=null -> rectNode=getPageflowNodeBounds(pfNode,)@pageflow!=null && iter.hasNext() && pfNodes!=null -> IF { -> node.setPadding(new Insets(node.height,node.width,node.height,node.width,),)@rectNode!=null && pageflow!=null && iter.hasNext() && pfNodes!=null } ELSE { -> node.setPadding(new Insets(DEFAULT_PADDING,),)@ } -> nodesMap.put(pfNode,node,)@pageflow!=null && iter.hasNext() && pfNodes!=null -> nodes.add(node,)@pageflow!=null && iter.hasNext() && pfNodes!=null } } -> pfLinks=pageflow.getLinks()@pageflow!=null -> iter=pfLinks.iterator()@pageflow!=null -> LOOP { -> link=(PageflowLink) iter.next()@pageflow!=null && iter.hasNext() -> source=link.getSource()@pageflow!=null && iter.hasNext() -> target=link.getTarget()@pageflow!=null && iter.hasNext() -> sourceNode=(Node) nodesMap.get(source,)@pageflow!=null && iter.hasNext() -> targetNode=(Node) nodesMap.get(target,)@pageflow!=null && iter.hasNext() -> IF { -> edge=new Edge(sourceNode,targetNode,)@pageflow!=null && sourceNode!=null&&targetNode!=null && iter.hasNext() -> edges.add(edge,)@pageflow!=null && sourceNode!=null&&targetNode!=null && iter.hasNext() } } -> graph=new DirectedGraph()@ -> lstGraph=new ArrayList()@ -> lstGraph.add(graph,)@ }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/model/impl/PageflowImpl.java!PageflowImpl!getDefaultNodeName][SEQ] =  -> mapNodePrefix_=getNodePrefixMap()@ -> strNodePrefix=(String) mapNodePrefix_.get(nodeType,)@ -> LOOP { -> iter=getNodes().iterator()@ -> LOOP { -> node=(PageflowNode) iter.next()@iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/classpath/JSFLibraryContainerWizardPage.java!JSFLibraryContainerWizardPage!getSelectedJSFLibariesForProject][SEQ] =  -> IF { -> allLibs=getAllJSFLibraries()@_currentLibs==null -> curLibs=getJSFLibraryEntries(currentEntries,)@_currentLibs==null -> _currentLibs=new HashMap(curLibs.size(),)@_currentLibs==null -> it=curLibs.iterator()@_currentLibs==null -> LOOP { -> lib=(JSFLibrary) it.next()@it.hasNext() && _currentLibs==null -> index=getIndex(allLibs,lib,)@it.hasNext() && _currentLibs==null -> IF { -> _currentLibs.put(lib.getID(),allLibs.get(index,),)@it.hasNext() && _currentLibs==null && index>=0 } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/validation/OptionsConfigurationBlock.java!OptionsConfigurationBlock!setComboEnabled][SEQ] =  -> combo=getComboBox(key,)@ -> label=(Label) fLabels.get(combo,)@ -> combo.setEnabled(enabled,)@ -> label.setEnabled(enabled,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/attributegroup/CommonDialogFieldGroup.java!CommonDialogFieldGroup!getMaxColumnNum][SEQ] =  -> IF { -> LOOP { -> field=(DialogField) map.get(attributeData[i],)@attributeData!=null && i<attributeData.length -> fieldCols=field.getNumberOfControls()@attributeData!=null && i<attributeData.length } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/attributegroup/CommonDialogFieldGroup.java!CommonDialogFieldGroup!layoutDialogFields][SEQ] =  -> data=new GridData(GridData.FILL_BOTH,)@ -> parent.setLayoutData(data,)@ -> gl.numColumns=getMaxColumnNum()@ -> parent.setLayout(gl,)@ -> IF { -> LOOP { -> field=(DialogField) map.get(attributeData[i],)@attributeData!=null && i<attributeData.length -> controls=field.doFillIntoGrid(toolkit,parent,gl.numColumns,)@attributeData!=null && i<attributeData.length -> IF { -> gridData=(GridData) controls[1].getLayoutData()@controls.length>1 && attributeData!=null && i<attributeData.length } -> field.setLabelText(DialogFieldFactory.getDialogFieldLabel(attributeData[i],),)@attributeData!=null && i<attributeData.length } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/attributegroup/CommonDialogFieldGroup.java!CommonDialogFieldGroup!prepareData][SEQ] =  -> IF { -> LOOP { -> field=(DialogField) map.get(attributeData[i],)@attributeData!=null && i<attributeData.length -> DialogFieldFactory.prepareDialogFieldValue(field,attributeData[i],)@attributeData!=null && i<attributeData.length } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/attributegroup/CommonDialogFieldGroup.java!CommonDialogFieldGroup!refreshData][SEQ] =  -> IF { -> LOOP { -> field=(DialogField) map.get(attributeData[i],)@attributeData!=null && i<attributeData.length -> DialogFieldFactory.setDialogFieldValue(field,attributeData[i].getValue(),)@attributeData!=null && i<attributeData.length } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/commands/html/TableResizeRowCommand.java!TableResizeRowCommand!doExecute][SEQ] =  -> list=new ArrayList()@ -> TableUtil.getTrElements(_tablethis,list,)@ -> tr=(Element) list.get(domIndex,)@ -> cellFigure=getFigureInfo(tr,)@ -> oldRowHeight=heightcellFigure.getBounds()@ -> cellPadding=cellFigure.getInsets().getHeight()@ -> map=new HashMap()@ -> IF { -> map.put(ICSSPropertyID.ATTR_HEIGHT,newHeight+"px",)@newHeight>0 -> DOMStyleUtil.insertStyle(tr,map,)@newHeight>0 }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/css2/list/CounterHelper.java!CounterHelper!processCounterReset][SEQ] =  -> Assert.isTrue(style!=null&&counters!=null,)@ -> counterResets=style.getStyleProperty(ICSSPropertyID.ATTR_COUNTER_RESET,)@ -> IF { -> IF { -> crList=(List) counterResets@counterResets && counterResets!=null&&counterResets!=ICSSPropertyMeta.NOT_SPECIFIED -> LOOP { -> rObject=(ResetObject) crList.get(i,)@counterResets && counterResets!=null&&counterResets!=ICSSPropertyMeta.NOT_SPECIFIED && i<n -> name=rObject.getCounterName()@counterResets && counterResets!=null&&counterResets!=ICSSPropertyMeta.NOT_SPECIFIED && i<n -> IF { -> counter=counters.get(name,)@counterResets && counterResets!=null&&counterResets!=ICSSPropertyMeta.NOT_SPECIFIED && counters.size()>0&&counters.containsKey(name,) && i<n } -> IF { -> IF { -> (ICounterValueGenerator) counter.resetCount(rObject.getInitial().intValue(),)@rObject.getInitial()!=null && counterResets && counterResets!=null&&counterResets!=ICSSPropertyMeta.NOT_SPECIFIED && counter!=null && i<n } ELSE { -> counter=(ICounterValueGenerator) counter.resetCount()@!(rObject.getInitial()!=null) && counter!=null } -> counters.put((ICounterValueGenerator) counter.getIdentifier(),counter,)@counterResets && counterResets!=null&&counterResets!=ICSSPropertyMeta.NOT_SPECIFIED && counter!=null && i<n } ELSE { -> listStyle=style.getStyleProperty(ICSSPropertyID.ATTR_LIST_STYLE_TYPE,)@counterResets && counterResets!=null&&counterResets!=ICSSPropertyMeta.NOT_SPECIFIED && i<n && !(counter!=null) -> IF { -> counter=new CounterValueGenerator(name,(String) listStyle,null,style,)@counterResets && counterResets!=null&&counterResets!=ICSSPropertyMeta.NOT_SPECIFIED && i<n && listStyle && !(counter!=null) -> IF { -> (ICounterValueGenerator) counter.resetCount(rObject.getInitial().intValue(),)@rObject.getInitial()!=null && counterResets && counterResets!=null&&counterResets!=ICSSPropertyMeta.NOT_SPECIFIED && i<n && listStyle && !(counter!=null) } ELSE { -> counter=(ICounterValueGenerator) counter.resetCount()@counterResets && counterResets!=null&&counterResets!=ICSSPropertyMeta.NOT_SPECIFIED && !(rObject.getInitial()!=null) && i<n && listStyle && !(counter!=null) } } -> counters.put((ICounterValueGenerator) counter.getIdentifier(),counter,)@counterResets && counterResets!=null&&counterResets!=ICSSPropertyMeta.NOT_SPECIFIED && i<n && !(counter!=null) } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/actions/DesignerStyleActionGroup.java!DesignerStyleActionGroup!<init>][SEQ] =  -> verAction=new ChangeDesignerStyleAction("org.eclipse.jst.pagedesigner.vertical",VERTICAL,PDPlugin.getDefault().getImageDescriptor((String) IMAGE_NAMES.get(VERTICAL,),),HTMLEditor.MODE_SASH_VERTICAL,)@ -> verAction.setActionDefinitionId("org.eclipse.jst.pagedesigner.vertical",)@ -> verAction.setToolTipText(VERTICAL_TOOLTIP,)@ -> horAction=new ChangeDesignerStyleAction("org.eclipse.jst.pagedesigner.horizotal",HORIZONTAL,PDPlugin.getDefault().getImageDescriptor((String) IMAGE_NAMES.get(HORIZONTAL,),),HTMLEditor.MODE_SASH_HORIZONTAL,)@ -> horAction.setActionDefinitionId("org.eclipse.jst.pagedesigner.horizotal",)@ -> horAction.setToolTipText(HORIZONTAL_TOOLTIP,)@ -> designAction=new ChangeDesignerStyleAction("org.eclipse.jst.pagedesigner.design",DESIGN,PDPlugin.getDefault().getImageDescriptor((String) IMAGE_NAMES.get(DESIGN,),),HTMLEditor.MODE_DESIGNER,)@ -> designAction.setActionDefinitionId("org.eclipse.jst.pagedesigner.design",)@ -> designAction.setToolTipText(DESIGN_TOOLTIP,)@ -> sourceAction=new ChangeDesignerStyleAction("org.eclipse.jst.pagedesigner.source",SOURCE,PDPlugin.getDefault().getImageDescriptor((String) IMAGE_NAMES.get(SOURCE,),),HTMLEditor.MODE_SOURCE,)@ -> sourceAction.setActionDefinitionId("org.eclipse.jst.pagedesigner.source",)@ -> sourceAction.setToolTipText(SOURCE_TOOLTIP,)@ -> _actionHandlers=new ArrayList<ActionHandler>()@ -> LOOP { -> _actionHandlers.add(new ActionHandler(_actions[i],),)@i<_actions.length }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/parts/ElementEditPart.java!ElementEditPart!refresh][SEQ] =  -> modelToEditPart=new HashMap()@ -> children1=getChildren()@ -> LOOP { -> editPart=(EditPart) children1.get(i,)@i<n -> modelToEditPart.put(editPart.getModel(),editPart,)@i<n -> removeChildVisual(editPart,)@i<n } -> modelObjects=getModelChildren()@ -> IF { -> LOOP { -> model=modelObjects.get(i,)@i<n -> editPart=(EditPart) modelToEditPart.remove(model,)@i<n -> IF { -> addChildVisual(editPart,i,)@editPart!=null && i<n } ELSE { -> editPart=createChild(model,)@!(editPart!=null) && i<n -> addChild(editPart,i,)@!(editPart!=null) && i<n } } -> iter=modelToEditPart.values().iterator()@ -> LOOP { -> part=(EditPart) iter.next()@iter.hasNext() -> removeChild(part,)@iter.hasNext() } } ELSE { -> iter=modelToEditPart.values().iterator()@ -> LOOP { -> part=(EditPart) iter.next()@iter.hasNext() -> removeChild(part,)@iter.hasNext() } -> LOOP { -> model=modelObjects.get(i,)@i<n -> editPart=createChild(model,)@i<n -> addChild(editPart,i,)@i<n } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/utils/ProjectResolver.java!ProjectResolver!seekTld][SEQ] =  -> IF { -> return @path==null||!path.isDirectory() } -> IF { -> _uriMap=new HashMap()@!(path==null||!path.isDirectory()) && _uriMap==null } -> TRY { -> res=path.listFiles()@!(path==null||!path.isDirectory()) -> IF { -> return @!(path==null||!path.isDirectory()) && null==res } -> i=0@!(path==null||!path.isDirectory()) && !(null==res) -> LOOP { -> IF { -> seekTld(res[i],)@!(path==null||!path.isDirectory()) && res[i] && !(null==res) && i<res.length } -> IF { -> uri=getURIfromTLD(res[i],)@!(path==null||!path.isDirectory()) && !(null==res) && i<res.length && res[i].getName().endsWith(IFileFolderConstants.DOT+IFileFolderConstants.EXT_TAGLIB,) -> locate=res[i].getCanonicalPath()@!(path==null||!path.isDirectory()) && !(null==res) && i<res.length && res[i].getName().endsWith(IFileFolderConstants.DOT+IFileFolderConstants.EXT_TAGLIB,) -> IF { -> _uriMap.put(uri,locate,)@!(path==null||!path.isDirectory()) && uri!=null&&_uriMap.get(uri,)==null && !(null==res) && i<res.length && res[i].getName().endsWith(IFileFolderConstants.DOT+IFileFolderConstants.EXT_TAGLIB,) } } -> ++i@!(path==null||!path.isDirectory()) && !(null==res) && i<res.length } } CATCH { }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/utils/ProjectResolver.java!ProjectResolver!seekTld][SEQ] =  -> IF { -> return @path==null } -> IF { -> _uriMap=new HashMap()@!(path==null) && _uriMap==null } -> TRY { -> res=path.members()@!(path==null) -> IF { -> return @null==res && !(path==null) } -> i=0@!(path==null) && !(null==res) -> LOOP { -> IF { -> seekTld((IFolder) res[i],)@!(path==null) && res[i] && !(null==res) && i<res.length } -> ext=res[i].getFileExtension()@!(path==null) && !(null==res) && i<res.length -> IF { -> tldFile=(IFile) res[i]@!(path==null) && IFileFolderConstants.EXT_TAGLIB.equalsIgnoreCase(ext,) && !(null==res) && i<res.length -> uri=getURIfromTLD(tldFile,)@!(path==null) && IFileFolderConstants.EXT_TAGLIB.equalsIgnoreCase(ext,) && !(null==res) && i<res.length -> locate=tldFile.getLocation().toOSString()@!(path==null) && IFileFolderConstants.EXT_TAGLIB.equalsIgnoreCase(ext,) && !(null==res) && i<res.length -> IF { -> _uriMap.put(uri,locate,)@uri!=null&&_uriMap.get(uri,)==null && !(path==null) && IFileFolderConstants.EXT_TAGLIB.equalsIgnoreCase(ext,) && !(null==res) && i<res.length } } -> ++i@!(path==null) && !(null==res) && i<res.length } } CATCH { }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/viewer/FlowBoxLine.java!FlowBoxLine!getLayoutPart][SEQ] =  -> return (LayoutPart) _parts.get(part,)@
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/io/test/AbstractIOTest.java!AbstractIOTest!testMap][SEQ] =  -> mapIn=new HashMap()@ -> mapIn.put("testNumber",new Integer(34,),)@ -> mapIn.put("testString","wicked",)@ -> mapIn.put("testBean",new SimpleJavaBean(),)@ -> serializer.serialize(out,mapIn,)@ -> mapOut=(Map) deserializer.deserialize(in,)@ -> Assert.assertNotNull(mapOut,)@ -> Assert.assertEquals(mapIn.size(),mapOut.size(),)@ -> entrySet=mapOut.entrySet()@ -> it=entrySet.iterator()@ -> LOOP { -> entry=(Map.Entry) it.next()@it.hasNext() -> propOut=(String) entry.getKey()@it.hasNext() -> valueOut=entry.getValue()@it.hasNext() -> Assert.assertTrue(mapIn.containsKey(propOut,),)@it.hasNext() -> valueIn=mapIn.get(propOut,)@it.hasNext() -> Assert.assertEquals(valueOut,valueIn,)@it.hasNext() }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/io/test/AbstractIOTest.java!AbstractIOTest!testSimpleReference][SEQ] =  -> mapIn=new HashMap()@ -> bean=new SimpleJavaBean()@ -> mapIn.put("thebean",bean,)@ -> mapIn.put("thesamebeanagain",bean,)@ -> serializer.serialize(out,mapIn,)@ -> mapOut=(Map) deserializer.deserialize(in,)@ -> Assert.assertNotNull(mapOut,)@ -> Assert.assertEquals(mapIn.size(),mapOut.size(),)@ -> entrySet=mapOut.entrySet()@ -> it=entrySet.iterator()@ -> LOOP { -> entry=(Map.Entry) it.next()@it.hasNext() -> propOut=(String) entry.getKey()@it.hasNext() -> valueOut=(SimpleJavaBean) entry.getValue()@it.hasNext() -> Assert.assertTrue(mapIn.containsKey(propOut,),)@it.hasNext() -> valueIn=(SimpleJavaBean) mapIn.get(propOut,)@it.hasNext() -> Assert.assertEquals(valueOut.getNameOfBean(),valueIn.getNameOfBean(),)@it.hasNext() }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/rtmp/RTMPSessionHandler.java!RTMPSessionHandler!onSharedObject][SEQ] =  -> ctx=conn.getAppContext()@ -> app=(BaseApplication) ctx.getBean(AppContext.APP_SERVICE_NAME,)@ -> name=request.getName()@ -> so=app.getSharedObject(name,)@ -> reply=new SharedObject()@ -> reply.setName(name,)@ -> reply.setTimestamp(0,)@ -> sync=new SharedObject()@ -> sync.setName(name,)@ -> sync.setTimestamp(0,)@ -> it=request.getEvents().iterator()@ -> LOOP { -> event=(SharedObjectEvent) it.next()@it.hasNext() -> event.getType()@it.hasNext() -> reply.addEvent(new SharedObjectEvent(SO_CLIENT_INITIAL_DATA,null,null,),)@it.hasNext() -> IF { -> reply.addEvent(new SharedObjectEvent(SO_CLIENT_UPDATE_DATA,null,so.getData(),),)@it.hasNext() && !so.getData().isEmpty() } -> so.registerClient(conn,source.getChannelId(),)@it.hasNext() -> so.updateAttribute(event.getKey(),event.getValue(),)@it.hasNext() -> reply.addEvent(new SharedObjectEvent(SO_CLIENT_UPDATE_ATTRIBUTE,event.getKey(),null,),)@it.hasNext() -> sync.addEvent(new SharedObjectEvent(SO_CLIENT_UPDATE_DATA,event.getKey(),event.getValue(),),)@it.hasNext() -> so.deleteAttribute(event.getKey(),)@it.hasNext() -> reply.addEvent(new SharedObjectEvent(SO_CLIENT_DELETE_DATA,event.getKey(),null,),)@it.hasNext() -> sync.addEvent(new SharedObjectEvent(SO_CLIENT_DELETE_DATA,event.getKey(),null,),)@it.hasNext() -> log.error("Unknown shared object update event "+event.getType(),)@it.hasNext() } -> IF { -> so.updateVersion()@ } -> reply.setSoId(so.getVersion(),)@ -> channel.write(reply,)@ -> IF { -> sync.setSoId(so.getVersion(),)@updates&&sync.getEvents().size()>0 -> sync.acquire()@updates&&sync.getEvents().size()>0 -> all_clients=so.getClients()@updates&&sync.getEvents().size()>0 -> clients=all_clients.keySet().iterator()@updates&&sync.getEvents().size()>0 -> LOOP { -> connection=(Connection) clients.next()@clients.hasNext() && updates&&sync.getEvents().size()>0 -> IF { -> log.info("Skipped "+connection,)@connection==conn && clients.hasNext() && updates&&sync.getEvents().size()>0 } -> channels=(HashSet) all_clients.get(connection,).iterator()@clients.hasNext() && updates&&sync.getEvents().size()>0 -> LOOP { -> c=connection.getChannel((Integer) channels.next().byteValue(),)@channels.hasNext() && clients.hasNext() && updates&&sync.getEvents().size()>0 -> c.write(sync,)@channels.hasNext() && clients.hasNext() && updates&&sync.getEvents().size()>0 } } -> sync.release()@updates&&sync.getEvents().size()>0 }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/service/test/TestEchoService.java!TestEchoService!testEchoObject][SEQ] =  -> date=new Date()@ -> startMap=new HashMap()@ -> startMap.put("string",str,)@ -> startMap.put("date",date,)@ -> resultMap=echoService.echoObject(startMap,)@ -> assertEquals(startMap.get("string",),resultMap.get("string",),)@ -> assertEquals(startMap.get("date",),resultMap.get("date",),)@
results[https://github.com/rfkrocktk/red5-server!test/org/red5/server/io/test/AbstractIOTest.java!AbstractIOTest!testMap][SEQ] =  -> mapIn=new HashMap()@ -> mapIn.put("testNumber",Integer.valueOf(34,),)@ -> mapIn.put("testString","wicked",)@ -> mapIn.put("testBean",new SimpleJavaBean(),)@ -> serializer.serialize(out,mapIn,)@ -> mapOut=(Map) deserializer.deserialize(in,)@ -> Assert.assertNotNull(mapOut,)@ -> Assert.assertEquals(mapIn.size(),mapOut.size(),)@ -> entrySet=mapOut.entrySet()@ -> it=entrySet.iterator()@ -> LOOP { -> entry=(Map.Entry) it.next()@it.hasNext() -> propOut=(String) entry.getKey()@it.hasNext() -> valueOut=entry.getValue()@it.hasNext() -> Assert.assertTrue(mapIn.containsKey(propOut,),)@it.hasNext() -> valueIn=mapIn.get(propOut,)@it.hasNext() -> Assert.assertEquals(valueOut,valueIn,)@it.hasNext() }
results[https://github.com/rfkrocktk/red5-server!test/org/red5/server/io/test/AbstractIOTest.java!AbstractIOTest!testSimpleReference][SEQ] =  -> mapIn=new HashMap()@ -> bean=new SimpleJavaBean()@ -> mapIn.put("thebean",bean,)@ -> mapIn.put("thesamebeanagain",bean,)@ -> serializer.serialize(out,mapIn,)@ -> mapOut=(Map) deserializer.deserialize(in,)@ -> Assert.assertNotNull(mapOut,)@ -> Assert.assertEquals(mapIn.size(),mapOut.size(),)@ -> entrySet=mapOut.entrySet()@ -> it=entrySet.iterator()@ -> LOOP { -> entry=(Map.Entry) it.next()@it.hasNext() -> propOut=(String) entry.getKey()@it.hasNext() -> valueOut=(SimpleJavaBean) entry.getValue()@it.hasNext() -> Assert.assertTrue(mapIn.containsKey(propOut,),)@it.hasNext() -> valueIn=(SimpleJavaBean) mapIn.get(propOut,)@it.hasNext() -> Assert.assertEquals(valueOut.getNameOfBean(),valueIn.getNameOfBean(),)@it.hasNext() }
results[https://github.com/rfkrocktk/red5-server!webapps/adminPanel/WEB-INF/src/org/red5/adminPanel/client/AuthClientRegistry.java!AuthClientRegistry!newClient][SEQ] =  -> IF { -> log.warn("Client didn't pass a username.",)@!(params==null||params.length==0) -> throw new ClientRejectedException()@params==null||params.length==0 } -> IF { -> userWin=(HashMap) params[0]@!(params==null||params.length==0) && params[0] -> username=(String) userWin.get(0,)@!(params==null||params.length==0) && params[0] -> passwd=(String) userWin.get(1,)@!(params==null||params.length==0) && params[0] } ELSE { -> IF { -> userMac=(ArrayList) params[0]@!(params[0]) && !(params==null||params.length==0) && params[0] -> username=(String) userMac.get(0,)@!(params[0]) && !(params==null||params.length==0) && params[0] -> passwd=(String) userMac.get(1,)@!(params[0]) && !(params==null||params.length==0) && params[0] } ELSE { -> throw new ClientRejectedException()@!(params[0]) && !(params==null||params.length==0) } } -> t=new UsernamePasswordAuthenticationToken(username,passwd,)@!(params==null||params.length==0) && params[0] -> masterScope=Red5.getConnectionLocal().getScope()@!(params==null||params.length==0) && params[0] -> mgr=(ProviderManager) masterScope.getContext().getBean("authenticationManager",)@!(params==null||params.length==0) && params[0] -> TRY { -> t=(UsernamePasswordAuthenticationToken) mgr.authenticate(t,)@!(params==null||params.length==0) && params[0] } CATCH { } -> IF { -> client=new AuthClient(nextId(),this,)@!(params==null||params.length==0) && params[0] && t.isAuthenticated() -> addClient(client,)@!(params==null||params.length==0) && params[0] -> client.setAttribute("authInformation",t,)@!(params==null||params.length==0) && params[0] && t.isAuthenticated() -> log.debug("Authenticated client - username: {}, id: {}",usernameclient.getId(),)@!(params==null||params.length==0) && params[0] && t.isAuthenticated() }