results[https://github.com/Ourobor/petulant-batman!javaproject/src/Study/FileStudy.java!FileStudy!saveState][SEQ] =  -> TRY { -> saveFile = new File(SAVE_FILE_NAME)@ -> saveFile.exists()@ -> IF { -> saveFile.createNewFile()@!saveFile.exists() } -> out = new FileOutputStream(saveFile)@!(!saveFile.exists()) }
results[https://github.com/Ourobor/petulant-batman!javaproject/src/deprecated/FileStudy.java!FileStudy!saveState][SEQ] =  -> TRY { -> save = new File(myPath)@ -> save.exists()@ -> IF { -> save.createNewFile()@!save.exists() } -> out = new FileOutputStream(save)@!(!save.exists()) }
results[https://github.com/Ourobor/petulant-batman!javaproject/src/deprecated/FileStudy.java!FileStudy!saveState][SEQ] =  -> TRY { -> save = new File(myPath)@ -> save.exists()@ -> IF { -> save.createNewFile()@!save.exists() } -> out = new FileOutputStream(save)@!(!save.exists()) }
results[https://github.com/Ourobor/petulant-batman!src/Study/FileStudy.java!FileStudy!saveState][SEQ] =  -> TRY { -> saveFile = new File(SAVE_FILE_NAME)@ -> saveFile.exists()@ -> IF { -> saveFile.createNewFile()@!saveFile.exists() } -> out = new FileOutputStream(saveFile)@!(!saveFile.exists()) }
results[https://github.com/Ourobor/petulant-batman!src/deprecated/FileStudy.java!FileStudy!saveState][SEQ] =  -> TRY { -> save = new File(myPath)@ -> save.exists()@ -> IF { -> save.createNewFile()@!save.exists() } -> out = new FileOutputStream(save)@!(!save.exists()) }
results[https://github.com/Ourobor/petulant-batman!src/deprecated/FileStudy.java!FileStudy!saveState][SEQ] =  -> TRY { -> save = new File(myPath)@ -> save.exists()@ -> IF { -> save.createNewFile()@!save.exists() } -> out = new FileOutputStream(save)@!(!save.exists()) }
results[https://github.com/ceylon/ceylon-compiler!langtools/test/tools/apt/Discovery/PhantomTouch.java!PhantomTouchProc!process][SEQ] =  -> IF { -> TRY { -> f = new java.io.File()@ -> result = f.createNewFile()@ } ELSE { -> new RuntimeException()@ } }
results[https://github.com/ceylon/ceylon-compiler!langtools/test/tools/apt/Discovery/Touch.java!TouchProc!process][SEQ] =  -> IF { -> TRY { -> f = new java.io.File()@ -> result = f.createNewFile()@ -> fis = new FileInputStream()@ } -> IF { -> new RuntimeException()@ } }
results[https://github.com/craig-a-roach/geowx!ebx/src/test/java/com/metservice/argon/cache/disk/TestUnit1Mru.java!TestUnit1Mru!t20_space][SEQ] =  -> SPACE = new SpaceId()@ -> TRY { -> probe = new Probe()@ -> supplier = new Supplier()@ -> TRY { -> new File.createNewFile() -> new File()@ } -> rq = new Request()@ -> rq = new Request()@ -> rq = new Request()@ -> fA.exists()@ -> rq = new Request()@ -> oFile.exists()@ -> rq = new Request()@ -> rq = new Request()@ -> rq = new Request()@ -> rq = new Request()@ } -> TRY { -> probe = new Probe()@ -> supplier = new Supplier()@ -> TRY { -> oFile.length()@ } -> TRY { -> oFile.length()@ } -> TRY { -> oFile.length()@ } }
results[https://github.com/dana-i2cat/opennaas-routing-nfv!bundles/net.i2cat.mantychore.actionsets.junos/src/main/java/net/i2cat/mantychore/actionsets/junos/actions/TempFileManager.java!TempFileManager!createFile][SEQ] =  -> TRY { -> temp = new File(name)@ -> noExists = temp.createNewFile()@ -> IF { -> temp.delete()@!noExists -> temp.createNewFile()@!noExists } -> out = new BufferedWriter(temp,contain)@!(!noExists) -> pathFile = temp.getAbsolutePath()@!(!noExists) } CATCH { -> new FileNotFoundException()@ -> new FileNotFoundException()@ }
results[https://github.com/dana-i2cat/opennaas-routing-nfv!extensions/bundles/router.actionsets.junos/src/main/java/org/opennaas/extensions/router/junos/actionssets/actions/TempFileManager.java!TempFileManager!createFile][SEQ] =  -> TRY { -> temp = new File(name)@ -> noExists = temp.createNewFile()@ -> IF { -> temp.delete()@!noExists -> temp.createNewFile()@!noExists } -> out = new BufferedWriter(temp,contain)@!(!noExists) -> pathFile = temp.getAbsolutePath()@!(!noExists) } CATCH { -> new FileNotFoundException()@ -> new FileNotFoundException()@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/builders/WsdlWithPublicServiceGenerator.java!WsdlWithPublicServiceGenerator!writeNewwsdl][SEQ] =  -> CATCH { -> new CodeGenFailedException()@ -> new CodeGenFailedException()@ -> sourcewsdl = new DOMSource(document)@ } -> TRY { -> file = new File(wsdlPath)@ -> TRY { -> created = file.createNewFile()@ } CATCH { -> new CodeGenFailedException()@ -> new CodeGenFailedException()@ } -> output = new FileOutputStream(file)@ -> newWsdl = new StreamResult(output)@ -> new CodeGenFailedException()@ -> new CodeGenFailedException()@ } CATCH { -> new CodeGenFailedException()@ -> new CodeGenFailedException()@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/wsdl/parser/WSDLConversionToSingleNamespace.java!WSDLConversionToSingleNamespace!writeNewwsdl][SEQ] =  -> CATCH { -> new CodeGenFailedException()@ -> new CodeGenFailedException()@ -> sourcewsdl = new DOMSource(m_Document)@ } -> TRY { -> file = new File(fileLocation)@ -> TRY { -> created = file.createNewFile()@ } CATCH { -> new CodeGenFailedException()@ -> new CodeGenFailedException()@ } -> output = new FileOutputStream(file)@ -> newWsdl = new StreamResult(output)@ -> new CodeGenFailedException()@ -> new CodeGenFailedException()@ } CATCH { -> new CodeGenFailedException()@ -> new CodeGenFailedException()@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/errorlibrary/FileErrorIdGenerator.java!FileErrorIdGenerator!tryGetFileLock][SEQ] =  -> file = new File(m_fileName)@ -> lockFile = new File(lockFilePath)@ -> lockFile.exists()@ -> IF { -> new ErrorIdGeneratorException(m_fileName)@ } ELSE { -> TRY { -> lockFile.createNewFile()@!(lockFile.exists()) -> IF { -> new ErrorIdGeneratorException(errMsg)@ } } CATCH { -> new ErrorIdGeneratorException(errMsg)@ -> new ErrorIdGeneratorException(errMsg)@ } } -> TRY { -> tempFile = new File(m_fileName)@ -> IF { -> new ErrorIdGeneratorException(errMsg)@ } -> file.delete()@!(!copyFile) -> IF { -> new ErrorIdGeneratorException(errMsg)@ } -> file = new File(m_fileName)@!(!file.delete()) && !(!copyFile) -> tempFile.renameTo(file)@!(!file.delete()) && !(!copyFile) -> IF { -> new ErrorIdGeneratorException(errMsg)@ } -> tempStream = new FileOutputStream(file)@!(!tempFile.renameTo(,file)) && !(!file.delete()) && !(!copyFile) -> IF { -> new ErrorIdGeneratorException(m_fileName)@fileLock == null && !(!tempFile.renameTo(,file)) && !(!file.delete()) && !(!copyFile) } } CATCH { -> new ErrorIdGeneratorException()@ -> new ErrorIdGeneratorException()@ } CATCH { -> new ErrorIdGeneratorException()@ -> new ErrorIdGeneratorException()@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/library/utils/TypeLibraryUtilities.java!TypeLibraryUtilities!create][SEQ] =  -> IF { -> result = file.mkdirs()@ } ELSE { -> TRY { -> result = new File.mkdirs()@ -> result = file.createNewFile()@ } }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/AbstractServiceGeneratorTestCase.java!AbstractServiceGeneratorTestCase!createInterfacePropsFile][SEQ] =  -> file = new File(path)@ -> destDir = new File(path)@ -> TRY { -> destDir.exists()@ -> IF { -> destDir.mkdir()@!destDir.exists() } -> file.exists()@!(!destDir.exists()) -> IF { -> file.createNewFile()@!file.exists() && !(!destDir.exists()) } -> out = new FileOutputStream(file)@!(!file.exists()) && !(!destDir.exists()) }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/AbstractServiceGeneratorTestCase.java!AbstractServiceGeneratorTestCase!createPropertyFile][SEQ] =  -> testDir = new File(dir)@ -> testDir.exists()@ -> IF { -> testDir.mkdirs()@!testDir.exists() -> intfProps = new File(dir,propertyFileName)@!(!testDir.exists()) -> intfProps.exists()@!(!testDir.exists()) } -> IF { -> intfProps.createNewFile()@!(!testDir.exists()) && !intfProps.exists() }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/BetterToolingQE2Test.java!BetterToolingQE2Test!createConsumerPropsFile][SEQ] =  -> dir = new File(destDir)@ -> dir.exists()@ -> IF { -> dir.mkdirs()@!dir.exists() -> file = new File(destDir)@!(!dir.exists()) -> file.exists()@!(!dir.exists()) } -> IF { -> file.createNewFile()@!file.exists() && !(!dir.exists()) -> pro = new Properties()@ -> in = new FileInputStream(file)@!(!file.exists()) && !(!dir.exists()) -> out = new FileOutputStream(destDir)@!(!file.exists()) && !(!dir.exists()) }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/BetterToolingQETest.java!BetterToolingQETest!createConsumerPropsFile][SEQ] =  -> dDir = new File(destDir)@ -> dDir.exists()@ -> IF { -> dDir.mkdirs()@!dDir.exists() -> file = new File(destDir)@ -> file.createNewFile()@ -> pro = new Properties()@ -> in = new FileInputStream(file)@ -> out = new FileOutputStream(destDir)@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ConsumerIDQE2Test.java!ConsumerIDQE2Test!CreateInterfacePropsFile][SEQ] =  -> dDir = new File(destDir)@ -> dDir.exists()@ -> IF { -> dDir.mkdir()@!dDir.exists() -> file = new File(filePath)@ -> file.exists()@ } -> IF { -> file.createNewFile()@!file.exists() -> pro = new Properties()@ -> in = new FileInputStream(file)@!(!file.exists()) -> out = new FileOutputStream(destDir)@!(!dDir.exists()) }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ConsumerIDQETest.java!ConsumerIDQETest!createConsumerPropsFile][SEQ] =  -> file = new File(path)@ -> destDir = new File(path)@ -> TRY { -> destDir.exists()@ -> IF { -> destDir.mkdir()@!destDir.exists() } -> file.exists()@!(!destDir.exists()) -> IF { -> file.createNewFile()@!file.exists() && !(!destDir.exists()) } -> out = new FileOutputStream(file)@!(!file.exists()) && !(!destDir.exists()) }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ObjectFactorySortOrderTest.java!ObjectFactorySortOrderTest!getObjectFactoryFile][SEQ] =  -> TRY { -> new File.mkdirs() -> new File(pkg,destDir) -> destDir.getAbsolutePath()@ -> objFactory = new File(time,pkg,destDir)@ -> objFactory.createNewFile()@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ObjectFactorySortOrderTest.java!ObjectFactorySortOrderTest!initialize][SEQ] =  -> objFactFolder = new File(destDir)@ -> objFactFolder.exists()@ -> IF { -> objFactFolder.createNewFile()@!objFactFolder.exists() -> intfProps = new Properties()@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ObjectFactorySortOrderV3Test.java!ObjectFactorySortOrderV3Test!getObjectFactoryFile][SEQ] =  -> TRY { -> new File.mkdirs() -> new File(pkg,destDir) -> destDir.getAbsolutePath()@ -> objFactory = new File(time,pkg,destDir)@ -> objFactory.createNewFile()@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ObjectFactorySortOrderV3Test.java!ObjectFactorySortOrderV3Test!initialize][SEQ] =  -> objFactFolder = new File(destDir)@ -> objFactFolder.exists()@ -> IF { -> objFactFolder.createNewFile()@!objFactFolder.exists() -> intfProps = new Properties()@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ServiceGeneratorTest8.java!ServiceGeneratorTest8!updateServiceImplProjectProperties][SEQ] =  -> destDir.exists()@ -> IF { -> destDir.mkdir()@!destDir.exists() -> new File.exists() -> new File(propsFilePath)@ } -> IF { -> new File.createNewFile() -> new File(propsFilePath)@!new File(propsFilePath).exists() -> fis = new FileInputStream(propsFilePath)@!(!new File(propsFilePath).exists()) -> props = new Properties()@ -> fos = new FileOutputStream(propsFilePath)@!(!new File(propsFilePath).exists()) }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ServiceUIDQE2Test.java!ServiceUIDQE2Test!CreateInterfacePropsFile][SEQ] =  -> file = new File(path)@ -> destDir = new File(path)@ -> TRY { -> destDir.exists()@ -> IF { -> destDir.mkdir()@!destDir.exists() } -> file.exists()@!(!destDir.exists()) -> IF { -> file.createNewFile()@!file.exists() && !(!destDir.exists()) } -> out = new FileOutputStream(file)@!(!file.exists()) && !(!destDir.exists()) }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ServiceUIDQE2Test.java!ServiceUIDQE2Test!createImplPropsFile][SEQ] =  -> file = new File(IMPL_PROPERTIES,destDir)@ -> destDir.exists()@ -> IF { -> destDir.mkdir()@!destDir.exists() -> file.exists()@!(!destDir.exists()) } -> IF { -> TRY { -> file.createNewFile()@!file.exists() && !(!destDir.exists()) -> pro = new Properties()@!file.exists() && !(!destDir.exists()) -> in = new FileInputStream(file)@!file.exists() && !(!destDir.exists()) -> out = new FileOutputStream(IMPL_PROPERTIES,destDir)@!file.exists() && !(!destDir.exists()) } }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ServiceUIDQE3Test.java!ServiceUIDQE3Test!CreateConsumerPropsFile][SEQ] =  -> file = new File(destDir)@ -> dDir = new File(destDir)@ -> dDir.exists()@ -> IF { -> dDir.mkdir()@!dDir.exists() -> file.exists()@!(!dDir.exists()) } -> IF { -> file.createNewFile()@!file.exists() && !(!dDir.exists()) -> pro = new Properties()@ -> in = new FileInputStream(file)@!(!file.exists()) && !(!dDir.exists()) -> out = new FileOutputStream(destDir)@!(!file.exists()) && !(!dDir.exists()) }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ServiceUIDQETest.java!ServiceUIDQETest!CreateConsumerPropsFile][SEQ] =  -> dest = new File(destDir)@ -> file = new File(destDir)@ -> dest.exists()@ -> IF { -> dest.mkdirs()@!dest.exists() -> file.exists()@!(!dest.exists()) } -> IF { -> file.createNewFile()@!file.exists() && !(!dest.exists()) -> pro = new Properties()@ -> in = new FileInputStream(file)@!(!file.exists()) && !(!dest.exists()) -> out = new FileOutputStream(destDir)@!(!file.exists()) && !(!dest.exists()) }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/ServiceUIDQETest.java!ServiceUIDQETest!CreateInterfacePropsFile][SEQ] =  -> file = new File(path)@ -> destDir = new File(path)@ -> destDir.exists()@ -> IF { -> destDir.mkdirs()@!destDir.exists() -> file.exists()@!(!destDir.exists()) } -> IF { -> file.createNewFile()@!file.exists() && !(!destDir.exists()) -> pro = new Properties()@ -> in = new FileInputStream(file)@!(!file.exists()) && !(!destDir.exists()) -> out = new FileOutputStream(path)@!(!file.exists()) && !(!destDir.exists()) }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/errorlibrary/ErrorLibraryDataInputTest.java!ErrorLibraryDataInputTest!createDomainPropertiesFile][SEQ] =  -> testDir = new File(projRoot,dirname)@ -> testProp = new File(testDir)@ -> testProp.createNewFile()@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/errorlibrary/ErrorLibraryFileGenerationTest.java!ErrorLibraryFileGenerationTest!createDomainPropertiesFile][SEQ] =  -> testProp = new File(testDir,ERRORLIBPROPS)@ -> testProp.exists()@ -> IF { -> testProp.createNewFile()@!testProp.exists() }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/errorlibrary/ErrorLibraryFileGenerationTest.java!ErrorLibraryFileGenerationTest!createTestSpecificPropFile][SEQ] =  -> testProp.createNewFile()@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/library/BugTest.java!!accept][SEQ] =  -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> binDir = new File(destDir)@ -> type = new File(dest)@ -> type.exists()@ -> IF { -> type.createNewFile()@!type.exists() -> type2 = new File(dest)@ -> type.exists()@!(!type.exists()) } -> IF { -> type.createNewFile()@!(!type.exists()) && !type.exists() -> type.getAbsolutePath()@!(!type.exists()) -> type2.getAbsolutePath()@ -> fileDirectories = new FileFilter()@ -> genJavaFile = new FileFilter()@ -> javaTypeLibDir = new File(javaFilePath)@ -> javaTypeLibDir.isDirectory()@ } -> IF { -> file = javaTypeLibDir.listFiles()@javaTypeLibDir.isDirectory() -> file = javaTypeLibDir.listFiles(fileDirectories)@javaTypeLibDir.isDirectory() -> file = javaTypeLibDir.listFiles(genJavaFile)@javaTypeLibDir.isDirectory() } -> file.isDirectory()@ }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/library/BugTest.java!BugTest!testBug][SEQ] =  -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> destDir.getAbsolutePath()@ -> binDir = new File(destDir)@ -> type = new File(dest)@ -> type.exists()@ -> IF { -> type.createNewFile()@!type.exists() -> type2 = new File(dest)@ -> type.exists()@!(!type.exists()) } -> IF { -> type.createNewFile()@!(!type.exists()) && !type.exists() -> type.getAbsolutePath()@!(!type.exists()) -> type2.getAbsolutePath()@ -> fileDirectories = new FileFilter()@ -> genJavaFile = new FileFilter()@ -> javaTypeLibDir = new File(javaFilePath)@ -> javaTypeLibDir.isDirectory()@ } -> IF { -> file = javaTypeLibDir.listFiles()@javaTypeLibDir.isDirectory() -> file = javaTypeLibDir.listFiles(fileDirectories)@javaTypeLibDir.isDirectory() -> file = javaTypeLibDir.listFiles(genJavaFile)@javaTypeLibDir.isDirectory() }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/library/TypeLibraryUtility.java!TypeLibraryUtility!copyXSDFileToTypesFolder1][SEQ] =  -> toXsdFile = new File(toXsdFilePath)@ -> toXsdFile.exists()@ -> IF { -> TRY { -> toXsdFile.createNewFile()@!toXsdFile.exists() -> fromXsdFile = new File(fromXsdFilePath)@ -> fromXsdFile.exists()@ } } -> IF { -> TRY { -> fromXsdFile.createNewFile()@!fromXsdFile.exists() } } -> TRY { -> in = new FileInputStream(fromXsdFile)@!(!fromXsdFile.exists()) -> out = new FileOutputStream(toXsdFile)@!(!toXsdFile.exists()) }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/library/TypeLibraryUtility.java!TypeLibraryUtility!copyXSDFileToTypesFolder][SEQ] =  -> libfolder = new File(libraryName)@ -> libfolder.mkdirs()@ -> toXsdFile = new File(toXsdFilePath)@ -> toXsdFile.exists()@ -> IF { -> TRY { -> toXsdFile.createNewFile()@!toXsdFile.exists() -> fromXsdFile = new File(fromXsdFilePath)@!(!toXsdFile.exists()) -> fromXsdFile.getAbsolutePath()@!(!toXsdFile.exists()) -> fromXsdFile.exists()@!(!toXsdFile.exists()) } } -> IF { -> TRY { -> fromXsdFile.createNewFile()@!fromXsdFile.exists() && !(!toXsdFile.exists()) } } -> TRY { -> in = new FileInputStream(fromXsdFile)@!(!fromXsdFile.exists()) && !(!toXsdFile.exists()) -> out = new FileOutputStream(toXsdFile)@!(!fromXsdFile.exists()) && !(!toXsdFile.exists()) }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/JSFUtils.java!JSFUtils!createConfigFile][SEQ] =  -> TRY { -> file.createNewFile()@ -> os = new FileOutputStream(file)@ }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/designtime/internal/view/model/jsp/persistence/TagRepository.java!TagRepository!getOrCreateMasterIndex][SEQ] =  -> repoDir = new File(repoPath)@ -> repoDir.exists()@ -> masterIndexFile = new File(MASTER_INDEX_FILE_NAME,repoDir)@!(!repoDir.exists()) -> index = new MasterIndex(masterIndexFile,repoDir)@!(!repoDir.exists()) -> masterIndexFile.exists()@ -> IF { -> masterIndexFile.createNewFile()@!masterIndexFile.exists() -> IF { -> masterIndexFile.toString() -> new IOException(masterIndexFile)@!masterIndexFile.createNewFile() && !masterIndexFile.exists() } -> new SerializableVersion()@ } ELSE { -> new SerializableVersion()@ }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/utils/PreviewUtil.java!PreviewUtil!toFile][SEQ] =  -> TRY { -> file.exists()@ -> IF { -> file.createNewFile()@!file.exists() } -> fos = new FileOutputStream(file)@!(!file.exists()) -> ps = new PrintStream(fos,charset)@!(charset == null || !Charset.isSupported(,charset)) }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/pad/fragment/ChatRoomFragment.java!!onTouchCallbackEvent][SEQ] =  -> new ChatroomLayout.TouchCallback()@ -> IF { } ELSE { -> chatGroupModel = new ChatGroupModel()@ -> new OnTouchListener()@ -> sb = new StringBuilder() -> myRecAudioFile.exists() -> myRecAudioFile.delete() -> myRecAudioFile.getPath() -> ampThread = new Thread(ampTask) -> uploadTask = new HttpRequestAsynTask() -> new OnTouchListener() -> new File(myRecAudioFile)@ } -> IF { -> adapter = new ChatRoomAdapter(conversations,userModel)@ } -> IF { -> adapter = new ChatRoomAdapter(conversations,chatGroupModel)@ } -> IF { -> IF { -> new AsyncTask<Void, Void, Void>()@ -> progressDialog = new ProgressDialog()@ -> emotions = new LocalModule()@ -> photographer = new LocalModule()@ -> localPic = new LocalModule()@ -> dir = new File(path)@ -> dir.exists()@ } } -> IF { -> dir.mkdirs()@ -> mFileTemp = new File(path)@ -> mFileTemp.exists()@ } -> IF { -> TRY { -> mFileTemp.createNewFile()@ } } } }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/pad/fragment/ChatRoomFragment.java!ChatRoomFragment!initValues][SEQ] =  -> new ChatroomLayout.TouchCallback()@ -> IF { } ELSE { -> chatGroupModel = new ChatGroupModel()@ -> new OnTouchListener()@ -> sb = new StringBuilder() -> myRecAudioFile.exists() -> myRecAudioFile.delete() -> myRecAudioFile.getPath() -> ampThread = new Thread(ampTask) -> uploadTask = new HttpRequestAsynTask() -> new OnTouchListener() -> new File(myRecAudioFile)@ } -> IF { -> adapter = new ChatRoomAdapter(conversations,userModel)@ } -> IF { -> adapter = new ChatRoomAdapter(conversations,chatGroupModel)@ } -> IF { -> IF { -> new AsyncTask<Void, Void, Void>()@ -> progressDialog = new ProgressDialog()@ -> emotions = new LocalModule()@ -> photographer = new LocalModule()@ -> localPic = new LocalModule()@ -> dir = new File(path)@ -> dir.exists()@ } } -> IF { -> dir.mkdirs()@ -> mFileTemp = new File(path)@ -> mFileTemp.exists()@ } -> IF { -> TRY { -> mFileTemp.createNewFile()@ } }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/phone/chat/camera/CameraActivity.java!CameraActivity!save][SEQ] =  -> TRY { -> IF { -> fs = new StatFs(storage)@ -> file = new File(path)@ -> file.exists()@ -> IF { -> file.createNewFile()@ } -> fos = new FileOutputStream(file)@ } }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/phone/chat/chatroom/PicutureDetailActivity.java!!doInBackground][SEQ] =  -> dm = new DisplayMetrics()@ -> IF { -> IF { -> dir = new File(path)@ -> dir.exists()@ -> IF { -> dir.mkdirs()@ } -> fileTemp = new File(path)@ -> fileTemp.exists()@ -> IF { -> TRY { -> fileTemp.createNewFile()@ } } -> new AsyncTask<String, Void, Bitmap>()@ } } ELSE { -> IF { -> new AsyncTask<Void, Void, Bitmap>()@ } } } }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/phone/chat/chatroom/PicutureDetailActivity.java!!doInBackground][SEQ] =  -> dir = new File(imageFilePath)@ -> dir.exists()@ -> IF { -> dir.mkdirs()@ -> imageFile = new File(imageFilePath)@ -> imageFile.exists()@ } -> IF { -> TRY { -> imageFile.createNewFile()@ -> imageFile.getAbsolutePath() -> file1 = new File() -> file0.exists() -> file0 = new File() -> new AsyncTask<String, Integer, String>() -> file1.exists()@ -> intent = new Intent()@ } } } } -> TRY { -> IF { -> file0 = new File(params)@params0 != null && params1 != null -> file1 = new File(params)@params0 != null && params1 != null -> file0.exists() -> file1.exists()@params0 != null && params1 != null } }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/phone/chat/chatroom/PicutureDetailActivity.java!PicutureDetailActivity!onClick][SEQ] =  -> dir = new File(imageFilePath)@ -> dir.exists()@ -> IF { -> dir.mkdirs()@ -> imageFile = new File(imageFilePath)@ -> imageFile.exists()@ } -> IF { -> TRY { -> imageFile.createNewFile()@ -> imageFile.getAbsolutePath() -> file1 = new File() -> file0.exists() -> file0 = new File() -> new AsyncTask<String, Integer, String>() -> file1.exists()@ -> intent = new Intent()@ } }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/phone/chat/chatroom/PicutureDetailActivity.java!PicutureDetailActivity!onCreate][SEQ] =  -> dm = new DisplayMetrics()@ -> IF { -> IF { -> dir = new File(path)@ -> dir.exists()@ -> IF { -> dir.mkdirs()@ } -> fileTemp = new File(path)@ -> fileTemp.exists()@ -> IF { -> TRY { -> fileTemp.createNewFile()@ } } -> new AsyncTask<String, Void, Bitmap>()@ } } ELSE { -> IF { -> new AsyncTask<Void, Void, Bitmap>()@ } }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/phone/chat/image/CropImage.java!CropImage!saveOutput][SEQ] =  -> dir = new File(path)@ -> dir.exists()@ -> IF { -> dir.mkdirs()@!dir.exists() -> fileCrop = new File(path)@ -> fileCrop.exists()@ } -> IF { -> TRY { -> fileCrop.createNewFile()@!fileCrop.exists() } }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/update/DownloadUpdateActivity.java!DownloadTask!doInBackground][SEQ] =  -> httpParameters = new BasicHttpParams()@ -> client = new DefaultHttpClient(httpParameters)@ -> get = new HttpGet(updateUrl)@ -> TRY { -> IF { -> apkFile.exists()@ -> IF { -> apkFile.createNewFile()@!apkFile.exists() } -> fos = new FileOutputStream(apkFile)@!(!apkFile.exists()) -> IF { -> new RuntimeException()@ } } ELSE { -> new RuntimeException(response)@!(getStatusCode == HttpStatus.SC_OK) } } CATCH { -> new Exception()@ -> error = new Exception()@ }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/util/LogUtil.java!LogUtil!storeLog][SEQ] =  -> fileDir = new File(SAVE_LOG_DIR_PATH)@ -> fileDir.exists()@ -> IF { -> fileDir.mkdir()@!fileDir.exists() -> file = new File(save_log_path)@ -> file.exists()@ } -> IF { -> TRY { -> file.createNewFile()@!file.exists() } } -> TRY { -> fos = new FileOutputStream(file)@!(!file.exists()) -> out = new PrintWriter(fos)@!(!file.exists()) }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/util/imageTool/CubeAsyncImage.java!CubeAsyncImage!doBufferImage][SEQ] =  -> TRY { -> f = new File(imgBufferParent,sdcard,fileName)@ -> f.getParentFile() -> f.getParentFile().exists()@ -> IF { -> f.getParentFile().mkdirs() -> f.getParentFile()@ } -> f.exists()@ -> IF { -> f.delete()@ } -> f.createNewFile()@ -> bos = new BufferedOutputStream(f)@ }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/org/apache/cordova/file/FileUtils.java!FileUtils!getFile][SEQ] =  -> IF { -> new EncodingException()@ } -> IF { -> fp.exists()@ -> IF { -> new FileExistsException()@ } -> IF { -> fp.mkdir()@ } ELSE { -> fp.createNewFile()@ } -> fp.exists()@ -> IF { -> new FileExistsException()@ } } ELSE { -> fp.exists()@ -> IF { -> new FileNotFoundException()@ } -> IF { -> fp.isFile()@ -> IF { -> new TypeMismatchException()@ } } ELSE { -> fp.isDirectory()@ -> IF { -> new TypeMismatchException()@ } } }
results[https://github.com/hyxf/coder!eoecn/src/cn/eoe/app/utils/ImageUtil.java!ImageUtil!saveImage][SEQ] =  -> f = new File(imagePath)@ -> f.exists()@ } ELSE { -> parentFile = f.getParentFile()@!(f.exists()) -> parentFile.exists()@!(f.exists()) -> IF { -> parentFile.mkdirs()@!parentFile.exists() && !(f.exists()) } -> f.createNewFile()@!(!parentFile.exists()) && !(f.exists()) -> fos = new FileOutputStream(imagePath)@!(!parentFile.exists()) && !(f.exists())
results[https://github.com/hyxf/coder!eoecn/src/cn/eoe/app/utils/ImageUtil.java!ImageUtil!saveImage][SEQ] =  -> f = new File(imagePath)@ -> f.exists()@ } ELSE { -> TRY { -> parentFile = f.getParentFile()@ -> parentFile.exists()@ -> IF { -> parentFile.mkdirs()@ } -> f.createNewFile()@ -> fos = new FileOutputStream(f)@ } CATCH { -> f.delete()@ -> f.delete()@ } CATCH { -> f.delete()@ -> f.delete()@ }
results[https://github.com/hyxf/coder!eoecn/src/cn/eoe/app/utils/RequestCacheUtil.java!RequestCacheUtil!saveFileForLocal][SEQ] =  -> file = new File(requestPath)@ -> file.exists()@ -> IF { -> TRY { -> parentFile = file.getParentFile()@!file.exists() -> parentFile.exists()@!file.exists() -> IF { -> parentFile.mkdirs()@!parentFile.exists() && !file.exists() } -> file.createNewFile()@!file.exists() && !(!parentFile.exists()) -> fout = new FileOutputStream(file)@!file.exists() && !(!parentFile.exists()) } }
results[https://github.com/hyxf/coder!source/src/cn/eoe/app/utils/ImageUtil.java!ImageUtil!saveImage][SEQ] =  -> f = new File(imagePath)@ -> f.exists()@ } ELSE { -> parentFile = f.getParentFile()@!(f.exists()) -> parentFile.exists()@!(f.exists()) -> IF { -> parentFile.mkdirs()@!parentFile.exists() && !(f.exists()) } -> f.createNewFile()@!(!parentFile.exists()) && !(f.exists()) -> fos = new FileOutputStream(imagePath)@!(!parentFile.exists()) && !(f.exists())
results[https://github.com/hyxf/coder!source/src/cn/eoe/app/utils/ImageUtil.java!ImageUtil!saveImage][SEQ] =  -> f = new File(imagePath)@ -> f.exists()@ } ELSE { -> TRY { -> parentFile = f.getParentFile()@ -> parentFile.exists()@ -> IF { -> parentFile.mkdirs()@ } -> f.createNewFile()@ -> fos = new FileOutputStream(f)@ } CATCH { -> f.delete()@ -> f.delete()@ } CATCH { -> f.delete()@ -> f.delete()@ }
results[https://github.com/hyxf/coder!source/src/cn/eoe/app/utils/RequestCacheUtil.java!RequestCacheUtil!saveFileForLocal][SEQ] =  -> file = new File(requestPath)@ -> file.exists()@ -> IF { -> TRY { -> parentFile = file.getParentFile()@!file.exists() -> parentFile.exists()@!file.exists() -> IF { -> parentFile.mkdirs()@!parentFile.exists() && !file.exists() } -> file.createNewFile()@!file.exists() && !(!parentFile.exists()) -> fout = new FileOutputStream(file)@!file.exists() && !(!parentFile.exists()) } }
results[https://github.com/hyxf/coder!source/src/cn/hyxf/app/utils/RequestCacheUtil.java!RequestCacheUtil!saveFileForLocal][SEQ] =  -> file = new File(requestPath)@ -> file.exists()@ -> IF { -> TRY { -> parentFile = file.getParentFile()@!file.exists() -> parentFile.exists()@!file.exists() -> IF { -> parentFile.mkdirs()@!parentFile.exists() && !file.exists() } -> file.createNewFile()@!file.exists() && !(!parentFile.exists()) -> fout = new FileOutputStream(file)@!file.exists() && !(!parentFile.exists()) } }
results[https://github.com/raymondBourges/esup-commons-import!esup-commons/esup-commons-core/src/main/java/org/esupportail/commons/utils/lock/FileLockImpl.java!FileLockImpl!lock][SEQ] =  -> TRY { -> file = new File(filename)@ -> file.createNewFile()@ -> IF { -> new AlreadyLockedException(filename)@!file.createNewFile() } } CATCH { -> new LockException(filename)@ -> new LockException(filename)@ }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/io/flv/impl/FLV.java!FLV!getReader][SEQ] =  -> fileName = file.getName()@ -> IF { -> file.exists()@null == ic || null == ic.getByteBuffer() -> IF { -> file.length()@null == ic || null == ic.getByteBuffer() && file.exists() -> reader = new FLVReader(file,generateMetadata)@null == ic || null == ic.getByteBuffer() && file.exists() } ELSE { -> file.createNewFile()@!(file.exists()) && null == ic || null == ic.getByteBuffer() } } ELSE { -> reader = new FLVReader(fileData,generateMetadata)@!(cache == null) && !(null == ic || null == ic.getByteBuffer()) }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/io/flv/impl/FLV.java!FLV!getWriter][SEQ] =  -> file.exists()@ -> IF { -> file.delete()@file.exists() -> file.createNewFile()@!(file.exists()) -> writer = new FLVWriter(file)@!(file.exists()) }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/io/flv/impl/FLVWriter.java!FLVWriter!<init>][SEQ] =  -> filePath = file.getAbsolutePath()@ -> TRY { -> IF { -> dataFile = new RandomAccessFile(file)@ -> file.canRead() -> file.canWrite() -> file.exists()@ } ELSE { -> file.lastModified() -> file.length()@!(!file.exists()!file.canRead()!file.canWrite()) -> bytesWritten = file.length()@!(!file.exists()!file.canRead()!file.canWrite()) } ELSE { -> dat = new File(filePath)@ -> dat.exists()@ -> IF { -> dat.delete()@dat.exists() -> dat.createNewFile()@dat.exists() } -> dataFile = new RandomAccessFile(dat)@!(dat.exists()) -> file = new RandomAccessFile(file)@!(dat.exists()) } }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/io/mp4/impl/MP4.java!MP4!getReader][SEQ] =  -> fileName = file.getName()@ -> file.exists()@ -> IF { -> file.length()@file.exists() -> reader = new MP4Reader(file)@file.exists() } ELSE { -> file.createNewFile()@!(file.exists()) }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/net/proxy/DebugProxyHandler.java!DebugProxyHandler!sessionCreated][SEQ] =  -> IF { -> new RTMP(isClient)@ -> new ProtocolCodecFilter(codecFactory)@ -> new ProxyFilter(isClient)@ } -> IF { -> headersFile.createNewFile()@ -> rawFile.createNewFile()@ -> headersFos = new FileOutputStream(headersFile)@ -> rawFos = new FileOutputStream(rawFile)@ -> new NetworkDumpFilter(headers,raw)@ } -> IF { -> connector = new NioSocketConnector()@ }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/stream/ClientBroadcastStream.java!ClientBroadcastStream!saveAs][SEQ] =  -> recordParamMap = new HashMap<String, Object>()@ -> IF { -> recordPipe = new InMemoryPushPushPipe()@recordPipe == null } -> IF { -> new IOException()@ } -> IF { -> file = new File(recordingFilename)@ -> file.canWrite() -> file.exists()@ } -> IF { -> file.exists()@ -> IF { -> file.delete()@file.exists() -> IF { -> file.getName() -> new IOException(file)@!file.delete() && file.exists() } } } ELSE { -> file.exists()@ -> file.exists()@ } -> IF { -> path = file.getAbsolutePath()@!file.exists() -> tmp = new File(path)@ -> tmp.isDirectory()@ -> IF { -> tmp.mkdirs()@!tmp.isDirectory() } -> file.createNewFile()@!file.exists() -> meta = new File(file)@!(!file.exists()) -> meta.exists()@ } -> IF { -> meta.delete()@meta.exists() -> IF { -> meta.getName()@meta.delete() && meta.exists() } ELSE { -> meta.getName()@!(meta.delete()) && meta.exists() -> meta.deleteOnExit()@!(meta.delete()) && meta.exists() } } ELSE { -> meta.getCanonicalPath()@!(meta.exists()) -> file.getCanonicalPath()@!(!file.exists()) } } ELSE { -> recordingFile = new FileConsumer(scope,file)@!(!file.exists()) && !(hasBean) -> IF { -> IF { -> IF { -> conf = new VideoData(config)@config != null } } -> IF { -> IF { -> conf = new AudioData(config)@config != null } } }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/stream/ServerStream.java!ServerStream!saveAs][SEQ] =  -> TRY { -> IF { -> file = new File(filename)@ } -> IF { -> file.exists()@ -> IF { -> file.delete()@ -> IF { -> new IOException()@ } } } ELSE { -> file.exists()@ } -> file.exists()@ -> IF { -> path = file.getAbsolutePath()@ -> tmp = new File(path)@ -> tmp.isDirectory()@ -> IF { -> tmp.mkdirs()@ } -> file.canWrite()@ -> IF { -> file.getCanonicalPath()@ } -> file.createNewFile()@ } ELSE { -> meta = new File(file)@ -> meta.delete()@ -> IF { -> meta.getName()@ } ELSE { -> meta.getName()@ -> meta.deleteOnExit()@ } } -> file.getCanonicalPath()@ } ELSE { -> recordingFile = new FileConsumer(scope,file)@ -> paramMap = new HashMap<String, Object>()@ -> IF { -> recordPipe = new InMemoryPushPushPipe()@ } }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/stream/consumer/FileConsumer.java!FileConsumer!init][SEQ] =  -> IF { -> queue = new ArrayList<QueuedData>()@ -> reentrantLock = new ReentrantReadWriteLock()@ -> folder = file.getParentFile()@ -> folder.exists()@ } -> IF { -> folder.mkdirs()@ -> IF { -> new IOException()@ -> file.isFile()@ } } -> IF { -> file.createNewFile()@ } ELSE { -> file.canWrite()@ -> IF { -> new IOException()@ } } } ELSE { } ELSE { -> new IllegalStateException(mode)@
results[https://github.com/rfkrocktk/red5-server!test/org/red5/server/io/CuePointInjectionTest.java!CuePointInjectionTest!testCuePointInjection][SEQ] =  -> f = new File(path)@ -> f.getAbsolutePath()@ -> f.exists()@ -> IF { -> f.delete()@f.exists() } ELSE { -> f = new File(path)@!(f.exists()) -> f.getAbsolutePath()@!(f.exists()) -> f.exists()@!(f.exists()) -> IF { -> f.delete()@!(f.exists()) && f.exists() -> f.createNewFile()@!(f.exists()) -> readfile = new File(path)@ } }
results[https://github.com/rfkrocktk/red5-server!test/org/red5/server/io/MetaDataInjectionTest.java!MetaDataInjectionTest!testMetaDataInjection][SEQ] =  -> f = new File(path)@ -> f.getAbsolutePath()@ -> f.exists()@ -> IF { -> f.delete()@f.exists() } ELSE { -> f = new File(path)@!(f.exists()) -> f.getAbsolutePath()@!(f.exists()) -> f.exists()@!(f.exists()) -> IF { -> f.delete()@!(f.exists()) && f.exists() -> f.createNewFile()@!(f.exists()) -> readfile = new File(path)@ } }
results[https://github.com/rfkrocktk/red5-server!test/org/red5/server/io/test/CuePointInjectionTest.java!CuePointInjectionTest!testCuePointInjection][SEQ] =  -> f = new File()@ -> f.exists()@ -> IF { -> f.delete()@f.exists() -> f.createNewFile()@!(f.exists()) -> readfile = new File()@ }
results[https://github.com/rfkrocktk/red5-server!test/org/red5/server/io/test/MetaDataInjectionTest.java!MetaDataInjectionTest!testMetaDataInjection][SEQ] =  -> f = new File()@ -> f.exists()@ -> IF { -> f.delete()@f.exists() -> f.createNewFile()@!(f.exists()) -> readfile = new File()@ }
results[https://github.com/twigkit/fig!fig-core/src/main/java/twigkit/fig/loader/PropertiesLoader.java!PropertiesLoader!findFileForConfig][SEQ] =  -> f = new File(folder,FILE_EXTENSION,prefix,LEVEL_SEPARATOR,currentConfiguration)@ -> f.exists()@ } ELSE { -> TRY { -> f.createNewFile()@ }
results[https://github.com/twigkit/fig!fig-core/src/main/java/twigkit/fig/loader/PropertiesLoader.java!PropertiesLoader!write][SEQ] =  -> TRY { -> file.exists()@ -> IF { -> file.getAbsolutePath()@!file.exists() -> file.createNewFile()@!file.exists() } -> out = new OutputStreamWriter(file)@!(!file.exists()) }
results[https://github.com/yangfuhai/afinal!src/net/tsz/afinal/FinalDb.java!FinalDb!createDbFileOnSDCard][SEQ] =  -> dbf = new File(sdcardPath,dbfilename)@ -> dbf.exists()@ -> IF { -> TRY { -> dbf.createNewFile()@!dbf.exists() } CATCH { -> new DbException()@ -> new DbException()@ } }
results[https://github.com/yangfuhai/afinal!src/net/tsz/afinal/http/entityhandler/FileEntityHandler.java!FileEntityHandler!handleEntity][SEQ] =  -> targetFile = new File(target)@ -> targetFile.exists()@ -> IF { -> targetFile.createNewFile()@ } -> IF { -> current = targetFile.length()@ -> os = new FileOutputStream(target)@ } ELSE { -> os = new FileOutputStream(target)@ } -> IF { -> new IOException()@ }