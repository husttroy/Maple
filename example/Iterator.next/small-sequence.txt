results[https://github.com/DownGoat/MonsterMash!G12/src/MonsterMash/org/json/CookieList.java!CookieList!toString][SEQ] =  -> keys=jo.keys()@ -> sb=new StringBuffer()@ -> LOOP { -> string=keys.next().toString()@keys.hasNext() -> IF { -> IF { -> sb.append(';',)@ } -> sb.append(Cookie.escape(string,),)@keys.hasNext() && !jo.isNull(string,) -> sb.append("=",)@keys.hasNext() && !jo.isNull(string,) -> sb.append(Cookie.escape(jo.getString(string,),),)@keys.hasNext() && !jo.isNull(string,) } } -> return sb.toString()@
results[https://github.com/DownGoat/MonsterMash!G12/src/MonsterMash/org/json/HTTP.java!HTTP!toString][SEQ] =  -> keys=jo.keys()@ -> sb=new StringBuffer()@ -> IF { -> sb.append(jo.getString("HTTP-Version",),)@jo.has("Status-Code",)&&jo.has("Reason-Phrase",) -> sb.append(' ',)@jo.has("Status-Code",)&&jo.has("Reason-Phrase",) -> sb.append(jo.getString("Status-Code",),)@jo.has("Status-Code",)&&jo.has("Reason-Phrase",) -> sb.append(' ',)@jo.has("Status-Code",)&&jo.has("Reason-Phrase",) -> sb.append(jo.getString("Reason-Phrase",),)@jo.has("Status-Code",)&&jo.has("Reason-Phrase",) } ELSE { -> IF { -> sb.append(jo.getString("Method",),)@!(jo.has("Status-Code",)&&jo.has("Reason-Phrase",)) && jo.has("Method",)&&jo.has("Request-URI",) -> sb.append(' ',)@!(jo.has("Status-Code",)&&jo.has("Reason-Phrase",)) && jo.has("Method",)&&jo.has("Request-URI",) -> sb.append('"',)@!(jo.has("Status-Code",)&&jo.has("Reason-Phrase",)) && jo.has("Method",)&&jo.has("Request-URI",) -> sb.append(jo.getString("Request-URI",),)@!(jo.has("Status-Code",)&&jo.has("Reason-Phrase",)) && jo.has("Method",)&&jo.has("Request-URI",) -> sb.append('"',)@!(jo.has("Status-Code",)&&jo.has("Reason-Phrase",)) && jo.has("Method",)&&jo.has("Request-URI",) -> sb.append(' ',)@!(jo.has("Status-Code",)&&jo.has("Reason-Phrase",)) && jo.has("Method",)&&jo.has("Request-URI",) -> sb.append(jo.getString("HTTP-Version",),)@!(jo.has("Status-Code",)&&jo.has("Reason-Phrase",)) && jo.has("Method",)&&jo.has("Request-URI",) } ELSE { -> throw new JSONException("Not enough material for an HTTP header.",)@!(jo.has("Method",)&&jo.has("Request-URI",)) && !(jo.has("Status-Code",)&&jo.has("Reason-Phrase",)) } } -> sb.append(CRLF,)@jo.has("Status-Code",)&&jo.has("Reason-Phrase",) -> LOOP { -> string=keys.next().toString()@keys.hasNext() && jo.has("Status-Code",)&&jo.has("Reason-Phrase",) -> IF { -> sb.append(string,)@keys.hasNext() && !"HTTP-Version".equals(string,)&&!"Status-Code".equals(string,)&&!"Reason-Phrase".equals(string,)&&!"Method".equals(string,)&&!"Request-URI".equals(string,)&&!jo.isNull(string,) && jo.has("Status-Code",)&&jo.has("Reason-Phrase",) -> sb.append(": ",)@keys.hasNext() && !"HTTP-Version".equals(string,)&&!"Status-Code".equals(string,)&&!"Reason-Phrase".equals(string,)&&!"Method".equals(string,)&&!"Request-URI".equals(string,)&&!jo.isNull(string,) && jo.has("Status-Code",)&&jo.has("Reason-Phrase",) -> sb.append(jo.getString(string,),)@keys.hasNext() && !"HTTP-Version".equals(string,)&&!"Status-Code".equals(string,)&&!"Reason-Phrase".equals(string,)&&!"Method".equals(string,)&&!"Request-URI".equals(string,)&&!jo.isNull(string,) && jo.has("Status-Code",)&&jo.has("Reason-Phrase",) -> sb.append(CRLF,)@keys.hasNext() && !"HTTP-Version".equals(string,)&&!"Status-Code".equals(string,)&&!"Reason-Phrase".equals(string,)&&!"Method".equals(string,)&&!"Request-URI".equals(string,)&&!jo.isNull(string,) && jo.has("Status-Code",)&&jo.has("Reason-Phrase",) } } -> sb.append(CRLF,)@jo.has("Status-Code",)&&jo.has("Reason-Phrase",) -> return sb.toString()@jo.has("Status-Code",)&&jo.has("Reason-Phrase",)
results[https://github.com/DownGoat/MonsterMash!G12/src/MonsterMash/org/json/JSONArray.java!JSONArray!<init>][SEQ] =  -> this.myArrayList=new ArrayList()@ -> IF { -> iter=collection.iterator()@collection!=null -> LOOP { -> this.myArrayList.add(JSONObject.wrap(iter.next(),),)@iter.hasNext() && collection!=null } }
results[https://github.com/DownGoat/MonsterMash!G12/src/MonsterMash/org/json/JSONML.java!JSONML!toString][SEQ] =  -> sb=new StringBuffer()@ -> tagName=jo.optString("tagName",)@ -> IF { -> return XML.escape(jo.toString(),)@tagName==null } -> XML.noSpace(tagName,)@!(tagName==null) -> tagName=XML.escape(tagName,)@!(tagName==null) -> sb.append('<',)@!(tagName==null) -> sb.append(tagName,)@!(tagName==null) -> keys=jo.keys()@!(tagName==null) -> LOOP { -> key=keys.next().toString()@keys.hasNext() && !(tagName==null) -> IF { -> XML.noSpace(key,)@keys.hasNext() && !(tagName==null) && !"tagName".equals(key,)&&!"childNodes".equals(key,) -> value=jo.optString(key,)@keys.hasNext() && !(tagName==null) && !"tagName".equals(key,)&&!"childNodes".equals(key,) -> IF { -> sb.append(' ',)@!(tagName==null) -> sb.append(XML.escape(key,),)@value!=null && keys.hasNext() && !(tagName==null) && !"tagName".equals(key,)&&!"childNodes".equals(key,) -> sb.append('=',)@value!=null && !(tagName==null) && !"tagName".equals(key,)&&!"childNodes".equals(key,) -> sb.append('"',)@value!=null && !(tagName==null) && !"tagName".equals(key,)&&!"childNodes".equals(key,) -> sb.append(XML.escape(value,),)@value!=null && keys.hasNext() && !(tagName==null) && !"tagName".equals(key,)&&!"childNodes".equals(key,) -> sb.append('"',)@value!=null && !(tagName==null) && !"tagName".equals(key,)&&!"childNodes".equals(key,) } } } -> ja=jo.optJSONArray("childNodes",)@!(tagName==null) -> IF { -> sb.append('/',)@!(tagName==null) -> sb.append('>',)@!(tagName==null) } ELSE { -> sb.append('>',)@!(tagName==null) -> length=ja.length()@!(ja==null) && !(tagName==null) -> LOOP { -> object=ja.get(i,)@!(ja==null) && !(tagName==null) && i<length -> IF { -> IF { -> sb.append(XML.escape(object.toString(),),)@object instanceof String && object!=null && !(ja==null) && !(tagName==null) && i<length } ELSE { -> IF { -> sb.append(toString((JSONObject) object,),)@object instanceof JSONObject && object!=null && !(ja==null) && !(tagName==null) && !(object instanceof String) && i<length } ELSE { -> IF { -> sb.append(toString((JSONArray) object,),)@object instanceof JSONArray && !(object instanceof JSONObject) && object!=null && !(ja==null) && !(tagName==null) && !(object instanceof String) && i<length } ELSE { -> sb.append(object.toString(),)@!(object instanceof JSONObject) && !(object instanceof JSONArray) && object!=null && !(ja==null) && !(tagName==null) && !(object instanceof String) && i<length } } } } } -> sb.append('<',)@!(tagName==null) -> sb.append('/',)@!(tagName==null) -> sb.append(tagName,)@!(tagName==null) -> sb.append('>',)@!(tagName==null) } -> return sb.toString()@!(tagName==null)
results[https://github.com/DownGoat/MonsterMash!G12/src/MonsterMash/org/json/JSONML.java!JSONML!toString][SEQ] =  -> sb=new StringBuffer()@ -> tagName=ja.getString(0,)@ -> XML.noSpace(tagName,)@ -> tagName=XML.escape(tagName,)@ -> sb.append('<',)@ -> sb.append(tagName,)@ -> object=ja.opt(1,)@ -> IF { -> jo=(JSONObject) object@object instanceof JSONObject -> keys=jo.keys()@object instanceof JSONObject -> LOOP { -> key=keys.next().toString()@keys.hasNext() && object instanceof JSONObject -> XML.noSpace(key,)@keys.hasNext() && object instanceof JSONObject -> value=jo.optString(key,)@keys.hasNext() && object instanceof JSONObject -> IF { -> sb.append(' ',)@ -> sb.append(XML.escape(key,),)@value!=null && keys.hasNext() && object instanceof JSONObject -> sb.append('=',)@value!=null && keys.hasNext() && object instanceof JSONObject -> sb.append('"',)@value!=null && keys.hasNext() && object instanceof JSONObject -> sb.append(XML.escape(value,),)@value!=null && keys.hasNext() && object instanceof JSONObject -> sb.append('"',)@value!=null && keys.hasNext() && object instanceof JSONObject } } } -> length=ja.length()@ -> IF { -> sb.append('/',)@i>=length -> sb.append('>',)@i>=length } ELSE { -> sb.append('>',)@!(i>=length) -> LOOP { -> object=ja.get(i,)@!(i>=length) -> IF { -> IF { -> sb.append(XML.escape(object.toString(),),)@object!=null && object instanceof String && !(i>=length) } ELSE { -> IF { -> sb.append(toString((JSONObject) object,),)@object!=null && object instanceof JSONObject && !(i>=length) && !(object instanceof String) } ELSE { -> IF { -> sb.append(toString((JSONArray) object,),)@object instanceof JSONArray && !(object instanceof JSONObject) && object!=null && !(i>=length) && !(object instanceof String) } } } } } -> sb.append('<',)@!(i>=length) -> sb.append('/',)@!(i>=length) -> sb.append(tagName,)@!(i>=length) -> sb.append('>',)@!(i>=length) } -> return sb.toString()@
results[https://github.com/DownGoat/MonsterMash!G12/src/MonsterMash/org/json/JSONObject.java!JSONObject!<init>][SEQ] =  -> this.map=new HashMap()@ -> IF { -> i=map.entrySet().iterator()@map!=null -> LOOP { -> e=(Map.Entry) i.next()@i.hasNext() && map!=null -> value=e.getValue()@i.hasNext() && map!=null -> IF { -> this.map.put(e.getKey(),wrap(value,),)@value!=null && i.hasNext() && map!=null } } }
results[https://github.com/DownGoat/MonsterMash!G12/src/MonsterMash/org/json/JSONObject.java!JSONObject!getNames][SEQ] =  -> length=jo.length()@ -> IF { -> return null@length==0 } -> iterator=jo.keys()@!(length==0) -> LOOP { -> names[i]=(String) iterator.next()@iterator.hasNext() && !(length==0) }
results[https://github.com/DownGoat/MonsterMash!G12/src/MonsterMash/org/json/JSONObject.java!JSONObject!names][SEQ] =  -> ja=new JSONArray()@ -> keys=this.keys()@ -> LOOP { -> ja.put(keys.next(),)@keys.hasNext() } -> return (ja.length()==0)?null:ja@
results[https://github.com/DownGoat/MonsterMash!G12/src/MonsterMash/org/json/JSONObject.java!JSONObject!write][SEQ] =  -> TRY { -> keys=this.keys()@ -> writer.write('{',)@ -> IF { -> key=keys.next()@ -> writer.write(quote(key.toString(),),)@ -> writer.write(':',)@ -> IF { -> writer.write(' ',)@ } -> writeValue(writer,this.map.get(key,),indentFactor,indent,)@ } ELSE { -> IF { -> newindent=indent+indentFactor@ -> LOOP { -> key=keys.next()@keys.hasNext() -> IF { -> writer.write(',',)@ } -> IF { -> writer.write('\n',)@ } -> indent(writer,newindent,)@ -> writer.write(quote(key.toString(),),)@keys.hasNext() -> writer.write(':',)@ -> IF { -> writer.write(' ',)@ } -> writeValue(writer,this.map.get(key,),indentFactor,newindent,)@keys.hasNext() } -> IF { -> writer.write('\n',)@ } -> indent(writer,indent,)@ } } -> writer.write('}',)@ -> return writer@ } CATCH { }
results[https://github.com/DownGoat/MonsterMash!G12/src/MonsterMash/org/json/XML.java!XML!toString][SEQ] =  -> sb=new StringBuffer()@ -> IF { -> IF { -> sb.append('<',)@object instanceof JSONObject -> sb.append(tagName,)@object instanceof JSONObject && tagName!=null -> sb.append('>',)@object instanceof JSONObject && tagName!=null } -> jo=(JSONObject) object@object instanceof JSONObject -> keys=jo.keys()@object instanceof JSONObject -> LOOP { -> key=keys.next().toString()@keys.hasNext() && object instanceof JSONObject -> value=jo.opt(key,)@keys.hasNext() && object instanceof JSONObject -> IF { -> string=(String) value@keys.hasNext() && object instanceof JSONObject && value instanceof String } -> IF { -> IF { -> ja=(JSONArray) value@keys.hasNext() && object instanceof JSONObject && value instanceof JSONArray && "content".equals(key,) -> length=ja.length()@keys.hasNext() && object instanceof JSONObject && value instanceof JSONArray && "content".equals(key,) -> LOOP { -> IF { -> sb.append('\n',)@object instanceof JSONObject } -> sb.append(escape(ja.get(i,).toString(),),)@keys.hasNext() && object instanceof JSONObject && value instanceof JSONArray && i<length && "content".equals(key,) } } ELSE { -> sb.append(escape(value.toString(),),)@!(value instanceof JSONArray) && keys.hasNext() && object instanceof JSONObject && "content".equals(key,) } } ELSE { -> IF { -> ja=(JSONArray) value@keys.hasNext() && object instanceof JSONObject && !("content".equals(key,)) && value instanceof JSONArray -> length=ja.length()@keys.hasNext() && object instanceof JSONObject && !("content".equals(key,)) && value instanceof JSONArray -> LOOP { -> value=ja.get(i,)@keys.hasNext() && object instanceof JSONObject && !("content".equals(key,)) && value instanceof JSONArray && i<length -> IF { -> sb.append('<',)@object instanceof JSONObject && !("content".equals(key,)) && value instanceof JSONArray && i<length -> sb.append(key,)@keys.hasNext() && object instanceof JSONObject && !("content".equals(key,)) && value instanceof JSONArray && i<length -> sb.append('>',)@object instanceof JSONObject && !("content".equals(key,)) && value instanceof JSONArray && i<length -> sb.append(toString(value,),)@keys.hasNext() && object instanceof JSONObject && !("content".equals(key,)) && value instanceof JSONArray && i<length -> sb.append("</",)@object instanceof JSONObject && !("content".equals(key,)) && value instanceof JSONArray && i<length -> sb.append(key,)@keys.hasNext() && object instanceof JSONObject && !("content".equals(key,)) && value instanceof JSONArray && i<length -> sb.append('>',)@object instanceof JSONObject && !("content".equals(key,)) && value instanceof JSONArray && i<length } ELSE { -> sb.append(toString(value,key,),)@!(value instanceof JSONArray) && keys.hasNext() && object instanceof JSONObject && !("content".equals(key,)) && value instanceof JSONArray && i<length } } } ELSE { -> IF { -> sb.append('<',)@!(value instanceof JSONArray) && object instanceof JSONObject && !("content".equals(key,)) && "".equals(value,) -> sb.append(key,)@!(value instanceof JSONArray) && keys.hasNext() && object instanceof JSONObject && !("content".equals(key,)) && "".equals(value,) -> sb.append("/>",)@!(value instanceof JSONArray) && object instanceof JSONObject && !("content".equals(key,)) && "".equals(value,) } ELSE { -> sb.append(toString(value,key,),)@!(value instanceof JSONArray) && !("".equals(value,)) && keys.hasNext() && object instanceof JSONObject && !("content".equals(key,)) } } } } -> IF { -> sb.append("</",)@object instanceof JSONObject && tagName!=null -> sb.append(tagName,)@object instanceof JSONObject && tagName!=null -> sb.append('>',)@object instanceof JSONObject && tagName!=null } -> return sb.toString()@object instanceof JSONObject } ELSE { -> IF { -> object=new JSONArray(object,)@!(object instanceof JSONObject) && object.getClass().isArray() } -> IF { -> ja=(JSONArray) object@!(object instanceof JSONObject) && object instanceof JSONArray -> length=ja.length()@!(object instanceof JSONObject) && object instanceof JSONArray -> LOOP { -> sb.append(toString(ja.opt(i,),(tagName==null)?"array":tagName,),)@!(object instanceof JSONObject) && object instanceof JSONArray && i<length } -> return sb.toString()@!(object instanceof JSONObject) && object instanceof JSONArray } ELSE { -> string=(object==null)?"null":escape(object.toString(),)@!(object instanceof JSONObject) && !(object instanceof JSONArray) -> return (tagName==null)?"\""+string+"\"":(string.length()==0)?"<"+tagName+"/>":"<"+tagName+">"+string+"</"+tagName+">"@!(object instanceof JSONObject) && !(object instanceof JSONArray) } }
results[https://github.com/Ourobor/petulant-batman!javaproject/src/View/DoubleSlider.java!DoubleSlider!notifyListeners][SEQ] =  -> itr=listeners.iterator()@ -> LOOP { -> (DoubleSliderAdjustmentListener) itr.next().adjustmentValueChanged(this,)@itr.hasNext() }
results[https://github.com/Ourobor/petulant-batman!src/View/DoubleSlider.java!DoubleSlider!notifyListeners][SEQ] =  -> itr=listeners.iterator()@ -> LOOP { -> (DoubleSliderAdjustmentListener) itr.next().adjustmentValueChanged(this,)@itr.hasNext() }
results[https://github.com/ansell/semanticwebpipes!src/org/deri/pipes/rdf/LinkResolver.java!LinkResolver!rewriteUrls][SEQ] =  -> source=new au.id.jericho.lib.html.Source(new InputStreamReader(inputstream,inputEncoding,),)@ -> outputdocument=new OutputDocument(source,)@ -> list=source.findAllStartTags()@ -> iterator=list.iterator()@ -> LOOP { -> starttag=(StartTag) iterator.next()@ -> IF { -> attributes=starttag.getAttributes()@starttag.getName()!=null -> IF { -> attribute=attributes.get("href",)@attributes!=null && starttag.getName()!=null -> IF { -> key=attribute.getKey()@attributes!=null && starttag.getName()!=null && attribute!=null -> value=attribute.getValue()@attributes!=null && starttag.getName()!=null && attribute!=null -> IF { -> map=outputdocument.replace(attributes,false,)@value!=null&&!value.startsWith("javascript:",)&&!value.startsWith("mailto:",)&&!value.startsWith("#",) && attributes!=null && starttag.getName()!=null && attribute!=null -> absoluteUrl=makeAbsoluteUrl(baseURL,value,)@value!=null&&!value.startsWith("javascript:",)&&!value.startsWith("mailto:",)&&!value.startsWith("#",) && attributes!=null && starttag.getName()!=null && attribute!=null -> absoluteUrl=absoluteUrl.replace(' ','+',)@ -> map.put(key,absoluteUrl,)@value!=null&&!value.startsWith("javascript:",)&&!value.startsWith("mailto:",)&&!value.startsWith("#",) && attributes!=null && starttag.getName()!=null && attribute!=null } } -> attribute=attributes.get("src",)@attributes!=null && starttag.getName()!=null -> IF { -> key=attribute.getKey()@attributes!=null && starttag.getName()!=null && attribute!=null -> value=attribute.getValue()@attributes!=null && starttag.getName()!=null && attribute!=null -> IF { -> map1=outputdocument.replace(attributes,false,)@value!=null && attributes!=null && starttag.getName()!=null && attribute!=null -> map1.put(key,makeAbsoluteUrl(baseURL,value,),)@value!=null && attributes!=null && starttag.getName()!=null && attribute!=null } } } } } -> outputdocument.writeTo(writer,)@
results[https://github.com/ceylon/ceylon-compiler!langtools/make/tools/CompileProperties/CompileProperties.java!CompileProperties!createFile][SEQ] =  -> log.verbose("parsing: "+propertiesPath,)@ -> p=new Properties()@ -> TRY { -> p.load(new FileInputStream(propertiesPath,),)@ } CATCH { -> log.error("Cannot find file "+propertiesPath,e,)@ } CATCH { -> log.error("IO error on file "+propertiesPath,e,)@ } -> IF { -> packageName=inferPackageName(propertiesPath,outputPath,)@ -> log.verbose("inferred package name: "+packageName,)@ -> sortedKeys=new ArrayList<String>()@ -> LOOP { -> sortedKeys.add((String) key,)@ } -> Collections.sort(sortedKeys,)@ -> keys=sortedKeys.iterator()@ -> data=new StringBuffer()@ -> LOOP { -> key=keys.next()@keys.hasNext() -> data.append("            { \""+escape((String) key,)+"\", \""+escape((String) p.get(key,),)+"\" },\n",)@keys.hasNext() } -> file=new File(outputPath,)@ -> name=file.getName()@ -> dotIndex=name.lastIndexOf('.',)@ } ELSE { -> className=name.substring(0,dotIndex,)@!(dotIndex==-1) -> TRY { -> writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputPath,),"8859_1",),)@ -> format=new MessageFormat(FORMAT,)@ -> writer.write(format.format( new Object[],),)@ } CATCH { -> log.error("IO error writing to file "+outputPath,e,)@ } -> IF { -> TRY { -> writer.flush()@writer!=null } CATCH { -> log.error("IO error flush "+outputPath,e,)@writer!=null } -> TRY { -> writer.close()@writer!=null } CATCH { -> log.error("IO error close "+outputPath,e,)@writer!=null } } -> log.verbose("wrote: "+outputPath,)@ }
results[https://github.com/ceylon/ceylon-compiler!langtools/test/tools/javac/AccessMethods/AccessMethodsLHS.java!ModeFactory!getInstance][SEQ] =  -> it=cipher.blockSizes()@ -> LOOP { -> ok=cipherBlockSize==(Integer) it.next().intValue()@it.hasNext() } -> IF { -> throw new IllegalArgumentException("cipherBlockSize",)@!ok } -> IF { -> result=new ECB(cipher,cipherBlockSize,)@!(!ok) } ELSE { -> IF { -> result=new CTR(cipher,cipherBlockSize,)@!(!ok) } ELSE { -> IF { -> result=new ICM(cipher,cipherBlockSize,)@!(!ok) } ELSE { -> IF { -> result=new OFB(cipher,cipherBlockSize,)@!(!ok) } ELSE { -> IF { -> result=new CBC(cipher,cipherBlockSize,)@!(!ok) } ELSE { -> IF { -> result=new CFB(cipher,cipherBlockSize,)@!(!ok) } ELSE { -> IF { -> result=new EAX(cipher,cipherBlockSize,)@!(!ok) } } } } } } } -> IF { -> throw new InternalError(result.name(),)@result!=null&&!result.selfTest() && !(!ok) }
results[https://github.com/ceylon/ceylon-compiler!langtools/test/tools/javac/enum/FauxSpecialEnum2.java!DelayQueueTest!testIteratorRemove][SEQ] =  -> q=new DelayQueue()@ -> q.add(new PDelay(2,),)@ -> q.add(new PDelay(1,),)@ -> q.add(new PDelay(3,),)@ -> it=q.iterator()@ -> it.next()@ -> it.remove()@ -> it=q.iterator()@ -> assertEquals(it.next(),new PDelay(2,),)@ -> assertEquals(it.next(),new PDelay(3,),)@ -> assertFalse(it.hasNext(),)@
results[https://github.com/ceylon/ceylon-compiler!langtools/test/tools/javac/enum/FauxSpecialEnum2.java!DelayQueueTest!testIterator][SEQ] =  -> q=populatedQueue(SIZE,)@ -> it=q.iterator()@ -> LOOP { -> assertTrue(q.contains(it.next(),),)@it.hasNext() }
results[https://github.com/ceylon/ceylon-compiler!langtools/test/tools/javac/generics/inference/4972073/T4972073.java!ModeStage!blockSizes][SEQ] =  -> IF { -> result=new HashSet()@cachedBlockSizes==null -> it=delegate.blockSizes()@ -> LOOP { -> result.add(it.next(),)@it.hasNext() } -> cachedBlockSizes=Collections.unmodifiableSet(result,)@cachedBlockSizes==null }
results[https://github.com/ceylon/ceylon-compiler!langtools/test/tools/javac/generics/inference/6650759/T6650759d.java!TypeOperatorFactory!meetDeclaredExceptionTypes][SEQ] =  -> bb=(ExceptionHandlerBasicBlock) ir.getControlFlowGraph().getNode(s.getBasicBlockNumber(),)@ -> it=bb.getCaughtExceptionTypes()@ -> t=(TypeReference) it.next()@ -> klass=cha.lookupClass(t,)@ } ELSE { -> result=new ConeType(klass,)@!(klass==null) -> LOOP { -> t=(TypeReference) it.next()@it.hasNext() -> tClass=cha.lookupClass(t,)@it.hasNext() } ELSE { -> result=result.meet(new ConeType(tClass,),)@it.hasNext() && !(tClass==null) }
results[https://github.com/ceylon/ceylon-compiler!langtools/test/tools/javac/processing/model/util/directSupersOfErr/C1.java!Main!run][SEQ] =  -> p=getParser()@ -> classNames=p.parse(args,true,)@ -> postParse(classNames,)@ -> outputFile=(isDirectory)?makeOutputDirectory():makeOutputFile()@ -> IF { -> IF { -> printer=new JniStubPrinter(this,outputFile,isDirectory,force,)@!(outputFile==null) } ELSE { -> printer=new JniIncludePrinter(this,outputFile,isDirectory,force,)@!(outputFile==null) } } ELSE { -> IF { -> printer=new CniStubPrinter(this,outputFile,isDirectory,force,)@!(outputFile==null) } ELSE { -> printer=new CniIncludePrinter(this,outputFile,isDirectory,force,)@!(outputFile==null) } } -> klasses=new HashSet()@!(outputFile==null) -> IF { -> scanDirectory(new File(allDirectory,),klasses,)@!(outputFile==null) && allDirectory!=null } -> LOOP { -> IF { -> klasses.add(new File(classNames[i],),)@!(outputFile==null) && i<classNames.length && classNames[i].endsWith(".class",) } ELSE { -> klasses.add(classNames[i],)@!(classNames[i].endsWith(".class",)) && !(outputFile==null) && i<classNames.length } } -> i=klasses.iterator()@!(outputFile==null) -> results=new HashMap()@!(outputFile==null) -> LOOP { -> item=i.next()@!(outputFile==null) && i.hasNext() -> IF { -> IF { -> System.err.println("[reading file "+item+"]",)@!(outputFile==null) && item instanceof File && i.hasNext() } -> klass=getClass((File) item,)@!(outputFile==null) && item instanceof File && i.hasNext() -> filename=new File(klass.name,)@!(outputFile==null) && item instanceof File && i.hasNext() } ELSE { -> className=(String) item.replace('.','/',)@!(item instanceof File) && !(outputFile==null) && i.hasNext() -> IF { -> System.err.println("[reading class "+className+"]",)@!(item instanceof File) && !(outputFile==null) && i.hasNext() } -> filename=new File(className,)@!(item instanceof File) && !(outputFile==null) && i.hasNext() -> klass=getClass(className,)@!(item instanceof File) && !(outputFile==null) && i.hasNext() } -> results.put(filename,klass,)@!(outputFile==null) && i.hasNext() } -> writeHeaders(results,printer,)@!(outputFile==null)
results[https://github.com/ceylon/ceylon-compiler!langtools/test/tools/javac/processing/model/util/directSupersOfErr/C1.java!Main!writeHeaders][SEQ] =  -> i=klasses.entrySet().iterator()@ -> LOOP { -> e=(Map.Entry) i.next()@i.hasNext() -> file=(File) e.getKey()@i.hasNext() -> klass=(ClassWrapper) e.getValue()@i.hasNext() -> IF { -> System.err.println("[writing "+klass+" as "+file+"]",)@i.hasNext() } -> printer.printClass(file,klass,)@i.hasNext() }
results[https://github.com/dana-i2cat/opennaas-routing-nfv!extensions/bundles/sampleresource/src/main/java/org/opennaas/extensions/sampleresource/capability/example/Global.java!Global!printSet][SEQ] =  -> it=s.iterator()@ -> LOOP { -> System.out.println("set : "+it.next(),)@it.hasNext() }
results[https://github.com/dana-i2cat/opennaas-routing-nfv!extensions/bundles/sampleresource/src/main/java/org/opennaas/extensions/sampleresource/capability/example/VNTMapper.java!VNTMapper!sortRealNode1][SEQ] =  -> connectionNum=new ArrayList()@ -> LOOP { -> connectionNum.add(0,)@ } -> it=selectedRealNodes.iterator()@ -> LOOP { -> realNode=Integer.valueOf(it.next().toString(),)@it.hasNext() -> LOOP { -> IF { -> temp=Integer.valueOf(connectionNum.get(Integer.valueOf(possibleRealNodes.get(i,).toString(),),).toString(),)@i<possibleRealNodes.size() && realNode<Integer.valueOf(possibleRealNodes.get(i,).toString(),)&&net.connections.get(realNode,).get(Integer.valueOf(possibleRealNodes.get(i,).toString(),),).id!=-1 -> connectionNum.remove(Integer.valueOf(possibleRealNodes.get(i,).toString(),),)@i<possibleRealNodes.size() && realNode<Integer.valueOf(possibleRealNodes.get(i,).toString(),)&&net.connections.get(realNode,).get(Integer.valueOf(possibleRealNodes.get(i,).toString(),),).id!=-1 -> connectionNum.add(Integer.valueOf(possibleRealNodes.get(i,).toString(),),temp,)@i<possibleRealNodes.size() && realNode<Integer.valueOf(possibleRealNodes.get(i,).toString(),)&&net.connections.get(realNode,).get(Integer.valueOf(possibleRealNodes.get(i,).toString(),),).id!=-1 } -> IF { -> temp=Integer.valueOf(connectionNum.get(Integer.valueOf(possibleRealNodes.get(i,).toString(),),).toString(),)@realNode>Integer.valueOf(possibleRealNodes.get(i,).toString(),)&&net.connections.get(Integer.valueOf(possibleRealNodes.get(i,).toString(),),).get(realNode,).id!=-1 && i<possibleRealNodes.size() -> connectionNum.remove(Integer.valueOf(possibleRealNodes.get(i,).toString(),),)@realNode>Integer.valueOf(possibleRealNodes.get(i,).toString(),)&&net.connections.get(Integer.valueOf(possibleRealNodes.get(i,).toString(),),).get(realNode,).id!=-1 && i<possibleRealNodes.size() -> connectionNum.add(Integer.valueOf(possibleRealNodes.get(i,).toString(),),temp,)@realNode>Integer.valueOf(possibleRealNodes.get(i,).toString(),)&&net.connections.get(Integer.valueOf(possibleRealNodes.get(i,).toString(),),).get(realNode,).id!=-1 && i<possibleRealNodes.size() } } } -> LOOP { -> tmp=Integer.valueOf(possibleRealNodes.get(i,).toString(),)@i<(int) possibleRealNodes.size() -> LOOP { -> t=Integer.valueOf(possibleRealNodes.get(j-1,).toString(),)@j>0&&Integer.valueOf(connectionNum.get(tmp,).toString(),)>Integer.valueOf(connectionNum.get(Integer.valueOf(possibleRealNodes.get(j-1,).toString(),),).toString(),) && i<(int) possibleRealNodes.size() -> possibleRealNodes.remove(j,)@j>0&&Integer.valueOf(connectionNum.get(tmp,).toString(),)>Integer.valueOf(connectionNum.get(Integer.valueOf(possibleRealNodes.get(j-1,).toString(),),).toString(),) && i<(int) possibleRealNodes.size() -> possibleRealNodes.add(j,t,)@j>0&&Integer.valueOf(connectionNum.get(tmp,).toString(),)>Integer.valueOf(connectionNum.get(Integer.valueOf(possibleRealNodes.get(j-1,).toString(),),).toString(),) && i<(int) possibleRealNodes.size() } -> possibleRealNodes.remove(j,)@i<(int) possibleRealNodes.size() -> possibleRealNodes.add(j,tmp,)@i<(int) possibleRealNodes.size() } -> connectionNum.clear()@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/AxisJavaWSDLGeneratorImpl.java!AxisJavaWSDLGeneratorImpl!processTypeDepXMLForAllLibaries][SEQ] =  -> it=referedTypeLibraries.iterator()@ -> LOOP { -> libName=(String) it.next()@it.hasNext() -> parser.processTypeDepXMLFile(libName,)@it.hasNext() } -> return new HashSet<String>(parser.getReferredTypeLibraries(),)@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/WSDLUtil.java!WSDLUtil!getBindingForWSDL][SEQ] =  -> servicesMap=wsdlDef.getServices()@ -> keySetItr=servicesMap.keySet().iterator()@ -> LOOP { -> serviceQName=(QName) keySetItr.next()@keySetItr.hasNext() } -> service=wsdlDef.getService(serviceQName,)@ -> portsMap=service.getPorts()@ -> keySetItr=portsMap.keySet().iterator()@ -> LOOP { -> portName=(String) keySetItr.next()@keySetItr.hasNext() } -> binding=service.getPort(portName,).getBinding()@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/WSDLUtil.java!WSDLUtil!getFirstServiceName][SEQ] =  -> keySetItr=servicesMap.keySet().iterator()@ -> LOOP { -> serviceQName=(QName) keySetItr.next()@keySetItr.hasNext() } -> IF { -> firstSvcName=serviceQName.getLocalPart()@serviceQName!=null }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/WSDLUtil.java!WSDLUtil!getFirstServiceQName][SEQ] =  -> servicesMap=wsdlDef.getServices()@ -> IF { -> throw new PreProcessFailedException("No services defined in WSDL.",)@servicesMap==null||servicesMap.isEmpty() } -> keySetItr=servicesMap.keySet().iterator()@!(servicesMap==null||servicesMap.isEmpty()) -> LOOP { -> serviceQName=(QName) keySetItr.next()@keySetItr.hasNext() && !(servicesMap==null||servicesMap.isEmpty()) }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/WSDLUtil.java!WSDLUtil!internalGetWSDLOperations][SEQ] =  -> portTypeMap=wsdlDef.getPortTypes()@ -> mapValuesItr=portTypeMap.values().iterator()@ -> wsdlOperations=new HashMap<String, WSDLOperationType>()@ -> binding=getBindingForWSDL(wsdlDef,)@ -> LOOP { -> portType=(PortType) mapValuesItr.next()@mapValuesItr.hasNext() -> operations=portType.getOperations()@mapValuesItr.hasNext() -> LOOP { -> operation=(Operation) operations.get(i,)@mapValuesItr.hasNext() && i<operations.size() -> TRY { -> wsdlOpType=new WSDLOperationType()@mapValuesItr.hasNext() && i<operations.size() -> wsdlOpType.setOperationName(operation.getName(),)@mapValuesItr.hasNext() && i<operations.size() -> IF { -> input=operation.getInput()@operation.getInput()!=null && mapValuesItr.hasNext() && i<operations.size() -> inputMsg=input.getMessage()@operation.getInput()!=null && mapValuesItr.hasNext() && i<operations.size() -> msgPart=getFirstPart(inputMsg.getParts().values(),)@operation.getInput()!=null && mapValuesItr.hasNext() && i<operations.size() -> wsdlMsg=getWSDLMsgType(inputMsg.getQName().getLocalPart(),msgPart,element2SchemaTypeMap,)@operation.getInput()!=null && mapValuesItr.hasNext() && i<operations.size() -> wsdlOpType.setInMessage(wsdlMsg,)@operation.getInput()!=null && mapValuesItr.hasNext() && i<operations.size() } -> IF { -> output=operation.getOutput()@operation.getOutput()!=null && mapValuesItr.hasNext() && i<operations.size() -> outputMsg=output.getMessage()@operation.getOutput()!=null && mapValuesItr.hasNext() && i<operations.size() -> msgPart=getFirstPart(outputMsg.getParts().values(),)@operation.getOutput()!=null && mapValuesItr.hasNext() && i<operations.size() -> wsdlMsg=getWSDLMsgType(outputMsg.getQName().getLocalPart(),msgPart,element2SchemaTypeMap,)@operation.getOutput()!=null && mapValuesItr.hasNext() && i<operations.size() -> wsdlOpType.setOutMessage(wsdlMsg,)@operation.getOutput()!=null && mapValuesItr.hasNext() && i<operations.size() } -> IF { -> map=operation.getFaults()@operation.getFaults()!=null && mapValuesItr.hasNext() && i<operations.size() -> faultName@operation.getFaults()!=null && mapValuesItr.hasNext() && i<operations.size() -> LOOP { -> currFault=map.get(faultName,)@operation.getFaults()!=null && mapValuesItr.hasNext() && map.keySet() && i<operations.size() -> faultMessage=currFault.getMessage()@operation.getFaults()!=null && mapValuesItr.hasNext() && map.keySet() && i<operations.size() -> msgPart=getFirstPart(faultMessage.getParts().values(),)@operation.getFaults()!=null && mapValuesItr.hasNext() && map.keySet() && i<operations.size() -> wsdlMsg=new WSDLMessageType()@operation.getFaults()!=null && mapValuesItr.hasNext() && map.keySet() && i<operations.size() -> faultElementName=msgPart.getElementName().getLocalPart()@operation.getFaults()!=null && mapValuesItr.hasNext() && map.keySet() && i<operations.size() -> faultTypeName=element2SchemaTypeMap.get(faultElementName,)@operation.getFaults()!=null && mapValuesItr.hasNext() && map.keySet() && i<operations.size() -> faultTypeElement=elementQNameMap.get(faultTypeName,)@operation.getFaults()!=null && mapValuesItr.hasNext() && map.keySet() && i<operations.size() -> wsdlMsg.setName(faultTypeElement.getNamespaceURI(),)@operation.getFaults()!=null && mapValuesItr.hasNext() && map.keySet() && i<operations.size() -> wsdlMsg.setElementName(faultElementName,)@operation.getFaults()!=null && mapValuesItr.hasNext() && map.keySet() && i<operations.size() -> wsdlMsg.setElementQname(faultTypeElement,)@operation.getFaults()!=null && mapValuesItr.hasNext() && map.keySet() && i<operations.size() -> wsdlMsg.setSchemaTypeName(faultTypeName,)@operation.getFaults()!=null && mapValuesItr.hasNext() && map.keySet() && i<operations.size() -> wsdlOpType.getFaults().add(wsdlMsg,)@operation.getFaults()!=null && mapValuesItr.hasNext() && map.keySet() && i<operations.size() } } -> wsdlOperations.put(wsdlOpType.getOperationName(),wsdlOpType,)@mapValuesItr.hasNext() && i<operations.size() -> IF { -> bindOper=binding.getBindingOperation(operation.getName(),null,null,)@mapValuesItr.hasNext() && binding!=null && i<operations.size() -> IF { -> bindIp=bindOper.getBindingInput()@bindOper!=null && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> obj@ -> IF { -> LOOP { -> wsdlMsg=new WSDLMessageType()@bindOper!=null && bindIp.getExtensibilityElements() && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> wsdlSoapReqHeader=(SOAPHeader) obj@bindOper!=null && bindIp.getExtensibilityElements() && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> headerRequestElementName=getHeaderElementName(wsdlDef,wsdlSoapReqHeader,)@bindOper!=null && bindIp.getExtensibilityElements() && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> headerRequestType=element2SchemaTypeMap.get(headerRequestElementName.getLocalPart(),)@bindOper!=null && bindIp.getExtensibilityElements() && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> headerRequestTypeElement=elementQNameMap.get(headerRequestType,)@bindOper!=null && bindIp.getExtensibilityElements() && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> wsdlMsg.setName(headerRequestTypeElement.getNamespaceURI(),)@bindOper!=null && bindIp.getExtensibilityElements() && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> wsdlMsg.setElementName(headerRequestElementName.toString(),)@bindOper!=null && bindIp.getExtensibilityElements() && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> wsdlMsg.setSchemaTypeName(headerRequestType,)@bindOper!=null && bindIp.getExtensibilityElements() && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> wsdlOpType.getRequestHeader().add(wsdlMsg,)@bindOper!=null && bindIp.getExtensibilityElements() && mapValuesItr.hasNext() && binding!=null && i<operations.size() } ELSE { -> IF { -> wsdlMsg=new WSDLMessageType()@bindOper!=null && bindIp.getExtensibilityElements() && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> wsdlSoap12ReqHeader=(SOAP12Header) obj@bindOper!=null && bindIp.getExtensibilityElements() && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> headerRequestElementName=getHeaderElementName(wsdlDef,wsdlSoap12ReqHeader,)@bindOper!=null && bindIp.getExtensibilityElements() && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> headerRequestType=element2SchemaTypeMap.get(headerRequestElementName.getLocalPart(),)@bindOper!=null && bindIp.getExtensibilityElements() && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> headerRequestTypeElement=elementQNameMap.get(headerRequestType,)@bindOper!=null && bindIp.getExtensibilityElements() && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> wsdlMsg.setName(headerRequestTypeElement.getNamespaceURI(),)@bindOper!=null && bindIp.getExtensibilityElements() && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> wsdlMsg.setElementName(headerRequestElementName.toString(),)@bindOper!=null && bindIp.getExtensibilityElements() && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> wsdlMsg.setSchemaTypeName(headerRequestType,)@bindOper!=null && bindIp.getExtensibilityElements() && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> wsdlOpType.getRequestHeader().add(wsdlMsg,)@bindOper!=null && bindIp.getExtensibilityElements() && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && i<operations.size() } } } -> bindOp=bindOper.getBindingOutput()@bindOper!=null && mapValuesItr.hasNext() && binding!=null && i<operations.size() -> obj@ -> IF { -> LOOP { -> wsdlMsg=new WSDLMessageType()@bindOper!=null && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> wsdlSoapResHeader=(SOAPHeader) obj@bindOper!=null && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> headerResponseElementName=getHeaderElementName(wsdlDef,wsdlSoapResHeader,)@bindOper!=null && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> headerResponseType=element2SchemaTypeMap.get(headerResponseElementName.getLocalPart(),)@bindOper!=null && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> headerResponseTypeElement=elementQNameMap.get(headerResponseType,)@bindOper!=null && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> wsdlMsg.setName(headerResponseTypeElement.getNamespaceURI(),)@bindOper!=null && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> wsdlMsg.setElementName(headerResponseElementName.toString(),)@bindOper!=null && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> wsdlMsg.setSchemaTypeName(headerResponseType,)@bindOper!=null && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> wsdlOpType.getResponseHeader().add(wsdlMsg,)@bindOper!=null && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() } ELSE { -> IF { -> wsdlMsg=new WSDLMessageType()@bindOper!=null && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> wsdlSoap112ResHeader=(SOAP12Header) obj@bindOper!=null && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> headerResponseElementName=getHeaderElementName(wsdlDef,wsdlSoap112ResHeader,)@bindOper!=null && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> headerResponseType=element2SchemaTypeMap.get(headerResponseElementName.getLocalPart(),)@bindOper!=null && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> headerResponseTypeElement=elementQNameMap.get(headerResponseType,)@bindOper!=null && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> wsdlMsg.setName(headerResponseTypeElement.getNamespaceURI(),)@bindOper!=null && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> wsdlMsg.setElementName(headerResponseElementName.toString(),)@bindOper!=null && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> wsdlMsg.setSchemaTypeName(headerResponseType,)@bindOper!=null && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() -> wsdlOpType.getResponseHeader().add(wsdlMsg,)@bindOper!=null && obj instanceof SOAP12Header && mapValuesItr.hasNext() && binding!=null && bindOp.getExtensibilityElements() && i<operations.size() } } } } } } CATCH { -> getLogger().log(Level.SEVERE,"Exception while parsing WSDL operation : "+operation.getName(),)@mapValuesItr.hasNext() && i<operations.size() } } }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/jaxbri/CodeGenerationUtility.java!!resolveEntity][SEQ] =  -> iter=schemaToInputSourceMap.keySet().iterator()@ -> LOOP { -> key=(XmlSchema) iter.next()@iter.hasNext() -> nsp=key.getTargetNamespace()@iter.hasNext() -> IF { -> returnInputSource=new InputSource(new StringReader(getSchemaAsString(key,),),)@iter.hasNext() && nsp!=null&&nsp.equals(publicId,) -> existingInputSource=(InputSource) schemaToInputSourceMap.get(key,)@iter.hasNext() && nsp!=null&&nsp.equals(publicId,) -> returnInputSource.setSystemId(existingInputSource.getSystemId(),)@iter.hasNext() && nsp!=null&&nsp.equals(publicId,) -> returnInputSource.setPublicId(existingInputSource.getPublicId(),)@iter.hasNext() && nsp!=null&&nsp.equals(publicId,) } } -> IF { -> IF { -> returnInputSource=new InputSource(systemId,)@systemId!=null && returnInputSource==null -> returnInputSource.setSystemId(systemId,)@systemId!=null && returnInputSource==null } } -> IF { -> IF { -> IF { -> url=new URL(publicId,)@!publicIDToStringMap.containsKey(publicId,) && publicId!=null -> bufferedReader=new BufferedReader(new InputStreamReader(url.openStream(),),)@!publicIDToStringMap.containsKey(publicId,) && publicId!=null -> stringBuffer=new StringBuffer()@!publicIDToStringMap.containsKey(publicId,) && publicId!=null -> LOOP { -> stringBuffer.append(str,)@str=bufferedReader.readLine()!=null && !publicIDToStringMap.containsKey(publicId,) && publicId!=null } -> publicIDToStringMap.put(publicId,stringBuffer,)@!publicIDToStringMap.containsKey(publicId,) && publicId!=null } -> schemaString=publicIDToStringMap.get(publicId,).toString()@returnInputSource==null && publicId!=null -> returnInputSource=new InputSource(new StringReader(schemaString,),)@returnInputSource==null && publicId!=null -> returnInputSource.setPublicId(publicId,)@returnInputSource==null && publicId!=null -> returnInputSource.setSystemId(publicId,)@returnInputSource==null && publicId!=null } }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/jaxbri/CodeGenerationUtility.java!CodeGenerationUtility!processSchemas][SEQ] =  -> TRY { -> IF { -> return new DefaultTypeMapper()@schemas==null||schemas.isEmpty() } -> schemaToInputSourceMap=new HashMap()@!(schemas==null||schemas.isEmpty()) -> mapper=new JavaTypeMapper()@!(schemas==null||schemas.isEmpty()) -> baseURI=cgconfig.getBaseURI()@!(schemas==null||schemas.isEmpty()) -> IF { -> baseURI=baseURI+"/"@!baseURI.endsWith("/",) && !(schemas==null||schemas.isEmpty()) } -> i=0@!(schemas==null||schemas.isEmpty()) -> LOOP { -> schema=(XmlSchema) schemas.get(i,)@!(schemas==null||schemas.isEmpty()) && i<schemas.size() -> inputSource=new InputSource(new StringReader(getSchemaAsString(schema,),),)@!(schemas==null||schemas.isEmpty()) && i<schemas.size() -> inputSource.setSystemId(baseURI+"xsd"+i+".xsd",)@!(schemas==null||schemas.isEmpty()) && i<schemas.size() -> inputSource.setPublicId(schema.getTargetNamespace(),)@!(schemas==null||schemas.isEmpty()) && i<schemas.size() -> schemaToInputSourceMap.put(schema,inputSource,)@!(schemas==null||schemas.isEmpty()) && i<schemas.size() -> ++i@!(schemas==null||schemas.isEmpty()) && i<schemas.size() } -> outputDir=new File(cgconfig.getOutputLocation(),"src",)@!(schemas==null||schemas.isEmpty()) -> createDir(outputDir,)@!(schemas==null||schemas.isEmpty()) -> nsMap=cgconfig.getUri2PackageNameMap()@!(schemas==null||schemas.isEmpty()) -> resolver=new EntityResolver()@!(schemas==null||schemas.isEmpty()) -> properties=cgconfig.getProperties()@!(schemas==null||schemas.isEmpty()) -> bindingFileName=(String) properties.get(BINDING_FILE_NAME,)@!(schemas==null||schemas.isEmpty()) -> schemaIter=schemaToInputSourceMap.keySet().iterator()@!(schemas==null||schemas.isEmpty()) -> LOOP { -> sc=XJC.createSchemaCompiler()@schemaIter.hasNext() && !(schemas==null||schemas.isEmpty()) -> IF { -> IF { -> scanEpisodeFile(new File(bindingFileName,),sc,)@!(schemaIter.hasNext()) && bindingFileName!=null && !(schemas==null||schemas.isEmpty()) && bindingFileName.endsWith(".jar",) } ELSE { -> inputSoruce=new InputSource(new FileInputStream(bindingFileName,),)@!(schemaIter.hasNext()) && bindingFileName!=null && !(schemas==null||schemas.isEmpty()) && !(bindingFileName.endsWith(".jar",)) -> inputSoruce.setSystemId(new File(bindingFileName,).toURI().toString(),)@!(schemaIter.hasNext()) && bindingFileName!=null && !(schemas==null||schemas.isEmpty()) && !(bindingFileName.endsWith(".jar",)) -> sc.getOptions().addBindFile(inputSoruce,)@!(schemaIter.hasNext()) && bindingFileName!=null && !(schemas==null||schemas.isEmpty()) && !(bindingFileName.endsWith(".jar",)) } } -> key=(XmlSchema) schemaIter.next()@schemaIter.hasNext() && !(schemas==null||schemas.isEmpty()) -> IF { -> iterator=nsMap.entrySet().iterator()@!(schemaIter.hasNext()) && nsMap!=null && !(schemas==null||schemas.isEmpty()) -> LOOP { -> entry=(Map.Entry) iterator.next()@!(schemaIter.hasNext()) && iterator.hasNext() && nsMap!=null && !(schemas==null||schemas.isEmpty()) -> namespace=(String) entry.getKey()@!(schemaIter.hasNext()) && iterator.hasNext() && nsMap!=null && !(schemas==null||schemas.isEmpty()) -> pkg=(String) nsMap.get(namespace,)@!(schemaIter.hasNext()) && iterator.hasNext() && nsMap!=null && !(schemas==null||schemas.isEmpty()) -> registerNamespace(sc,namespace,pkg,)@!(schemaIter.hasNext()) && iterator.hasNext() && nsMap!=null && !(schemas==null||schemas.isEmpty()) } } -> sc.setEntityResolver(resolver,)@!(schemaIter.hasNext()) && !(schemas==null||schemas.isEmpty()) -> sc.setErrorListener(new ErrorListener(),)@!(schemaIter.hasNext()) && !(schemas==null||schemas.isEmpty()) -> sc.parseSchema((InputSource) schemaToInputSourceMap.get(key,),)@schemaIter.hasNext() && !(schemas==null||schemas.isEmpty()) -> sc.getOptions().addGrammar((InputSource) schemaToInputSourceMap.get(key,),)@schemaIter.hasNext() && !(schemas==null||schemas.isEmpty()) -> property@!(schemaIter.hasNext()) && !(schemas==null||schemas.isEmpty()) -> LOOP { -> propertyName=(String) property@!(schemaIter.hasNext()) && !(schemas==null||schemas.isEmpty()) -> IF { -> propertyValue=(String) properties.get(property,)@!(schemaIter.hasNext()) && properties.keySet() && propertyName.startsWith("X",) && !(schemas==null||schemas.isEmpty()) -> IF { -> args= new String[]@!(schemaIter.hasNext()) && properties.keySet() && propertyValue!=null && propertyName.startsWith("X",) && !(schemas==null||schemas.isEmpty()) } ELSE { -> args= new String[]@!(schemaIter.hasNext()) && properties.keySet() && propertyName.startsWith("X",) && !(schemas==null||schemas.isEmpty()) && !(propertyValue!=null) } -> sc.getOptions().parseArguments(args,)@properties.keySet() && schemaIter.hasNext() && propertyName.startsWith("X",) && !(schemas==null||schemas.isEmpty()) } } -> jaxbModel=sc.bind()@schemaIter.hasNext() && !(schemas==null||schemas.isEmpty()) -> IF { -> throw new RuntimeException("Unable to generate code using jaxbri",)@jaxbModel==null && schemaIter.hasNext() && !(schemas==null||schemas.isEmpty()) } -> sortGeneratedObjectFactoryClasses(jaxbModel,)@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> codeModel=jaxbModel.generateCode(null,null,)@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> writer=new FileCodeWriter(outputDir,)@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> codeModel.build(writer,)@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> mappings=jaxbModel.getMappings()@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> iter=mappings.iterator()@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> LOOP { -> mapping=(Mapping) iter.next()@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && iter.hasNext() -> qn=mapping.getElement()@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && iter.hasNext() -> typeName=mapping.getType().getTypeClass().fullName()@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && iter.hasNext() -> mapper.addTypeMappingName(qn,typeName,)@schemaIter.hasNext() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && iter.hasNext() } -> IF { -> axisServices=cgconfig.getAxisServices()@!(schemaIter.hasNext()) && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> servicesIter=axisServices.iterator()@!(schemaIter.hasNext()) && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> LOOP { -> axisService=(AxisService) servicesIter.next()@!(schemaIter.hasNext()) && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> operations=axisService.getOperations()@!(schemaIter.hasNext()) && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> LOOP { -> op=(AxisOperation) operations.next()@!(schemaIter.hasNext()) && operations.hasNext() && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> IF { -> message=op.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE,)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && !(schemaIter.hasNext()) && operations.hasNext() && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> IF { -> mapping=jaxbModel.get(message.getElementQName(),)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> elementProperties=mapping.getWrapperStyleDrilldown()@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> j=0@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && servicesIter.hasNext() -> LOOP { -> elementProperty=(Property) elementProperties.get(j,)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() -> partQName=WSDLUtil.getPartQName(op.getName().getLocalPart(),WSDLConstants.INPUT_PART_QNAME_SUFFIX,elementProperty.elementName().getLocalPart(),)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() -> fullJaveName=elementProperty.type().fullName()@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() -> IF { -> fullJaveName=fullJaveName.concat("[]",)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && elementProperty.type().isArray() && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() } -> mapper.addTypeMappingName(partQName,fullJaveName,)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() -> IF { -> mapper.addTypeMappingStatus(partQName,Boolean.TRUE,)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && elementProperty.type().isPrimitive() && servicesIter.hasNext() } -> IF { -> mapper.addTypeMappingStatus(partQName,Constants.ARRAY_TYPE,)@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && elementProperty.type().isArray() && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() } -> ++j@WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern(),) && operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() && servicesIter.hasNext() } } } -> IF { -> message=op.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE,)@!(schemaIter.hasNext()) && operations.hasNext() && !cgconfig.isParametersWrapped() && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && servicesIter.hasNext() -> IF { -> mapping=jaxbModel.get(message.getElementQName(),)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && servicesIter.hasNext() -> elementProperties=mapping.getWrapperStyleDrilldown()@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && servicesIter.hasNext() -> j=0@!(schemaIter.hasNext()) && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) -> LOOP { -> elementProperty=(Property) elementProperties.get(j,)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && servicesIter.hasNext() -> partQName=WSDLUtil.getPartQName(op.getName().getLocalPart(),WSDLConstants.OUTPUT_PART_QNAME_SUFFIX,elementProperty.elementName().getLocalPart(),)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && servicesIter.hasNext() -> fullJaveName=elementProperty.type().fullName()@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && servicesIter.hasNext() -> IF { -> fullJaveName=fullJaveName.concat("[]",)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && elementProperty.type().isArray() && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && servicesIter.hasNext() } -> mapper.addTypeMappingName(partQName,fullJaveName,)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && servicesIter.hasNext() -> IF { -> mapper.addTypeMappingStatus(partQName,Boolean.TRUE,)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && elementProperty.type().isPrimitive() && servicesIter.hasNext() } -> IF { -> mapper.addTypeMappingStatus(partQName,Constants.ARRAY_TYPE,)@operations.hasNext() && !cgconfig.isParametersWrapped() && schemaIter.hasNext() && message!=null&&message.getParameter(Constants.UNWRAPPED_KEY,)!=null && !(jaxbModel==null) && elementProperty.type().isArray() && !(schemas==null||schemas.isEmpty()) && WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern(),) && j<elementProperties.size() && servicesIter.hasNext() } -> ++j@!(schemaIter.hasNext()) && !(jaxbModel==null) && !(schemas==null||schemas.isEmpty()) && j<elementProperties.size() } } } } } } } -> return mapper@!(schemaIter.hasNext()) && !(schemas==null||schemas.isEmpty()) } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/jaxbri/JAXBRICustomExtension.java!JAXBRICustomExtension!engage][SEQ] =  -> IF { -> return @testFallThrough(configuration.getDatabindingType(),) } -> TRY { -> TRY { } CATCH { } -> TRY { -> clazz=JAXBRICustomExtension.class.getClassLoader().loadClass(JAXB_RI_UTILITY_CLASS,)@!(testFallThrough(configuration.getDatabindingType(),)) } CATCH { } -> method=clazz.getMethod(JAXB_RI_PROCESS_METHOD, new Class[],)@!(testFallThrough(configuration.getDatabindingType(),)) -> schemas=new ArrayList()@!(testFallThrough(configuration.getDatabindingType(),)) -> axisServices=configuration.getAxisServices()@!(testFallThrough(configuration.getDatabindingType(),)) -> iter=axisServices.iterator()@!(testFallThrough(configuration.getDatabindingType(),)) -> LOOP { -> axisService=(AxisService) iter.next()@!(testFallThrough(configuration.getDatabindingType(),)) && iter.hasNext() -> schemas.addAll(axisService.getSchema(),)@!(testFallThrough(configuration.getDatabindingType(),)) && iter.hasNext() } -> additionalSchemas=loadAdditionalSchemas()@!(testFallThrough(configuration.getDatabindingType(),)) -> mapper=(TypeMapper) method.invoke(null, new Object[],)@!(testFallThrough(configuration.getDatabindingType(),)) -> configuration.setTypeMapper(mapper,)@!(testFallThrough(configuration.getDatabindingType(),)) -> IF { } ELSE { } }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/wsdl/parser/schema/Parser.java!Parser!getAllSchemaTypes][SEQ] =  -> TRY { -> schemas=new ArrayList()@ -> IF { -> loc=new DefaultWSDLLocatorImpl((String) null,(String) null,null,)@loc==null } -> Parser.getTypesSchemas(def,schemas,loc,)@ -> si=schemas.iterator()@ -> LOOP { -> ts=(Schema) si.next()@si.hasNext() -> IF { -> types=ts.getTypes()@ts!=null && si.hasNext() -> ti=types.iterator()@ts!=null && si.hasNext() -> LOOP { -> st=(SchemaType) ti.next()@ts!=null && ti.hasNext() && si.hasNext() -> schemaTypes.add(st,)@ts!=null && ti.hasNext() && si.hasNext() } } } }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/wsdl/parser/schema/Parser.java!Parser!getTypeMappings][SEQ] =  -> IF { -> loc=new DefaultWSDLLocatorImpl((String) null,(String) null,null,)@loc==null } -> schemaList=new ArrayList()@ -> getTypesSchemas(def,schemaList,loc,)@ -> IF { -> populateWithStandardMappings(table,WSDLParserConstants.NS_URI_1999_SCHEMA_XSD,true,)@ -> populateWithStandardMappings(table,WSDLParserConstants.NS_URI_2000_SCHEMA_XSD,false,)@ -> populateWithStandardMappings(table,WSDLParserConstants.NS_URI_2001_SCHEMA_XSD,false,)@ } ELSE { -> standards=new Hashtable()@ -> populateWithStandardMappings(standards,WSDLParserConstants.NS_URI_1999_SCHEMA_XSD,true,)@ -> populateWithStandardMappings(standards,WSDLParserConstants.NS_URI_2000_SCHEMA_XSD,false,)@ -> populateWithStandardMappings(standards,WSDLParserConstants.NS_URI_2001_SCHEMA_XSD,false,)@ } -> arrays=new ArrayList()@ -> elements=new ArrayList()@ -> si=schemaList.iterator()@ -> LOOP { -> ts=(Schema) si.next()@si.hasNext() -> IF { -> types=ts.getTypes()@ts!=null && si.hasNext() -> ti=types.iterator()@ts!=null && si.hasNext() -> LOOP { -> st=(SchemaType) ti.next()@ts!=null && ti.hasNext() && si.hasNext() -> typeName=st.getTypeName()@ts!=null && ti.hasNext() && si.hasNext() -> IF { -> arrays.add(st,)@st.isArray() && ts!=null && ti.hasNext() && si.hasNext() } ELSE { -> IF { -> baseType=(ElementType) st.getElementType()@st instanceof ElementType && ts!=null && !(st.isArray()) && ti.hasNext() && si.hasNext() -> IF { -> IF { -> wrapperClass=getWrapperClassName(baseType,)@(ElementType) st.isNillable() && st instanceof ElementType && ts!=null && baseType!=null && !(st.isArray()) && ti.hasNext() && si.hasNext() -> IF { -> table.put(typeName,wrapperClass,)@(ElementType) st.isNillable() && wrapperClass!=null && st instanceof ElementType && ts!=null && baseType!=null && !(st.isArray()) && ti.hasNext() && si.hasNext() } } -> baseClassName=(String) table.get(baseType,)@st instanceof ElementType && ts!=null && baseType!=null && !(st.isArray()) && ti.hasNext() && si.hasNext() -> IF { -> baseClassName=(String) standards.get(baseType,)@st instanceof ElementType && ts!=null && baseClassName==null&&!includeStandardMappings && baseType!=null && !(st.isArray()) && ti.hasNext() && si.hasNext() } -> IF { -> table.put(typeName,baseClassName,)@st instanceof ElementType && ts!=null && baseType!=null && !(st.isArray()) && ti.hasNext() && baseClassName!=null && si.hasNext() } ELSE { -> elements.add(st,)@st instanceof ElementType && !(baseClassName!=null) && ts!=null && baseType!=null && !(st.isArray()) && ti.hasNext() && si.hasNext() } } ELSE { -> className=resolveClassName(typeName,)@!(baseType!=null) && st instanceof ElementType && ts!=null && !(st.isArray()) && ti.hasNext() && si.hasNext() -> classNameBuilder=new StringBuilder(className,)@!(baseType!=null) && st instanceof ElementType && ts!=null && !(st.isArray()) && ti.hasNext() && si.hasNext() -> classNameBuilder.append("Element",)@!(baseType!=null) && st instanceof ElementType && ts!=null && !(st.isArray()) && ti.hasNext() && si.hasNext() -> IF { -> table.put(typeName,classNameBuilder.toString(),)@!(baseType!=null) && st instanceof ElementType && className!=null && ts!=null && !(st.isArray()) && ti.hasNext() && si.hasNext() } } } ELSE { -> className=resolveClassName(typeName,)@ts!=null && !(st.isArray()) && !(st instanceof ElementType) && ti.hasNext() && si.hasNext() -> IF { -> table.put(typeName,className,)@className!=null && ts!=null && !(st.isArray()) && !(st instanceof ElementType) && ti.hasNext() && si.hasNext() } } } } } } -> multiArrays=new ArrayList()@ -> ai=arrays.iterator()@ -> LOOP { -> st=(SchemaType) ai.next()@ai.hasNext() -> theType=st.getTypeName()@ai.hasNext() -> arrayType=st.getArrayType()@ai.hasNext() -> IF { -> baseClass=(String) table.get(arrayType,)@arrayType!=null&&theType!=null && ai.hasNext() -> IF { -> baseClass=(String) standards.get(arrayType,)@baseClass==null&&standards!=null && arrayType!=null&&theType!=null && ai.hasNext() } -> IF { -> lp=arrayType.getLocalPart()@arrayType!=null&&theType!=null && baseClass==null && ai.hasNext() -> IF { -> multiArrays.add(st,)@arrayType!=null&&theType!=null && baseClass==null && ai.hasNext() && lp!=null&&lp.startsWith("ArrayOf",) } } -> IF { -> IF { -> table.put(theType,extraDims+"[I",)@baseClass!=null && baseClass.equals("int",) && arrayType!=null&&theType!=null && ai.hasNext() } ELSE { -> IF { -> table.put(theType,extraDims+"[F",)@!(baseClass.equals("int",)) && baseClass!=null && baseClass.equals("float",) && arrayType!=null&&theType!=null && ai.hasNext() } ELSE { -> IF { -> table.put(theType,extraDims+"[J",)@!(baseClass.equals("int",)) && baseClass!=null && !(baseClass.equals("float",)) && baseClass.equals("long",) && arrayType!=null&&theType!=null && ai.hasNext() } ELSE { -> IF { -> table.put(theType,extraDims+"[D",)@!(baseClass.equals("int",)) && !(baseClass.equals("long",)) && baseClass!=null && !(baseClass.equals("float",)) && arrayType!=null&&theType!=null && ai.hasNext() && baseClass.equals("double",) } ELSE { -> IF { -> table.put(theType,extraDims+"[Z",)@!(baseClass.equals("int",)) && !(baseClass.equals("long",)) && baseClass!=null && !(baseClass.equals("float",)) && !(baseClass.equals("double",)) && baseClass.equals("boolean",) && arrayType!=null&&theType!=null && ai.hasNext() } ELSE { -> IF { -> table.put(theType,extraDims+"[B",)@!(baseClass.equals("int",)) && !(baseClass.equals("long",)) && baseClass!=null && !(baseClass.equals("float",)) && !(baseClass.equals("double",)) && !(baseClass.equals("boolean",)) && arrayType!=null&&theType!=null && ai.hasNext() && baseClass.equals("byte",) } ELSE { -> IF { -> table.put(theType,extraDims+"[S",)@!(baseClass.equals("int",)) && !(baseClass.equals("long",)) && baseClass!=null && !(baseClass.equals("byte",)) && !(baseClass.equals("float",)) && !(baseClass.equals("double",)) && !(baseClass.equals("boolean",)) && arrayType!=null&&theType!=null && ai.hasNext() && baseClass.equals("short",) } ELSE { -> IF { -> table.put(theType,arrayOfBase,)@!(baseClass.equals("int",)) && !(baseClass.equals("long",)) && baseClass!=null && !(baseClass.equals("byte",)) && !(baseClass.equals("float",)) && !(baseClass.equals("short",)) && !(baseClass.equals("double",)) && baseClass.startsWith("[",) && !(baseClass.equals("boolean",)) && arrayType!=null&&theType!=null && ai.hasNext() } ELSE { -> table.put(theType,arrayOfBase,)@!(baseClass.equals("int",)) && !(baseClass.equals("long",)) && baseClass!=null && !(baseClass.equals("byte",)) && !(baseClass.equals("float",)) && !(baseClass.startsWith("[",)) && !(baseClass.equals("short",)) && !(baseClass.equals("double",)) && !(baseClass.equals("boolean",)) && arrayType!=null&&theType!=null && ai.hasNext() } } } } } } } } } } } -> mi=multiArrays.iterator()@ -> LOOP { -> st=(SchemaType) mi.next()@mi.hasNext() -> theType=st.getTypeName()@mi.hasNext() -> arrayType=st.getArrayType()@mi.hasNext() -> IF { -> baseClass=(String) table.get(arrayType,)@mi.hasNext() && arrayType!=null&&theType!=null -> IF { -> IF { -> table.put(theType,arrayOfBase,)@baseClass!=null && mi.hasNext() && baseClass.startsWith("[",) && arrayType!=null&&theType!=null } } } } -> ei=elements.iterator()@ -> LOOP { -> st=(SchemaType) ei.next()@ei.hasNext() -> theType=st.getTypeName()@ei.hasNext() -> IF { -> baseType=(ElementType) st.getElementType()@st instanceof ElementType && ei.hasNext() } -> IF { -> baseClassName=(String) table.get(baseType,)@ei.hasNext() && baseType!=null -> IF { -> table.put(theType,baseClassName,)@ei.hasNext() && baseType!=null && baseClassName!=null } } }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/external/wsdl/parser/schema/Parser.java!Parser!getTypesSchemas][SEQ] =  -> types=def.getTypes()@ -> IF { -> extEleIt=types.getExtensibilityElements().iterator()@types!=null -> LOOP { -> nextEl=extEleIt.next()@extEleIt.hasNext() && types!=null -> IF { -> typesElement=(javax.wsdl.extensions.schema.Schema) nextEl@extEleIt.hasNext() && types!=null && nextEl instanceof javax.wsdl.extensions.schema.Schema -> schemaEl=typesElement.getElement()@extEleIt.hasNext() && types!=null && nextEl instanceof javax.wsdl.extensions.schema.Schema } ELSE { -> IF { -> typesElement=(UnknownExtensibilityElement) nextEl@extEleIt.hasNext() && !(nextEl instanceof javax.wsdl.extensions.schema.Schema) && types!=null && nextEl instanceof UnknownExtensibilityElement -> schemaEl=typesElement.getElement()@extEleIt.hasNext() && !(nextEl instanceof javax.wsdl.extensions.schema.Schema) && types!=null && nextEl instanceof UnknownExtensibilityElement } } -> IF { -> sc=new Schema(schemaEl,)@extEleIt.hasNext() && types!=null && QNameUtils.matches(schema2001,schemaEl,)||QNameUtils.matches(schema2000,schemaEl,)||QNameUtils.matches(schema1999,schemaEl,) -> schemas.add(sc,)@extEleIt.hasNext() && types!=null && QNameUtils.matches(schema2001,schemaEl,)||QNameUtils.matches(schema2000,schemaEl,)||QNameUtils.matches(schema1999,schemaEl,) -> docBase=def.getDocumentBaseURI()@extEleIt.hasNext() && types!=null && QNameUtils.matches(schema2001,schemaEl,)||QNameUtils.matches(schema2000,schemaEl,)||QNameUtils.matches(schema1999,schemaEl,) -> IF { -> importsAndIncludes=sc.getImportsAndIncludes()@extEleIt.hasNext() && types!=null && QNameUtils.matches(schema2001,schemaEl,)||QNameUtils.matches(schema2000,schemaEl,)||QNameUtils.matches(schema1999,schemaEl,) && docBase!=null&&loc!=null -> LOOP { -> getImportedSchemas(docBase,sl,loc,schemas,)@extEleIt.hasNext() && i<importsAndIncludes.length && types!=null && QNameUtils.matches(schema2001,schemaEl,)||QNameUtils.matches(schema2000,schemaEl,)||QNameUtils.matches(schema1999,schemaEl,) && docBase!=null&&loc!=null } } } } } -> imports=def.getImports()@ -> IF { -> valueIterator=imports.values().iterator()@imports!=null -> LOOP { -> importList=(List) valueIterator.next()@imports!=null && valueIterator.hasNext() -> IF { -> importIterator=importList.iterator()@importList!=null && imports!=null && valueIterator.hasNext() -> LOOP { -> tempImport=(Import) importIterator.next()@importList!=null && imports!=null && importIterator.hasNext() && valueIterator.hasNext() -> IF { -> importedDef=tempImport.getDefinition()@importList!=null && imports!=null && importIterator.hasNext() && valueIterator.hasNext() && tempImport!=null -> IF { -> getTypesSchemas(importedDef,schemas,loc,)@importList!=null && imports!=null && importIterator.hasNext() && valueIterator.hasNext() && tempImport!=null && importedDef!=null } ELSE { -> baseLoc=def.getDocumentBaseURI()@importList!=null && imports!=null && !(importedDef!=null) && importIterator.hasNext() && valueIterator.hasNext() && tempImport!=null -> importLoc=tempImport.getLocationURI()@importList!=null && imports!=null && !(importedDef!=null) && importIterator.hasNext() && valueIterator.hasNext() && tempImport!=null -> IF { -> getImportedSchemas(baseLoc,importLoc,loc,schemas,)@importList!=null && imports!=null && !(importedDef!=null) && importIterator.hasNext() && valueIterator.hasNext() && baseLoc!=null&&importLoc!=null&&loc!=null && tempImport!=null } } } } } } }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/util/CodeGenConfigUtil.java!CodeGenConfigUtil!addPackageDetailsToTemplateClasses][SEQ] =  -> newTemplateContent=new String(templateContent,)@ -> mapIterator=classPackageMap.entrySet().iterator()@ -> LOOP { -> entry=(Map.Entry<String, String>) mapIterator.next()@mapIterator.hasNext() -> className="@@"+entry.getKey()+"@@"@mapIterator.hasNext() -> IF { -> newTemplateContent=newTemplateContent.replaceAll(className,entry.getValue(),)@mapIterator.hasNext() && newTemplateContent.contains(className,) } }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/library/builders/CodeGenTypeLibraryGenerator.java!CodeGenTypeLibraryGenerator!isTypeLibraryJar][SEQ] =  -> filePathToCheck=file.getPath()@ -> filePathToCheck=TypeLibraryUtilities.normalizeFilePath(filePathToCheck,)@ -> IF { -> return false@!filePathToCheck.toLowerCase().endsWith(".jar",) } -> it=typeLibs.iterator()@!(!filePathToCheck.toLowerCase().endsWith(".jar",)) -> LOOP { -> typeLibName=(String) it.next()@it.hasNext() && !(!filePathToCheck.toLowerCase().endsWith(".jar",)) -> IF { -> return true@it.hasNext() && filePathToCheck.contains(File.separatorChar+typeLibName+".jar",) && !(!filePathToCheck.toLowerCase().endsWith(".jar",)) } ELSE { -> IF { -> return true@it.hasNext() && filePathToCheck.contains(File.separatorChar+typeLibName+"-",)&&filePathToCheck.endsWith(".jar",) && !(!filePathToCheck.toLowerCase().endsWith(".jar",)) && !(filePathToCheck.contains(File.separatorChar+typeLibName+".jar",)) } ELSE { -> fileName=file.getName()@it.hasNext() && !(filePathToCheck.contains(File.separatorChar+typeLibName+"-",)&&filePathToCheck.endsWith(".jar",)) && !(!filePathToCheck.toLowerCase().endsWith(".jar",)) && !(filePathToCheck.contains(File.separatorChar+typeLibName+".jar",)) -> IF { -> return true@it.hasNext() && !(filePathToCheck.contains(File.separatorChar+typeLibName+"-",)&&filePathToCheck.endsWith(".jar",)) && fileName.toLowerCase().equals(typeLibName+".jar",) && !(!filePathToCheck.toLowerCase().endsWith(".jar",)) && !(filePathToCheck.contains(File.separatorChar+typeLibName+".jar",)) } } } }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/library/builders/CodeGenTypeLibraryGenerator.java!CodeGenTypeLibraryGenerator!populateClasspathForDepJars][SEQ] =  -> sb=new StringBuilder()@ -> IF { -> it=depJars.iterator()@depJars!=null&&depJars.size()!=0 -> LOOP { -> dependentJarPath=(String) it.next()@it.hasNext() && depJars!=null&&depJars.size()!=0 -> sb.append("-classpath",).append(",",).append(dependentJarPath,).append(",",)@it.hasNext() && depJars!=null&&depJars.size()!=0 } } -> return sb.toString()@
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/AbstractServiceGeneratorTestCase.java!AbstractServiceGeneratorTestCase!assertXML][SEQ] =  -> TRY { -> d=new Diff(readFileAsString(expectedPath,),readFileAsString(actualPath,),)@ -> IF { -> d.overrideElementQualifier(new ElementNameAndAttributeQualifier(),)@ } ELSE { -> d.overrideElementQualifier(new ElementNameAndAttributeQualifier(attNames,),)@!(attNames==null) } -> dd=new DetailedDiff(d,)@ -> l=dd.getAllDifferences()@ -> i=l.iterator()@ -> LOOP { -> di=(Difference) i.next()@i.hasNext() -> System.err.println(di,)@i.hasNext() } -> Assert.assertTrue(d.similar(),)@ } CATCH { } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!codegen/codegen-tools/src/test/java/org/ebayopensource/turmeric/tools/codegen/proto/SchemaParserTests.java!SchemaParserTests!testCurrenyRateServiceWsdl][SEQ] =  -> wsdlPath=getCodegenDataFileInput("CurrencyRateService.wsdl",).getAbsolutePath()@ -> def=WSDLUtil.getWSDLDefinition(wsdlPath,)@ -> schemas=new ArrayList<Schema>()@ -> types=def.getTypes()@ -> IF { -> extEleIt=types.getExtensibilityElements().iterator()@types!=null -> LOOP { -> nextEl=extEleIt.next()@extEleIt.hasNext() && types!=null -> IF { -> typesElement=(javax.wsdl.extensions.schema.Schema) nextEl@extEleIt.hasNext() && types!=null && nextEl instanceof javax.wsdl.extensions.schema.Schema -> schemaEl=typesElement.getElement()@extEleIt.hasNext() && types!=null && nextEl instanceof javax.wsdl.extensions.schema.Schema } ELSE { -> IF { -> typesElement=(UnknownExtensibilityElement) nextEl@extEleIt.hasNext() && types!=null && !(nextEl instanceof javax.wsdl.extensions.schema.Schema) && nextEl instanceof UnknownExtensibilityElement -> schemaEl=typesElement.getElement()@extEleIt.hasNext() && types!=null && !(nextEl instanceof javax.wsdl.extensions.schema.Schema) && nextEl instanceof UnknownExtensibilityElement } } -> IF { -> sc=new Schema(schemaEl,)@extEleIt.hasNext() && types!=null && QNameUtils.matches(schema2001,schemaEl,)||QNameUtils.matches(schema2000,schemaEl,)||QNameUtils.matches(schema1999,schemaEl,) -> schemas.add(sc,)@extEleIt.hasNext() && types!=null && QNameUtils.matches(schema2001,schemaEl,)||QNameUtils.matches(schema2000,schemaEl,)||QNameUtils.matches(schema1999,schemaEl,) } } }
results[https://github.com/ebayopensource/turmeric-runtime!integration-tests/AdvertisingUniqueIDServiceV1Consumer/src/test/java/org/ebayopensource/turmeric/qajunittests/advertisinguniqueidservicev1/utils/HttpTestClient.java!HttpTestClient!getResponseDB][SEQ] =  -> itr=queryParams.entrySet().iterator()@ -> LOOP { -> entry=(Map.Entry) itr.next()@itr.hasNext() -> key=entry.getKey().toString()@itr.hasNext() -> value=entry.getValue().toString()@itr.hasNext() -> request.addHeader(key,value,)@itr.hasNext() -> IF { -> request.setContentType("text/xml",)@key.equals("X-EBAY-SOA-REQUEST-DATA-FORMAT",)&&value.equals("XML",) } } -> IF { -> request.setMethod(Request.POST,)@ } ELSE { -> request.setMethod(Request.GET,)@ } -> request.setRawData(body.getBytes(),)@ -> TRY { -> response=m_client.invoke(request,)@ -> return response@ } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!integration-tests/AdvertisingUniqueIDServiceV1Consumer/src/test/java/org/ebayopensource/turmeric/qajunittests/advertisinguniqueidservicev1/utils/HttpTestClient.java!HttpTestClient!getResponse][SEQ] =  -> itr=queryParams.entrySet().iterator()@ -> LOOP { -> entry=(Map.Entry) itr.next()@itr.hasNext() -> request.addParameter(entry.getKey().toString(),entry.getValue().toString(),)@itr.hasNext() } -> TRY { -> response=m_client.invoke(request,)@ -> IF { -> System.out.println(response.getRequestStatus(),)@response.getRequestStatus()==HttpStatusEnum.SUCCESS -> return response.getBody()@response.getRequestStatus()==HttpStatusEnum.SUCCESS } ELSE { -> IF { -> return response.getBody()@response.getRequestStatus()==HttpStatusEnum.HTTP_INTERNAL_ERROR && !(response.getRequestStatus()==HttpStatusEnum.SUCCESS) } ELSE { -> return response.getRequestStatus().getName()@!(response.getRequestStatus()==HttpStatusEnum.HTTP_INTERNAL_ERROR) && !(response.getRequestStatus()==HttpStatusEnum.SUCCESS) } } } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!integration-tests/AdvertisingUniqueIDServiceV1Consumer/src/test/java/org/ebayopensource/turmeric/qajunittests/advertisinguniqueidservicev1/utils/HttpTestClient.java!HttpTestClient!getResponse][SEQ] =  -> itr=queryParams.entrySet().iterator()@ -> LOOP { -> entry=(Map.Entry) itr.next()@itr.hasNext() -> key=entry.getKey().toString()@itr.hasNext() -> value=entry.getValue().toString()@itr.hasNext() -> request.addHeader(key,value,)@itr.hasNext() -> IF { -> request.setContentType("text/xml",)@key.equals("X-EBAY-SOA-REQUEST-DATA-FORMAT",)&&value.equals("XML",) } } -> request.setMethod(Request.POST,)@ -> request.setRawData(body.getBytes(),)@ -> TRY { -> response=m_client.invoke(request,)@ -> IF { -> IF { } ELSE { -> return response.getBody()@!(response.getHeader("X-EBAY-SOA-ERROR-RESPONSE",)!=null) && response.getRequestStatus()==HttpStatusEnum.SUCCESS } } ELSE { -> IF { -> IF { -> return "True"@response.getRequestStatus()==HttpStatusEnum.HTTP_INTERNAL_ERROR && response.getHeader("X-EBAY-SOA-ERROR-RESPONSE",)!=null && !(response.getRequestStatus()==HttpStatusEnum.SUCCESS) } ELSE { -> return response.getBody()@response.getRequestStatus()==HttpStatusEnum.HTTP_INTERNAL_ERROR && !(response.getHeader("X-EBAY-SOA-ERROR-RESPONSE",)!=null) && !(response.getRequestStatus()==HttpStatusEnum.SUCCESS) } } ELSE { -> return response.getRequestStatus().getName()@!(response.getRequestStatus()==HttpStatusEnum.HTTP_INTERNAL_ERROR) && !(response.getRequestStatus()==HttpStatusEnum.SUCCESS) } } } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!integration-tests/SOATestsCommon/src/main/java/org/ebayopensource/turmeric/runtime/tests/common/util/HttpTestClient.java!HttpTestClient!getResponseDB][SEQ] =  -> itr=queryParams.entrySet().iterator()@ -> LOOP { -> entry=(Map.Entry) itr.next()@itr.hasNext() -> key=entry.getKey().toString()@itr.hasNext() -> value=entry.getValue().toString()@itr.hasNext() -> request.addHeader(key,value,)@itr.hasNext() -> IF { -> request.setContentType("text/xml",)@key.equals("X-EBAY-SOA-REQUEST-DATA-FORMAT",)&&value.equals("XML",) } } -> IF { -> request.setMethod(Request.POST,)@ } ELSE { -> request.setMethod(Request.GET,)@ } -> request.setRawData(body.getBytes(),)@ -> TRY { -> response=m_client.invoke(request,)@ -> return response@ } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!integration-tests/SOATestsCommon/src/main/java/org/ebayopensource/turmeric/runtime/tests/common/util/HttpTestClient.java!HttpTestClient!getResponse][SEQ] =  -> itr=queryParams.entrySet().iterator()@ -> LOOP { -> entry=(Map.Entry) itr.next()@itr.hasNext() -> key=entry.getKey().toString()@itr.hasNext() -> value=entry.getValue().toString()@itr.hasNext() -> request.addHeader(key,value,)@itr.hasNext() -> IF { -> request.setContentType("text/xml",)@key.equals("X-EBAY-SOA-REQUEST-DATA-FORMAT",)&&value.equals("XML",) } } -> request.setMethod(Request.POST,)@ -> request.setRawData(body.getBytes(),)@ -> TRY { -> response=m_client.invoke(request,)@ -> IF { -> IF { } ELSE { -> return response.getBody()@!(response.getHeader("X-EBAY-SOA-ERROR-RESPONSE",)!=null) && response.getRequestStatus()==HttpStatusEnum.SUCCESS } } ELSE { -> IF { -> IF { -> return "True"@response.getRequestStatus()==HttpStatusEnum.HTTP_INTERNAL_ERROR && response.getHeader("X-EBAY-SOA-ERROR-RESPONSE",)!=null && !(response.getRequestStatus()==HttpStatusEnum.SUCCESS) } ELSE { -> return response.getBody()@response.getRequestStatus()==HttpStatusEnum.HTTP_INTERNAL_ERROR && !(response.getHeader("X-EBAY-SOA-ERROR-RESPONSE",)!=null) && !(response.getRequestStatus()==HttpStatusEnum.SUCCESS) } } ELSE { -> return response.getRequestStatus().getName()@!(response.getRequestStatus()==HttpStatusEnum.HTTP_INTERNAL_ERROR) && !(response.getRequestStatus()==HttpStatusEnum.SUCCESS) } } } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!integration-tests/SOATestsCommon/src/main/java/org/ebayopensource/turmeric/runtime/tests/common/util/HttpTestClient.java!HttpTestClient!getResponse][SEQ] =  -> itr=queryParams.entrySet().iterator()@ -> LOOP { -> entry=(Map.Entry) itr.next()@itr.hasNext() -> key=entry.getKey().toString()@itr.hasNext() -> value=entry.getValue().toString()@itr.hasNext() -> request.addHeader(key,value,)@itr.hasNext() -> IF { -> request.setContentType("text/xml",)@key.equals("X-TURMERIC-SOA-REQUEST-DATA-FORMAT",)&&value.equals("XML",) } } -> IF { -> request.setMethod(Request.POST,)@ } ELSE { -> IF { -> request.setMethod(Request.GET,)@ } ELSE { -> IF { -> request.setMethod(Request.PUT,)@ } ELSE { -> IF { -> request.setMethod(Request.DELETE,)@ } } } } -> request.setRawData(body.getBytes(),)@ -> TRY { -> response=m_client.invoke(request,)@ -> return response@ } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!integration-tests/SOATestsCommon/src/main/java/org/ebayopensource/turmeric/runtime/tests/common/util/HttpTestClient.java!HttpTestClient!getResponse][SEQ] =  -> itr=queryParams.entrySet().iterator()@ -> LOOP { -> entry=(Map.Entry) itr.next()@itr.hasNext() -> request.addParameter(entry.getKey().toString(),entry.getValue().toString(),)@itr.hasNext() } -> TRY { -> response=m_client.invoke(request,)@ -> IF { -> System.out.println(response.getRequestStatus(),)@response.getRequestStatus()==HttpStatusEnum.SUCCESS -> return response.getBody()@response.getRequestStatus()==HttpStatusEnum.SUCCESS } ELSE { -> IF { -> return response.getBody()@response.getRequestStatus()==HttpStatusEnum.HTTP_INTERNAL_ERROR && !(response.getRequestStatus()==HttpStatusEnum.SUCCESS) } ELSE { -> return response.getRequestStatus().getName()@!(response.getRequestStatus()==HttpStatusEnum.HTTP_INTERNAL_ERROR) && !(response.getRequestStatus()==HttpStatusEnum.SUCCESS) } } } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!integration-tests/Test1ServiceImpl/src/main/java/org/ebayopensource/turmeric/runtime/tests/service1/sample/handlers/ServerReadInsertMessageHeaderHandler.java!ServerReadInsertMessageHeaderHandler!invoke][SEQ] =  -> requestMsg=(InboundMessage) ctx.getRequestMessage()@ -> responseMsg=(OutboundMessage) ctx.getResponseMessage()@ -> c=requestMsg.getMessageHeadersAsJavaObject()@ -> IF { -> i=c.iterator()@c!=null -> LOOP { -> obj=i.next()@i.hasNext() && c!=null -> System.out.println("message header read: "+obj.getClass().toString(),)@i.hasNext() && c!=null -> node=new JavaObjectNodeImpl(null,obj,)@i.hasNext() && c!=null -> responseMsg.addMessageHeader(node,)@i.hasNext() && c!=null } }
results[https://github.com/ebayopensource/turmeric-runtime!soa-client/src/main/java/org/ebayopensource/turmeric/runtime/common/cachepolicy/CachePolicyDesc.java!CachePolicyDesc!evaluateAccessor][SEQ] =  -> TRY { -> value=null@ -> IF { -> IF { -> IF { -> value=node.m_accessor.invoke(request,(Object[]) null,)@request!=null && node.m_accessor!=null } ELSE { -> value=null@ } } } ELSE { -> value=request@ } -> IF { -> i=node.m_elementAccessors.keySet().iterator()@node.m_elementAccessors.size()!=0 -> LOOP { -> childAccessor=node.m_elementAccessors.get(i.next(),)@node.m_elementAccessors.size()!=0 && i.hasNext() -> evaluateAccessor(value,childAccessor,key,false,)@node.m_elementAccessors.size()!=0 && i.hasNext() } } ELSE { -> key.add(node.m_fullPath,value,)@!(node.m_elementAccessors.size()!=0) } } CATCH { } CATCH { } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!soa-client/src/main/java/org/ebayopensource/turmeric/runtime/common/impl/attachment/MIMEOutputUtils.java!MIMEOutputUtils!writeMM7Message][SEQ] =  -> TRY { -> IF { -> SOAPContentType=SOAP11Constants.SOAP_11_CONTENT_TYPE@format.isSOAP11() } ELSE { -> SOAPContentType=SOAP12Constants.SOAP_12_CONTENT_TYPE@!(format.isSOAP11()) } -> startWritingMime(outputStream,format.getMimeBoundary(),)@ -> dh=new javax.activation.DataHandler(writer.toString(),"text/xml; charset="+format.getCharSetEncoding(),)@ -> rootMimeBodyPart=new MimeBodyPart()@ -> rootMimeBodyPart.setDataHandler(dh,)@ -> rootMimeBodyPart.addHeader("Content-Type",SOAPContentType+"; charset="+format.getCharSetEncoding(),)@ -> rootMimeBodyPart.addHeader("Content-ID","<"+format.getRootContentId()+">",)@ -> writeBodyPart(outputStream,rootMimeBodyPart,format.getMimeBoundary(),)@ -> IF { -> outputStream.write(CRLF,)@ -> sb=new StringBuffer()@ -> sb.append("Content-Type: multipart/related",)@ -> sb.append("; ",)@ -> sb.append("boundary=",)@ -> sb.append("\""+innerBoundary+"\"",)@ -> outputStream.write(sb.toString().getBytes(),)@ -> outputStream.write(CRLF,)@ -> sb1=new StringBuffer()@ -> sb1.append("Content-ID: ",)@ -> sb1.append("<",)@ -> sb1.append(innerPartCID,)@ -> sb1.append(">",)@ -> outputStream.write(sb1.toString().getBytes(),)@ -> outputStream.write(CRLF,)@ -> outputStream.write(CRLF,)@ -> startWritingMime(outputStream,innerBoundary,)@ -> attachmentIDIterator=attachments.getContentIDSet().iterator()@attachments.getContentIDSet().size()!=0 -> LOOP { -> contentID=(String) attachmentIDIterator.next()@attachments.getContentIDSet().size()!=0 && attachmentIDIterator.hasNext() -> dataHandler=attachments.getDataHandler(contentID,)@attachments.getContentIDSet().size()!=0 && attachmentIDIterator.hasNext() -> writeBodyPart(outputStream,createMimeBodyPart(contentID,dataHandler,),innerBoundary,)@attachments.getContentIDSet().size()!=0 && attachmentIDIterator.hasNext() } -> finishWritingMime(outputStream,)@ -> outputStream.write(CRLF,)@ -> writeMimeBoundary(outputStream,format.getMimeBoundary(),)@ } -> finishWritingMime(outputStream,)@ -> outputStream.flush()@ } CATCH { } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!soa-client/src/main/java/org/ebayopensource/turmeric/runtime/common/impl/attachment/MIMEOutputUtils.java!MIMEOutputUtils!writeSOAPWithAttachmentsMessage][SEQ] =  -> TRY { -> IF { -> SOAPContentType=SOAP11Constants.SOAP_11_CONTENT_TYPE@format.isSOAP11() } ELSE { -> SOAPContentType=SOAP12Constants.SOAP_12_CONTENT_TYPE@!(format.isSOAP11()) } -> startWritingMime(outputStream,format.getMimeBoundary(),)@ -> dh=new javax.activation.DataHandler(writer.toString(),"text/xml; charset="+format.getCharSetEncoding(),)@ -> rootMimeBodyPart=new MimeBodyPart()@ -> rootMimeBodyPart.setDataHandler(dh,)@ -> rootMimeBodyPart.addHeader("Content-Type",SOAPContentType+"; charset="+format.getCharSetEncoding(),)@ -> rootMimeBodyPart.addHeader("Content-Transfer-Encoding","8bit",)@ -> rootMimeBodyPart.addHeader("Content-ID","<"+format.getRootContentId()+">",)@ -> writeBodyPart(outputStream,rootMimeBodyPart,format.getMimeBoundary(),)@ -> attachmentIDIterator=attachments.getContentIDSet().iterator()@ -> LOOP { -> contentID=(String) attachmentIDIterator.next()@attachmentIDIterator.hasNext() -> dataHandler=attachments.getDataHandler(contentID,)@attachmentIDIterator.hasNext() -> writeBodyPart(outputStream,createMimeBodyPart(contentID,dataHandler,),format.getMimeBoundary(),)@attachmentIDIterator.hasNext() } -> finishWritingMime(outputStream,)@ -> outputStream.flush()@ } CATCH { } CATCH { }
results[https://github.com/ebayopensource/turmeric-runtime!soa-client/src/main/java/org/ebayopensource/turmeric/runtime/common/impl/internal/service/ServiceMetricHolder.java!ServiceMetricHolder!buildValues][SEQ] =  -> IF { -> collector=MetricsCollector.getClientInstance()@m_svcId.isClientSide() } ELSE { -> collector=MetricsCollector.getServerInstance()@!(m_svcId.isClientSide()) } -> metrics=new HashMap<String, MetricValueAggregator>()@ -> it=defs.iterator()@ -> LOOP { -> def=(MetricDef) it.next()@it.hasNext() -> name=def.getMetricName()@it.hasNext() -> value=collector.getMetricValue(name,m_svcId,m_opName,)@it.hasNext() -> metrics.put(name,value,)@it.hasNext() }
results[https://github.com/ebayopensource/turmeric-runtime!soa-client/src/main/java/org/ebayopensource/turmeric/runtime/sif/impl/internal/config/ClientServiceConfigBeanManager.java!DynamicConfigBeanListener!getNameValueMap][SEQ] =  -> map=new LinkedHashMap<String, String>()@ -> iter=m_dynamicBean.getAllPropertyInfos()@ -> LOOP { -> p=(BeanPropertyInfo) iter.next()@iter.hasNext() -> IF { -> map.put(p.getName(),(String) p.getPropertyValue(m_dynamicBean,),)@!DynamicConfigBean.EXTERNAL_MUTABLE.equals(p.getName(),) && iter.hasNext() } }
results[https://github.com/ebayopensource/turmeric-runtime!soa-client/src/main/java/org/ebayopensource/turmeric/runtime/sif/impl/transport/http/HTTPClientTransport.java!HTTPClientTransport!setResponseToContextHeaderMapping][SEQ] =  -> clientResponse=(InboundMessage) clientCtx.getResponseMessage()@ -> headers=httpClientResponse.getHeaders()@ -> LOOP { -> header=(String) headers.nextElement()@headers.hasMoreElements() -> value=httpClientResponse.getHeader(header,)@headers.hasMoreElements() -> IF { -> sb=new StringBuffer()@header!=null&&header.equalsIgnoreCase(SOAHeaders.SERVICE_OPERATION_NAME,)&&value!=null&&value.equals("Portlet",) -> sb.append(Character.toLowerCase(value.charAt(0,),),)@headers.hasMoreElements() && header!=null&&header.equalsIgnoreCase(SOAHeaders.SERVICE_OPERATION_NAME,)&&value!=null&&value.equals("Portlet",) -> sb.append(value.substring(1,),)@headers.hasMoreElements() && header!=null&&header.equalsIgnoreCase(SOAHeaders.SERVICE_OPERATION_NAME,)&&value!=null&&value.equals("Portlet",) -> value=sb.toString()@header!=null&&header.equalsIgnoreCase(SOAHeaders.SERVICE_OPERATION_NAME,)&&value!=null&&value.equals("Portlet",) } -> clientResponse.setTransportHeader(header,value,)@headers.hasMoreElements() } -> cookies=httpClientResponse.getCookies()@ -> LOOP { -> cookieString=(String) cookies.next()@cookies.hasNext() -> clientResponse.setCookie(HTTPCommonUtils.parseSetCookieValue(cookieString,),)@cookies.hasNext() }
results[https://github.com/ebayopensource/turmeric-runtime!soa-client/src/main/java/org/ebayopensource/turmeric/runtime/sif/impl/transport/http/HTTPSyncAsyncClientTransport.java!HTTPSyncAsyncClientTransport!setResponseToContextHeaderMapping][SEQ] =  -> clientResponse=(InboundMessage) clientCtx.getResponseMessage()@ -> headerNames=httpClientResponse.getHeaderNames()@ -> LOOP { -> header=headerNames.next()@headerNames.hasNext() -> value=httpClientResponse.getHeader(header,)@headerNames.hasNext() -> IF { -> sb=new StringBuffer()@header!=null&&header.equalsIgnoreCase(SOAHeaders.SERVICE_OPERATION_NAME,)&&value!=null&&value.equals("Portlet",) -> sb.append(Character.toLowerCase(value.charAt(0,),),)@header!=null&&header.equalsIgnoreCase(SOAHeaders.SERVICE_OPERATION_NAME,)&&value!=null&&value.equals("Portlet",) && headerNames.hasNext() -> sb.append(value.substring(1,),)@header!=null&&header.equalsIgnoreCase(SOAHeaders.SERVICE_OPERATION_NAME,)&&value!=null&&value.equals("Portlet",) && headerNames.hasNext() -> value=sb.toString()@header!=null&&header.equalsIgnoreCase(SOAHeaders.SERVICE_OPERATION_NAME,)&&value!=null&&value.equals("Portlet",) } -> clientResponse.setTransportHeader(header,value,)@headerNames.hasNext() } -> cookies=httpClientResponse.getCookies()@ -> LOOP { -> cookieString=(String) cookies.next()@cookies.hasNext() -> clientResponse.setCookie(HTTPCommonUtils.parseSetCookieValue(cookieString,),)@cookies.hasNext() } -> clientResponse.doHeaderMapping()@
results[https://github.com/ebayopensource/turmeric-runtime!soa-server/src/main/java/org/ebayopensource/turmeric/runtime/spf/impl/internal/config/ServiceConfigBean.java!StringListObjectTypeConverter!getStringValue][SEQ] =  -> IF { -> return "null"@obj==null } -> i=(List) obj.iterator()@!(obj==null) -> IF { -> return ""@!i.hasNext() && !(obj==null) } -> sb=new StringBuilder()@!(!i.hasNext()) && !(obj==null) -> LOOP { -> o=i.next()@!(!i.hasNext()) && !(obj==null) -> sb.append(o,)@!(!i.hasNext()) && !(obj==null) -> IF { -> return sb.toString()@!i.hasNext() && !(obj==null) } -> sb.append(",",)@!(!i.hasNext()) && !(obj==null) }
results[https://github.com/ebayopensource/turmeric-runtime!soa-server/src/main/java/org/ebayopensource/turmeric/runtime/spf/impl/internal/config/ServiceConfigBeanManager.java!DynamicConfigBeanListener!getMappings][SEQ] =  -> optionList=new OptionList()@ -> list=optionList.getOption()@ -> iter=m_dynamicBean.getAllPropertyInfos()@ -> LOOP { -> p=(BeanPropertyInfo) iter.next()@iter.hasNext() -> IF { -> nv=new NameValue()@!DynamicConfigBean.EXTERNAL_MUTABLE.equals(p.getName(),) -> nv.setName(p.getName(),)@!DynamicConfigBean.EXTERNAL_MUTABLE.equals(p.getName(),) && iter.hasNext() -> nv.setValue((String) p.getPropertyValue(m_dynamicBean,),)@!DynamicConfigBean.EXTERNAL_MUTABLE.equals(p.getName(),) && iter.hasNext() -> list.add(nv,)@!DynamicConfigBean.EXTERNAL_MUTABLE.equals(p.getName(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.apache.trinidad.tagsupport/src/org/eclipse/jst/jsf/apache/trinidad/tagsupport/converter/operations/AbstractTrinidadTransformOperation.java!AbstractTrinidadTransformOperation!getChildFacetByName][SEQ] =  -> facets=getChildElements(srcElement,"facet",)@ -> itFacets=facets.iterator()@ -> LOOP { -> facet=(Element) itFacets.next()@itFacets.hasNext() -> facetAttrName=facet.getAttribute("name",)@itFacets.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.runtime/instrumentation/src/instrument/MyMonitorMessageFactory.java!MyMonitorMessageFactory!buildComponentTree][SEQ] =  -> componentInfo=getComponentData(component,isFacet,)@ -> it=component.getChildren().iterator()@ -> LOOP { -> child=(UIComponent) it.next()@it.hasNext() -> componentInfo.getChildren().add(buildComponentTree(child,false,),)@it.hasNext() } -> it=component.getFacets().values().iterator()@ -> LOOP { -> facet=(UIComponent) it.next()@it.hasNext() -> componentInfo.getChildren().add(buildComponentTree(facet,true,),)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.runtime/instrumentation/src/instrument/PhaseListener1.java!PhaseListener1!dumpNode][SEQ] =  -> System.out.printf("%s%s for component %s\n",prefix,node.getRenderedNodeName(),node.getComponentId(),)@ -> it=node.getChildren().iterator()@ -> LOOP { -> child=(RenderNode) it.next()@it.hasNext() -> dumpNode(child,prefix+"\t",)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.runtime/src/org/eclipse/jst/jsf/common/runtime/internal/debug/RenderNode.java!RenderNode!toString][SEQ] =  -> it=_renderedAttributes.iterator()@ -> LOOP { -> attribute=(RenderAttribute) it.next()@it.hasNext() -> toString+=attribute.getName()+"="+attribute.getValue()@it.hasNext() -> toString+=(it.hasNext())?", ":"]"@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.runtime/src/org/eclipse/jst/jsf/common/runtime/internal/model/ViewObject.java!ViewObject!getAllDecorators][SEQ] =  -> allDecorators=new ArrayList()@ -> entryIt=getDecoratorMap().entrySet().iterator()@ -> LOOP { -> entry=(Map.Entry) entryIt.next()@entryIt.hasNext() -> decorators=(List) entry.getValue()@entryIt.hasNext() -> allDecorators.addAll(decorators,)@entryIt.hasNext() } -> return Collections.unmodifiableList(allDecorators,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.runtime/src/org/eclipse/jst/jsf/common/runtime/internal/model/component/ComponentInfo.java!BeanPropertyManager!addToMap][SEQ] =  -> it=addThese.iterator()@ -> LOOP { -> desc=(PropertyDescriptor) it.next()@it.hasNext() -> IF { -> toMe.put(desc.getName(),new ComponentBeanProperty(declaringAdapter,declaringObject,desc,),)@it.hasNext() && !toMe.containsKey(desc.getName(),)&&!excludeNames.contains(desc.getName(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.runtime/src/org/eclipse/jst/jsf/common/runtime/internal/model/component/ComponentInfo.java!BeanPropertyManager!calculateAllBeanPropNames][SEQ] =  -> allProperties=new HashMap()@ -> myClass=_component.getClass()@ -> myProperties=getOrCreateBeanProperties(myClass,stopClass,)@ -> addToMap(myProperties,_component,myClass,allProperties,_excludeNames,)@ -> it=_component.getAdapterMap().entrySet().iterator()@ -> LOOP { -> entry=(Entry) it.next()@it.hasNext() -> adapterClass=(Class) entry.getKey()@it.hasNext() -> declaringClass=entry.getValue()@it.hasNext() -> props=getOrCreateBeanProperties(adapterClass,null,)@it.hasNext() -> addToMap(props,declaringClass,adapterClass,allProperties,_excludeNames,)@it.hasNext() } -> return Collections.synchronizedMap(allProperties,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.runtime/src/org/eclipse/jst/jsf/common/runtime/internal/model/component/ComponentInfo.java!ComponentInfo!getFacetName][SEQ] =  -> IF { -> return null@component==null } -> facets=getDecorators(ComponentFactory.FACET,)@!(component==null) -> it=facets.iterator()@!(component==null) -> LOOP { -> facet=(FacetDecorator) it.next()@it.hasNext() && !(component==null) -> IF { -> return facet.getName()@it.hasNext() && component==facet.getDecorates() && !(component==null) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.runtime/src/org/eclipse/jst/jsf/common/runtime/internal/model/component/ComponentInfo.java!ComponentInfo!getFacet][SEQ] =  -> IF { -> return null@name==null } -> facets=getDecorators(ComponentFactory.FACET,)@!(name==null) -> it=facets.iterator()@!(name==null) -> LOOP { -> facet=(FacetDecorator) it.next()@it.hasNext() && !(name==null) -> IF { -> return facet.getDecorates()@it.hasNext() && name.equals(facet.getName(),) && !(name==null) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.runtime/src/org/eclipse/jst/jsf/common/runtime/internal/model/component/ComponentInfo.java!ComponentInfo!visitChildren][SEQ] =  -> it=getVisitableChildren()@ -> LOOP { -> visitor.visit(it.next(),)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.runtime/src/org/eclipse/jst/jsf/common/runtime/internal/model/component/UICommandInfo.java!UICommandInfo!<init>][SEQ] =  } ELSE { -> _actionExpression=actionSourceInfo.getAction()@!(actionSourceInfo==null) -> _actionListener=actionSourceInfo.getActionListener()@!(actionSourceInfo==null) -> _isImmediate=actionSourceInfo.isImmediate()@!(actionSourceInfo==null) -> it=actionSourceInfo.getActionListeners().iterator()@!(actionSourceInfo==null) -> LOOP { -> actionListener=(ActionListenerDecorator) it.next()@it.hasNext() && !(actionSourceInfo==null) -> addActionListener(actionListener,)@it.hasNext() && !(actionSourceInfo==null) }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.runtime/src/org/eclipse/jst/jsf/common/runtime/internal/model/component/UIInputInfo.java!UIInputInfo!<init>][SEQ] =  -> super(id,parent,typeInfo,editableValueHolderInfo,isRendered,)@ } ELSE { -> _isValid=editableValueHolderInfo.isValid()@!(editableValueHolderInfo==null) -> _isImmediate=editableValueHolderInfo.isImmediate()@!(editableValueHolderInfo==null) -> _isRequired=editableValueHolderInfo.isRequired()@!(editableValueHolderInfo==null) -> _localSetValue=editableValueHolderInfo.isLocalSetValue()@!(editableValueHolderInfo==null) -> _submittedValue=editableValueHolderInfo.getSubmittedValue()@!(editableValueHolderInfo==null) -> _validator=editableValueHolderInfo.getValidator()@!(editableValueHolderInfo==null) -> _valueChangeListener=editableValueHolderInfo.getValueChangeListener()@!(editableValueHolderInfo==null) -> it=editableValueHolderInfo.getValidators().iterator()@!(editableValueHolderInfo==null) -> LOOP { -> validator=(ValidatorDecorator) it.next()@it.hasNext() && !(editableValueHolderInfo==null) -> addValidator(validator,)@it.hasNext() && !(editableValueHolderInfo==null) } -> it=editableValueHolderInfo.getValueChangeListeners().iterator()@!(editableValueHolderInfo==null) -> LOOP { -> valueChangeListener=(ValueChangeListenerDecorator) it.next()@it.hasNext() && !(editableValueHolderInfo==null) -> addValueChangeListener(valueChangeListener,)@it.hasNext() && !(editableValueHolderInfo==null) }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.ui/src/org/eclipse/jst/jsf/common/ui/internal/dialogfield/ColorPalette.java!ColorPalette!getExtendedColor][SEQ] =  -> keys=getExtendedColorMap().keySet()@ -> iterator=keys.iterator()@ -> LOOP { -> key=(String) iterator.next()@iterator.hasNext() -> IF { -> return (Color) getExtendedColorMap().get(key,)@iterator.hasNext() && key.equalsIgnoreCase(cssText,) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.ui/src/org/eclipse/jst/jsf/common/ui/internal/utils/FavoriteConfigurations.java!FavoriteConfigurations!saveFavorites][SEQ] =  -> TRY { -> memento=XMLMemento.createWriteRoot(ELEMENT_ROOT,)@ -> it=_favorites.keySet().iterator()@ -> LOOP { -> favName=(String) it.next()@it.hasNext() -> props=new HashMap((Properties) _favorites.get(favName,),)@it.hasNext() -> config=memento.createChild(ELEMENT_CONFIG,)@it.hasNext() -> config.putString(ELEMENT_NAME,favName,)@it.hasNext() -> it1=props.keySet().iterator()@it.hasNext() -> LOOP { -> entry=config.createChild(ELEMENT_PROPERTY,)@it.hasNext() && it1.hasNext() -> name=(String) it1.next()@it.hasNext() && it1.hasNext() -> entry.putString(ELEMENT_NAME,name,)@it.hasNext() && it1.hasNext() -> entry.putString(ELEMENT_VALUE,(String) props.get(name,),)@it.hasNext() && it1.hasNext() } } -> fw=new FileWriter(_favoriteFile.toFile(),)@ -> memento.save(fw,)@ } CATCH { -> _log.info("log.FavoriteConfigurations.save.error",_favoriteName,_favoriteFile.toOSString(),ee,)@ } FINALLY { -> IF { -> TRY { -> fw.close()@fw!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common.ui/src/org/eclipse/jst/jsf/common/ui/internal/utils/WebrootUtil.java!WebrootUtil!isValidWebProject][SEQ] =  -> IF { -> TRY { -> facetedProject=ProjectFacetsManager.create(project,)@project!=null&&project.isAccessible() -> IF { -> projectFacets=facetedProject.getProjectFacets()@facetedProject!=null && project!=null&&project.isAccessible() -> itProjectFacets=projectFacets.iterator()@facetedProject!=null && project!=null&&project.isAccessible() -> LOOP { -> projectFacetVersion=(IProjectFacetVersion) itProjectFacets.next()@facetedProject!=null && project!=null&&project.isAccessible() && itProjectFacets.hasNext() -> projectFacet=projectFacetVersion.getProjectFacet()@facetedProject!=null && project!=null&&project.isAccessible() && itProjectFacets.hasNext() -> IF { } } } } CATCH { } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/internal/types/TypeInfoCache.java!TypeInfoCache!uncacheAffectedTypes][SEQ] =  -> affectedTypes=cachedTypesByAffectingTypeRoot.get(typeRoot,)@ -> IF { -> affectedTypesCopy=new ArrayList(affectedTypes,)@affectedTypes!=null&&!affectedTypes.isEmpty() -> it=affectedTypesCopy.iterator()@affectedTypes!=null&&!affectedTypes.isEmpty() -> LOOP { -> cachedType=(IType) it.next()@it.hasNext() && affectedTypes!=null&&!affectedTypes.isEmpty() -> typeInfo=cachedInfo.remove(cachedType,)@it.hasNext() && affectedTypes!=null&&!affectedTypes.isEmpty() -> unregisterCachedType(cachedType,typeInfo,)@it.hasNext() && affectedTypes!=null&&!affectedTypes.isEmpty() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/internal/types/TypeInfoCache.java!TypeInfoCache!uncacheTypesWithMissingSupertype][SEQ] =  -> affectedTypes=cachedTypesByMissingSupertypename.get(shortTypename(supertypename,),)@ -> IF { -> affectedTypesCopy=new ArrayList(affectedTypes,)@affectedTypes!=null&&!affectedTypes.isEmpty() -> it=affectedTypesCopy.iterator()@affectedTypes!=null&&!affectedTypes.isEmpty() -> LOOP { -> cachedType=(IType) it.next()@it.hasNext() && affectedTypes!=null&&!affectedTypes.isEmpty() -> typeInfo=cachedInfo.remove(cachedType,)@it.hasNext() && affectedTypes!=null&&!affectedTypes.isEmpty() -> unregisterCachedType(cachedType,typeInfo,)@it.hasNext() && affectedTypes!=null&&!affectedTypes.isEmpty() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/internal/types/TypeTransformer.java!TypeTransformer!<clinit>][SEQ] =  -> boxConversions.put("B","Ljava.lang.Byte;",)@ -> boxConversions.put("C","Ljava.lang.Character;",)@ -> boxConversions.put("D","Ljava.lang.Double;",)@ -> boxConversions.put("F","Ljava.lang.Float;",)@ -> boxConversions.put("I","Ljava.lang.Integer;",)@ -> boxConversions.put("J","Ljava.lang.Long;",)@ -> boxConversions.put("S","Ljava.lang.Short;",)@ -> boxConversions.put("Z","Ljava.lang.Boolean;",)@ -> boxConversions.put("V","V",)@ -> it=boxConversions.keySet().iterator()@ -> LOOP { -> newValue=(String) it.next()@it.hasNext() -> newKey=(String) boxConversions.get(newValue,)@it.hasNext() -> IF { -> throw new AssertionError("Duplicated boxing value",)@it.hasNext() && unBoxConversions.put(newKey,newValue,)!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/AbstractTagLibDomainContentModelMetaDataTranslator.java!AbstractTagLibDomainContentModelMetaDataTranslator!createAttributeEntities][SEQ] =  -> it=tag.getAttributes().iterator()@ -> LOOP { -> cmAttr=(CMAttributeDeclaration) it.next()@it.hasNext() -> attr=findAttributeEntityForTagEntity(tagEntity,cmAttr.getAttrName(),)@it.hasNext() -> IF { -> attr=MetadataFactory.eINSTANCE.createEntity()@it.hasNext() && attr==null -> attr.setId(cmAttr.getAttrName(),)@it.hasNext() && attr==null -> tagEntity.getChildEntities().add(attr,)@it.hasNext() && attr==null } -> createAttributeTraits(attr,cmAttr,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/AbstractTagLibDomainContentModelMetaDataTranslator.java!AbstractTagLibDomainContentModelMetaDataTranslator!createTags][SEQ] =  -> it=doc.getElements().iterator()@ -> LOOP { -> tag=(CMElementDeclaration) it.next()@it.hasNext() -> entity=findTagEntity(tag.getNodeName(),)@it.hasNext() -> IF { -> entity=MetadataFactory.eINSTANCE.createEntity()@it.hasNext() && entity==null -> entity.setId(getTagNodeName(tag,),)@it.hasNext() && entity==null -> entity.setType("tag",)@it.hasNext() && entity==null -> getMergedModel().getChildEntities().add(entity,)@it.hasNext() && entity==null } -> setTagEntityTraits(tag,entity,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/AbstractTagLibDomainContentModelMetaDataTranslator.java!AbstractTagLibDomainContentModelMetaDataTranslator!findAttributeEntityForTagEntity][SEQ] =  -> it=tag.getChildEntities().iterator()@ -> LOOP { -> attr=(Entity) it.next()@it.hasNext() -> IF { -> return attr@attributeName.equals(attr.getId(),) && it.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/AbstractTagLibDomainContentModelMetaDataTranslator.java!AbstractTagLibDomainContentModelMetaDataTranslator!findTagEntity][SEQ] =  -> it=getMergedModel().getChildEntities().iterator()@ -> LOOP { -> entity=(Entity) it.next()@it.hasNext() -> IF { -> return entity@it.hasNext() && nodeName.equals(entity.getId(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/AbstractTagLibDomainContentModelMetaDataTranslator.java!AbstractTagLibDomainContentModelMetaDataTranslator!findTraitOnEntityById][SEQ] =  -> it=entity.getTraits().iterator()@ -> LOOP { -> t=(Trait) it.next()@it.hasNext() -> IF { -> return t@it.hasNext() && key.equals(t.getId(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/DomainLoadingStrategy.java!DomainLoadingStrategy!mergeModel][SEQ] =  -> StandardModelFactory.debug(">> Begin Merge: "+model.getModelContext()+"("+sources.size()+" sources)",StandardModelFactory.DEBUG_MD_LOAD,)@ -> assistant=createModelMergeAssistant(model,)@ -> LOOP { -> translators=mds.getLocator().getDomainSourceModelType().getTranslators().iterator()@ -> LOOP { -> translator=(IMetaDataTranslator) translators.next()@translators.hasNext() -> IF { -> StandardModelFactory.debug(">>> Merging: "+model.getModelContext()+"::"+mds,StandardModelFactory.DEBUG_MD_LOAD,)@translator.canTranslate(mds,) -> assistant.setSourceModelProvider(mds,)@translator.canTranslate(mds,) -> TRY { -> translator.translate(assistant,)@translator.canTranslate(mds,) && translators.hasNext() } CATCH { -> StandardModelFactory.debug(">>>> Error during translate/merge of: "+model.getModelContext()+": "+mds,StandardModelFactory.DEBUG_MD_LOAD,)@translator.canTranslate(mds,) -> JSFCommonPlugin.log(IStatus.ERROR,"Error during load of: "+mds,e,)@translator.canTranslate(mds,) } } } } -> assistant.setMergeComplete()@ -> StandardModelFactory.debug(">> End Merge: "+model.getModelContext(),StandardModelFactory.DEBUG_MD_LOAD,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/MetaDataLocatorFactory.java!MetaDataLocatorFactory!dispose][SEQ] =  -> it=getLocators().values().iterator()@ -> LOOP { -> locator=(IMetaDataLocator) it.next()@it.hasNext() -> locator.stopLocating()@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/MetaDataLocatorFactory.java!MetaDataLocatorFactory!resourceChanged][SEQ] =  -> IF { -> aProject=(IProject) event.getResource()@event.getType()==IResourceChangeEvent.PRE_CLOSE||event.getType()==IResourceChangeEvent.PRE_DELETE -> IF { -> locatorsToRemove=new ArrayList<String>()@event.getType()==IResourceChangeEvent.PRE_CLOSE||event.getType()==IResourceChangeEvent.PRE_DELETE && aProject!=null -> it=getLocators().keySet().iterator()@ -> LOOP { -> key=(String) it.next()@it.hasNext() && event.getType()==IResourceChangeEvent.PRE_CLOSE||event.getType()==IResourceChangeEvent.PRE_DELETE && aProject!=null -> IF { -> locatorsToRemove.add(key,)@it.hasNext() && locatorIsForProject(key,aProject.getName(),) && event.getType()==IResourceChangeEvent.PRE_CLOSE||event.getType()==IResourceChangeEvent.PRE_DELETE && aProject!=null } } -> IF { -> LOOP { -> locator=getLocators().get(key,)@locatorsToRemove && !locatorsToRemove.isEmpty() -> IF { -> System.out.println("Removed locator: "+locator.toString(),)@locatorsToRemove && !locatorsToRemove.isEmpty() } -> locator.stopLocating()@locatorsToRemove && !locatorsToRemove.isEmpty() -> getLocators().remove(key,)@locatorsToRemove && !locatorsToRemove.isEmpty() } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/MetaDataModelMergeAssistantImpl.java!MetaDataModelMergeAssistantImpl!addIncludeGroupsAsNecessary][SEQ] =  -> it=entity.getIncludeGroups().iterator()@ -> LOOP { -> grp=(IncludeEntityGroup) it.next()@it.hasNext() -> it2=mmEntity.getIncludeGroups().iterator()@ -> LOOP { -> grp2=(IncludeEntityGroup) it2.next()@it.hasNext() && it2.hasNext() } -> IF { -> mmEntity.getIncludeGroups().add(grp,)@it.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/MetaDataModelMergeAssistantImpl.java!MetaDataModelMergeAssistantImpl!getExistingChildEntity][SEQ] =  -> it=parent.getChildEntities().iterator()@ -> LOOP { -> foundEntity=(Entity) it.next()@it.hasNext() -> IF { -> return foundEntity@it.hasNext() && entity.getId().equals(foundEntity.getId(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/MetaDataModelMergeAssistantImpl.java!MetaDataModelMergeAssistantImpl!traverseAndAddIncludes][SEQ] =  -> mergedEntity=addIncludedEntityAsNecessary(parent,entity,)@ -> it=entity.getTraits().iterator()@ -> LOOP { -> trait=(Trait) it.next()@it.hasNext() -> addTraitAsNecessary(mergedEntity,trait,)@it.hasNext() } -> it=entity.getChildEntities().iterator()@ -> LOOP { -> e=(Entity) it.next()@it.hasNext() -> traverseAndAddIncludes(mergedEntity,e,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/StandardAnnotationFilesTranslator.java!StandardAnnotationFilesTranslator!traverseAndAdd][SEQ] =  -> assistant.addEntity(entity,)@ -> IF { -> model=(Model) entity@entity instanceof Model -> it=model.getEntityGroups().iterator()@entity instanceof Model -> LOOP { -> assistant.addEntityGroup((EntityGroup) it.next(),)@it.hasNext() && entity instanceof Model } } -> it=entity.getTraits().iterator()@ -> LOOP { -> trait=(Trait) it.next()@it.hasNext() -> assistant.addTrait(entity,trait,)@it.hasNext() } -> it=entity.getChildEntities().iterator()@ -> LOOP { -> e=(Entity) it.next()@it.hasNext() -> traverseAndAdd(assistant,e,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/StandardMetaDataFileRegistry.java!!getImageBasePath][SEQ] =  -> it=aModel.getTraits().iterator()@ -> LOOP { -> t=(Trait) it.next()@it.hasNext() -> IF { -> return t@it.hasNext() && t.getId().equals("images-base-path",) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/StandardMetaDataFilesTranslator.java!StandardMetaDataFilesTranslator!traverseAndAdd][SEQ] =  -> mmEntity=assistant.addEntity(entity,)@ -> IF { -> model=(Model) entity@entity instanceof Model -> it=model.getEntityGroups().iterator()@entity instanceof Model -> LOOP { -> assistant.addEntityGroup((EntityGroup) it.next(),)@it.hasNext() && entity instanceof Model } } -> it=entity.getTraits().iterator()@ -> LOOP { -> trait=(Trait) it.next()@it.hasNext() -> assistant.addTrait(mmEntity,trait,)@it.hasNext() } -> it=entity.getChildEntities().iterator()@ -> LOOP { -> e=(Entity) it.next()@it.hasNext() -> traverseAndAdd(assistant,e,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/TraitValueHelper.java!TraitValueHelper!getTextValueFromFeatureMap][SEQ] =  -> it=map.iterator()@ -> LOOP { -> entry=(FeatureMap.Entry) it.next()@it.hasNext() -> IF { -> return (String) entry.getValue()@it.hasNext() && entry.getEStructuralFeature().getName().equals("text",) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/TraitValueHelper.java!TraitValueHelper!getValueAsListOfStrings][SEQ] =  -> ret=new ArrayList()@ -> IF { -> it=trait.getValue().eContents().iterator()@trait.getValue() instanceof ListOfValues -> LOOP { -> o=it.next()@it.hasNext() && trait.getValue() instanceof ListOfValues -> IF { -> sat=(SimpleAnyType) o@it.hasNext() && trait.getValue() instanceof ListOfValues && o instanceof SimpleAnyType -> rawValue=getTextValueFromFeatureMap(sat.getMixed(),)@it.hasNext() && trait.getValue() instanceof ListOfValues && o instanceof SimpleAnyType -> nlsValue=getNLSValue(trait,rawValue,)@it.hasNext() && trait.getValue() instanceof ListOfValues && o instanceof SimpleAnyType -> ret.add(nlsValue,)@it.hasNext() && trait.getValue() instanceof ListOfValues && o instanceof SimpleAnyType } } } ELSE { -> o=getValueAsString(trait,)@!(trait.getValue() instanceof ListOfValues) -> IF { -> ret.add(o,)@!(trait.getValue() instanceof ListOfValues) && o!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/TraitValueHelper2.java!TraitValueHelper2!getTextValueFromFeatureMap][SEQ] =  -> it=map.iterator()@ -> LOOP { -> entry=(FeatureMap.Entry) it.next()@it.hasNext() -> IF { -> return (String) entry.getValue()@it.hasNext() && entry.getEStructuralFeature().getName().equals("text",) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/TraitValueHelper2.java!TraitValueHelper2!getValueAsListOfStrings][SEQ] =  -> ret=new ArrayList()@ -> IF { -> it=trait.getValue().eContents().iterator()@trait.getValue() instanceof ListOfValues -> LOOP { -> o=it.next()@it.hasNext() && trait.getValue() instanceof ListOfValues -> IF { -> sat=(SimpleAnyType) o@it.hasNext() && trait.getValue() instanceof ListOfValues && o instanceof SimpleAnyType -> rawValue=getTextValueFromFeatureMap(sat.getMixed(),)@it.hasNext() && trait.getValue() instanceof ListOfValues && o instanceof SimpleAnyType -> nlsValue=getNLSValue(trait,rawValue,)@it.hasNext() && trait.getValue() instanceof ListOfValues && o instanceof SimpleAnyType -> ret.add(nlsValue,)@it.hasNext() && trait.getValue() instanceof ListOfValues && o instanceof SimpleAnyType } } } ELSE { -> o=getValueAsString(trait,)@!(trait.getValue() instanceof ListOfValues) -> IF { -> ret.add(o,)@!(trait.getValue() instanceof ListOfValues) && o!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/impl/EntityImpl.java!EntityImpl!acceptChildren][SEQ] =  -> IF { -> it=getChildEntities().iterator()@ -> LOOP { -> k=(Entity) it.next()@it.hasNext() -> k.accept(visitor,)@it.hasNext() -> IF { -> return @it.hasNext() && visitor.stopVisiting() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/impl/ModelImpl.java!ModelImpl!findIncludeGroup][SEQ] =  -> it=getEntityGroups().iterator()@ -> LOOP { -> entityGroup=(EntityGroup) it.next()@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/query/SimpleMetaDataQueryVisitorImpl.java!SimpleMetaDataQueryVisitorImpl!findTraits][SEQ] =  -> IF { -> it=entity.getTraits().iterator()@entity!=null -> LOOP { -> t=(Trait) it.next()@it.hasNext() && entity!=null -> t.accept(this,)@it.hasNext() && entity!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/sets/AxiomaticSetUtil.java!AxiomaticSetUtil!intersect][SEQ] =  -> IF { -> it=secondSet.iterator()@secondSet.size()<firstSet.size() } ELSE { -> it=firstSet.iterator()@!(secondSet.size()<firstSet.size()) } -> LOOP { -> member=it.next()@it.hasNext() -> IF { -> newSet.add(member,)@it.hasNext() && testSet.contains(member,) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/sets/AxiomaticSetUtil.java!AxiomaticSetUtil!subtract][SEQ] =  -> relativeComplement=new ConcreteAxiomaticSet()@ -> it=firstOperand.iterator()@ -> LOOP { -> member=it.next()@it.hasNext() -> IF { -> relativeComplement.add(member,)@it.hasNext() && !secondOperand.contains(member,) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/sets/NodeSet.java!NodeSet!isEquivalent][SEQ] =  -> IF { -> return true@this==toSet } -> IF { -> return true@toSet instanceof NodeSet&&(NodeSet) toSet._data==this._data && !(this==toSet) } -> IF { -> return false@toSet.size()!=size() && !(toSet instanceof NodeSet&&(NodeSet) toSet._data==this._data) && !(this==toSet) } -> it=iterator()@!(toSet instanceof NodeSet&&(NodeSet) toSet._data==this._data) && !(toSet.size()!=size()) && !(this==toSet) -> LOOP { -> obj=it.next()@it.hasNext() && !(toSet instanceof NodeSet&&(NodeSet) toSet._data==this._data) && !(toSet.size()!=size()) && !(this==toSet) -> IF { -> return false@it.hasNext() && !(toSet instanceof NodeSet&&(NodeSet) toSet._data==this._data) && !(toSet.size()!=size()) && !toSet.contains(obj,) && !(this==toSet) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/sets/mapping/AbstractObjectInjectiveSetMapping.java!!next][SEQ] =  -> return map(setIterator.next(),)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/sets/mapping/AbstractObjectInjectiveSetMapping.java!AbstractObjectInjectiveSetMapping!map][SEQ] =  -> resultSet=new ConcreteAxiomaticSet()@ -> it=mapIterator(set,)@ -> LOOP { -> resultSet.add(it.next(),)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/util/JDTBeanPropertyWorkingCopy.java!JDTBeanPropertyWorkingCopy!determineMatchedSetter][SEQ] =  -> IF { -> return null@_setters.size()<1 } -> TRY { -> getterSig=getResolvedSignature(_type,getter.getReturnType(),)@!(_setters.size()<1) -> it=_setters.iterator()@!(_setters.size()<1) -> LOOP { -> setter=(IMethod) it.next()@it.hasNext() && !(_setters.size()<1) -> assert setter.getNumberOfParameters()==1@!(_setters.size()<1) -> paramSig=getResolvedSignature(_type,setter.getParameterTypes()[0],)@it.hasNext() && !(_setters.size()<1) -> IF { -> matchedSetter=setter@it.hasNext() && paramSig.equals(getterSig,) && !(_setters.size()<1) } } } CATCH { }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/context/resolver/structureddocument/internal/impl/TaglibContextResolver.java!TaglibContextResolver!getTracker][SEQ] =  -> prefix=node.getPrefix()@ -> docMgr=TaglibController.getTLDCMDocumentManager(_context.getStructuredDocument(),)@ -> IF { -> return null@prefix==null||docMgr==null } -> it=docMgr.getTaglibTrackers().iterator()@!(prefix==null||docMgr==null) -> LOOP { -> tracker=(TaglibTracker) it.next()@it.hasNext() && !(prefix==null||docMgr==null) -> IF { -> return tracker@it.hasNext() && prefix.equals(tracker.getPrefix(),) && !(prefix==null||docMgr==null) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/context/resolver/structureddocument/internal/impl/TextRegionContextResolver.java!TextRegionContextResolver!getNextContext][SEQ] =  -> parent=getParentRegion()@ -> IF { -> me=parent.getRegionAtCharacterOffset(_context.getDocumentPosition(),)@parent!=null -> IF { -> regions=parent.getRegions()@me!=null && parent!=null -> it=regions.iterator()@me!=null && parent!=null -> LOOP { -> IF { -> nextRegion=(ITextRegion) it.next()@it.hasNext() && it.next()==me&&it.hasNext() && me!=null && parent!=null } } -> IF { -> documentPosition=parent.getStartOffset(nextRegion,)@nextRegion!=null && me!=null && parent!=null -> newContext=IStructuredDocumentContextFactory.INSTANCE.getContext(_context.getStructuredDocument(),documentPosition,)@nextRegion!=null && me!=null && parent!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/context/resolver/structureddocument/internal/impl/TextRegionContextResolver.java!TextRegionContextResolver!getPreviousContext][SEQ] =  -> parent=getParentRegion()@ -> IF { -> me=parent.getRegionAtCharacterOffset(_context.getDocumentPosition(),)@parent!=null -> IF { -> regions=parent.getRegions()@me!=null && parent!=null -> it=regions.iterator()@me!=null && parent!=null -> LOOP { -> nextRegion=(ITextRegion) it.next()@it.hasNext() && me!=null && parent!=null } -> IF { -> documentPosition=parent.getStartOffset(prevRegion,)@prevRegion!=null && me!=null && parent!=null -> newContext=IStructuredDocumentContextFactory.INSTANCE.getContext(_context.getStructuredDocument(),documentPosition,)@prevRegion!=null && me!=null && parent!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/context/structureddocument/internal/impl/StructuredDocumentContextFactory.java!StructuredDocumentContextFactory!delegateGetContext][SEQ] =  -> it=_delegates.iterator()@ -> LOOP { -> delegateFactory=(IStructuredDocumentContextFactory2) (IAdaptable) it.next().getAdapter(IStructuredDocumentContextFactory2.class,)@it.hasNext() -> IF { -> context=delegateFactory.getContext(element,)@it.hasNext() && delegateFactory!=null -> IF { -> return context@it.hasNext() && delegateFactory!=null && context!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/context/structureddocument/internal/impl/StructuredDocumentContextFactory.java!StructuredDocumentContextFactory!delegateGetContext][SEQ] =  -> it=_delegates.iterator()@ -> LOOP { -> delegateFactory=(IStructuredDocumentContextFactory) (IAdaptable) it.next().getAdapter(IStructuredDocumentContextFactory.class,)@it.hasNext() -> context=delegateFactory.getContext(document,node,)@it.hasNext() -> IF { -> return context@it.hasNext() && context!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/context/structureddocument/internal/impl/StructuredDocumentContextFactory.java!StructuredDocumentContextFactory!delegateGetContext][SEQ] =  -> it=_delegates.iterator()@ -> LOOP { -> delegateFactory=(IStructuredDocumentContextFactory) (IAdaptable) it.next().getAdapter(IStructuredDocumentContextFactory.class,)@it.hasNext() -> context=delegateFactory.getContext(document,documentPosition,)@it.hasNext() -> IF { -> return context@it.hasNext() && context!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/context/structureddocument/internal/impl/StructuredDocumentContextFactory.java!StructuredDocumentContextFactory!delegateGetContext][SEQ] =  -> it=_delegates.iterator()@ -> LOOP { -> delegateFactory=(IStructuredDocumentContextFactory) (IAdaptable) it.next().getAdapter(IStructuredDocumentContextFactory.class,)@it.hasNext() -> context=delegateFactory.getContext(textViewer,documentPosition,)@it.hasNext() -> IF { -> return context@it.hasNext() && context!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/context/symbol/internal/impl/IBoundedListTypeDescriptorImpl.java!IBoundedListTypeDescriptorImpl!convertArgsToSignatures][SEQ] =  -> args=new ArrayList()@ -> it=methodArgs.iterator()@ -> LOOP { -> arg=it.next()@it.hasNext() -> className=arg.getClass().getName()@it.hasNext() -> resolvedName=Signature.createTypeSignature(className,true,)@it.hasNext() -> args.add(resolvedName,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/context/symbol/internal/impl/IBoundedMapTypeDescriptorImpl.java!IBoundedMapTypeDescriptorImpl!getFromMap][SEQ] =  -> it=getProperties().iterator()@ -> LOOP { -> symbol=(ISymbol) it.next()@it.hasNext() -> IF { -> return symbol@it.hasNext() && symbol.getName().equals(name,) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/context/symbol/internal/impl/ITypeDescriptorImpl.java!ITypeDescriptorImpl!instanceOf][SEQ] =  -> typeErasedSignature=Signature.getTypeErasure(typeSignature,)@ -> IF { -> return true@Signature.getTypeErasure(getTypeSignature(),)!=null&&Signature.getTypeErasure(getTypeSignature(),).equals(typeErasedSignature,) } -> it=getSuperTypeSignatures().iterator()@!(Signature.getTypeErasure(getTypeSignature(),)!=null&&Signature.getTypeErasure(getTypeSignature(),).equals(typeErasedSignature,)) -> LOOP { -> superType=(String) it.next()@it.hasNext() && !(Signature.getTypeErasure(getTypeSignature(),)!=null&&Signature.getTypeErasure(getTypeSignature(),).equals(typeErasedSignature,)) -> IF { -> return true@it.hasNext() && Signature.getTypeErasure(superType,).equals(typeErasedSignature,) && !(Signature.getTypeErasure(getTypeSignature(),)!=null&&Signature.getTypeErasure(getTypeSignature(),).equals(typeErasedSignature,)) } } -> it=getInterfaceTypeSignatures().iterator()@!(it.hasNext()) && !(Signature.getTypeErasure(getTypeSignature(),)!=null&&Signature.getTypeErasure(getTypeSignature(),).equals(typeErasedSignature,)) -> LOOP { -> superType=(String) it.next()@it.hasNext() && !(Signature.getTypeErasure(getTypeSignature(),)!=null&&Signature.getTypeErasure(getTypeSignature(),).equals(typeErasedSignature,)) -> IF { -> return true@it.hasNext() && Signature.getTypeErasure(superType,).equals(typeErasedSignature,) && !(Signature.getTypeErasure(getTypeSignature(),)!=null&&Signature.getTypeErasure(getTypeSignature(),).equals(typeErasedSignature,)) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/context/symbol/internal/provider/IPropertySymbolItemProvider.java!IPropertySymbolItemProvider!getProposalsInternal][SEQ] =  -> completions=new ArrayList()@ -> displayImage=ExtendedImageRegistry.getInstance().getImage(getImage(symbol,),)@ -> IF { -> props=symbol.getTypeDescriptor().getProperties()@symbol.isIntermediate() -> it=props.iterator()@symbol.isIntermediate() -> LOOP { -> propSymbol=(IPropertySymbol) it.next()@it.hasNext() && symbol.isIntermediate() -> IF { -> replacementText="['"+intermediatePrefix+symbol.getName()+"."+propSymbol.getName()+"']"@it.hasNext() && symbol.isIntermediate() && !propSymbol.isIntermediate() -> completions.add(proposalFactory.createProposal(replacementText,replacementText,null,displayImage,symbol,),)@it.hasNext() && symbol.isIntermediate() && !propSymbol.isIntermediate() } ELSE { -> completions.addAll(Arrays.asList(getProposalsInternal(propSymbol,proposalFactory,intermediatePrefix+symbol.getName()+".",),),)@it.hasNext() && !(!propSymbol.isIntermediate()) && symbol.isIntermediate() } } } ELSE { -> replacementText=intermediatePrefix+symbol.getName()@!(symbol.isIntermediate()) -> displayText=symbol.getName()@!(symbol.isIntermediate()) -> completions.add(createProposal(symbol,replacementText,displayText,displayImage,proposalFactory,),)@!(symbol.isIntermediate()) } -> return (ICompletionProposal[]) completions.toArray( new CustomCompletionProposal[],)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/contentassist/el/FunctionCompletionStrategy.java!MyProposalFactory!getRelevance][SEQ] =  -> IF { -> IF { -> methodSymbol=(IMethodSymbol) target@target instanceof IMethodSymbol && !(_expectedMethodBindings.size()>0) -> it=_expectedMethodBindings.iterator()@!(target instanceof IMethodSymbol) && _expectedMethodBindings.size()>0 -> LOOP { -> methodType=(String) it.next()@it.hasNext() && _expectedMethodBindings.size()>0 && target instanceof IMethodSymbol -> IF { -> return HIGH_RELEVANCE@it.hasNext() && methodType.equals(methodSymbol.getSignature(),) && _expectedMethodBindings.size()>0 && target instanceof IMethodSymbol } } -> return LOW_RELEVANCE@!(it.hasNext()) && _expectedMethodBindings.size()>0 && target instanceof IMethodSymbol } -> return NORMAL_RELEVANCE@!(target instanceof IMethodSymbol) && _expectedMethodBindings.size()>0 }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/contentassist/el/SymbolResolveUtil.java!SymbolResolveUtil!isMethodBindingExpected][SEQ] =  -> domResolver=IStructuredDocumentContextResolverFactory.INSTANCE.getDOMContextResolver(context,)@ -> curNode=domResolver.getNode()@ -> IF { -> attr=(Attr) curNode@curNode instanceof Attr -> element=attr.getOwnerElement()@curNode instanceof Attr -> taglibResolver=IStructuredDocumentContextResolverFactory.INSTANCE.getTaglibContextResolver(context,)@curNode instanceof Attr -> uri=taglibResolver.getTagURIForNodeName(element,)@curNode instanceof Attr -> elVals=MetaDataEnabledProcessingFactory.getInstance().getAttributeValueRuntimeTypeFeatureProcessors(IValidELValues.class,context,uri,element.getLocalName(),attr.getLocalName(),)@curNode instanceof Attr -> it=elVals.iterator()@curNode instanceof Attr -> LOOP { -> validValues=(IValidELValues) it.next()@it.hasNext() && curNode instanceof Attr -> TRY { -> type=validValues.getExpectedRuntimeType()@it.hasNext() && curNode instanceof Attr -> IF { -> IF { -> expectedBindings.addAll(Arrays.asList(validValues.getExpectedRuntimeType().getSignatures(),),)@it.hasNext() && type!=null&&type.getAssignmentTypeMask()==IAssignable.ASSIGNMENT_TYPE_NONE && expectedBindings!=null && curNode instanceof Attr } ELSE { -> return true@it.hasNext() && type!=null&&type.getAssignmentTypeMask()==IAssignable.ASSIGNMENT_TYPE_NONE && curNode instanceof Attr && !(expectedBindings!=null) } } } } -> return methodBindingExpected@!(it.hasNext()) && curNode instanceof Attr }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryconfig/JSFLibraryConfigModel.java!JSFLibraryConfigModel!getCurrentJSFComponentLibrarySelection][SEQ] =  -> list=new ArrayList()@ -> it=getJSFComponentLibraries().iterator()@ -> LOOP { -> crtItem=(JSFLibraryInternalReference) it.next()@it.hasNext() -> IF { -> list.add(crtItem,)@it.hasNext() && crtItem.isSelected() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryconfig/JSFLibraryConfigModel.java!JSFLibraryConfigModel!getJSFComponentLibraries][SEQ] =  -> IF { -> colJSFCompLib=jsfLibReg.getJSFComponentLibraries()@colJSFCompLib==null -> it=data.getJSFComponentLibraries().iterator()@ -> LOOP { -> targetItem=(JSFLibraryInternalReference) it.next()@it.hasNext() -> srcItem=jsfLibReg.getJSFLibraryReferencebyID(targetItem.getID(),)@it.hasNext() -> IF { -> srcItem.setSelected(true,)@it.hasNext() && srcItem!=null -> srcItem.setToBeDeployed(targetItem.isCheckedToBeDeployed(),)@it.hasNext() && srcItem!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryconfig/JSFLibraryConfigModel.java!JSFLibraryConfigModel!setCurrentJSFComponentLibrarySelection][SEQ] =  -> IF { -> it=libraries.iterator()@libraries!=null -> LOOP { -> crtItem=(JSFLibraryInternalReference) it.next()@it.hasNext() && libraries!=null -> srcItem=jsfLibReg.getJSFLibraryReferencebyID(crtItem.getID(),)@it.hasNext() && libraries!=null -> IF { -> srcItem.setSelected(true,)@it.hasNext() && srcItem!=null && libraries!=null -> srcItem.setToBeDeployed(crtItem.isCheckedToBeDeployed(),)@it.hasNext() && srcItem!=null && libraries!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryconfig/JSFLibraryConfigModel.java!JSFLibraryConfigModel!setJSFLibrariesSelection][SEQ] =  -> it=libs.iterator()@ -> LOOP { -> crtjsflib=(JSFLibraryInternalReference) it.next()@it.hasNext() -> crtjsflib.setSelected(state,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryconfig/JSFLibraryRegistryUtil.java!JSFLibraryRegistryUtil!findMatchedArchive][SEQ] =  -> it=list.iterator()@ -> LOOP { -> target=(ArchiveFile) it.next()@it.hasNext() -> IF { -> return true@it.hasNext() && target.equals(source,) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryconfig/JSFLibraryRegistryUtil.java!JSFLibraryRegistryUtil!getClasspathEntries][SEQ] =  -> res=new ArrayList(lib.getArchiveFiles().size(),)@ -> it=lib.getArchiveFiles().iterator()@ -> LOOP { -> jar=(ArchiveFile) it.next()@it.hasNext() -> IF { -> entry=getClasspathEntry(jar,)@it.hasNext() && jar!=null&&jar.exists() -> IF { -> res.add(entry,)@it.hasNext() && entry!=null && jar!=null&&jar.exists() } } } -> entries=(IClasspathEntry[]) res.toArray( new IClasspathEntry[],)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryconfig/JSFLibraryRegistryUtil.java!JSFLibraryRegistryUtil!getJSFLibraryReferencebyID][SEQ] =  -> it=getJSFImplementationLibraries().iterator()@ -> LOOP { -> crtItem=(JSFLibraryInternalReference) it.next()@it.hasNext() -> IF { -> return crtItem@it.hasNext() && id.equals(crtItem.getID(),) } } -> it=getJSFComponentLibraries().iterator()@!(it.hasNext()) -> LOOP { -> crtItem=(JSFLibraryInternalReference) it.next()@it.hasNext() -> IF { -> return crtItem@it.hasNext() && id.equals(crtItem.getID(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryconfig/JSFLibraryRegistryUtil.java!JSFLibraryRegistryUtil!isAnyArchiveFileChanged][SEQ] =  -> it=source.iterator()@ -> LOOP { -> arSrc=(ArchiveFile) it.next()@it.hasNext() -> IF { -> return true@it.hasNext() && !findMatchedArchive(arSrc,target,) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryconfig/JSFLibraryRegistryUtil.java!JSFLibraryRegistryUtil!isAnyLibraryChanged][SEQ] =  -> it=list.iterator()@ -> LOOP { -> wclib=(JSFLibraryInternalReference) it.next()@it.hasNext() -> lib=getJSFLibraryRegistry().getJSFLibraryByID(wclib.getID(),)@it.hasNext() -> IF { -> return true@it.hasNext() && lib==null } -> IF { -> return true@it.hasNext() && wclib.getArchiveFiles().size()!=lib.getArchiveFiles().size() && !(lib==null) } -> IF { -> return true@it.hasNext() && !(lib==null) && isAnyArchiveFileChanged(wclib.getArchiveFiles(),lib.getArchiveFiles(),) && !(wclib.getArchiveFiles().size()!=lib.getArchiveFiles().size()) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryconfig/JSFLibraryRegistryUtil.java!JSFLibraryRegistryUtil!wrapJSFLibraries][SEQ] =  -> list=new ArrayList()@ -> IF { -> it=libs.iterator()@libs!=null -> LOOP { -> jsfLib=(JSFLibrary) it.next()@it.hasNext() && libs!=null -> jsfLibDctr=new JSFLibraryInternalReference(jsfLib,false,false,)@it.hasNext() && libs!=null -> list.add(jsfLibDctr,)@it.hasNext() && libs!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/impl/JSFLibraryImpl.java!JSFLibraryImpl!containsArchiveFile][SEQ] =  -> IF { -> itArchiveFiles=getArchiveFiles().iterator()@ -> LOOP { -> archiveFile=(ArchiveFile) itArchiveFiles.next()@fullPath!=null && itArchiveFiles.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/impl/JSFLibraryImpl.java!JSFLibraryImpl!copyTo][SEQ] =  -> itFiles=getArchiveFiles().iterator()@ -> LOOP { -> archiveFile=(ArchiveFile) itFiles.next()@itFiles.hasNext() -> copied=archiveFile.copyTo(baseDestLocation,)@itFiles.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/impl/JSFLibraryImpl.java!JSFLibraryImpl!getWorkingCopy][SEQ] =  -> workingCopyLib=JSFLibraryRegistryFactory.eINSTANCE.createJSFLibrary()@ -> workingCopyLib.setName(getName(),)@ -> workingCopyLib.setJSFVersion(getJSFVersion(),)@ -> workingCopyLib.setDeployed(isDeployed(),)@ -> workingCopyLib.setImplementation(isImplementation(),)@ -> itArchiveFiles=getArchiveFiles().iterator()@ -> LOOP { -> srcArchiveFile=(ArchiveFile) itArchiveFiles.next()@itArchiveFiles.hasNext() -> destArchiveFile=JSFLibraryRegistryFactory.eINSTANCE.createArchiveFile()@ -> destArchiveFile.setRelativeToWorkspace(srcArchiveFile.isRelativeToWorkspace(),)@itArchiveFiles.hasNext() -> destArchiveFile.setSourceLocation(srcArchiveFile.getSourceLocation(),)@itArchiveFiles.hasNext() -> destArchiveFile.setRelativeDestLocation(srcArchiveFile.getRelativeDestLocation(),)@itArchiveFiles.hasNext() -> workingCopyLib.getArchiveFiles().add(destArchiveFile,)@ }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/impl/JSFLibraryImpl.java!JSFLibraryImpl!updateValues][SEQ] =  -> IF { -> setName(otherLibrary.getName(),)@otherLibrary!=null -> setJSFVersion(otherLibrary.getJSFVersion(),)@otherLibrary!=null -> setDeployed(otherLibrary.isDeployed(),)@otherLibrary!=null -> setImplementation(otherLibrary.isImplementation(),)@otherLibrary!=null -> itArchiveFiles=otherLibrary.getArchiveFiles().iterator()@otherLibrary!=null -> LOOP { -> srcArchiveFile=(ArchiveFile) itArchiveFiles.next()@itArchiveFiles.hasNext() && otherLibrary!=null -> destArchiveFile=JSFLibraryRegistryFactory.eINSTANCE.createArchiveFile()@ -> destArchiveFile.setRelativeToWorkspace(srcArchiveFile.isRelativeToWorkspace(),)@itArchiveFiles.hasNext() && otherLibrary!=null -> destArchiveFile.setSourceLocation(srcArchiveFile.getSourceLocation(),)@itArchiveFiles.hasNext() && otherLibrary!=null -> destArchiveFile.setRelativeDestLocation(srcArchiveFile.getRelativeDestLocation(),)@itArchiveFiles.hasNext() && otherLibrary!=null -> getArchiveFiles().add(destArchiveFile,)@ } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/impl/JSFLibraryRegistryImpl.java!JSFLibraryRegistryImpl!getImplJSFLibraries][SEQ] =  -> implementations=new BasicEList()@ -> itLibs=getAllJSFLibraries().iterator()@ -> LOOP { -> lib=(JSFLibrary) itLibs.next()@itLibs.hasNext() -> IF { -> implementations.add(lib,)@itLibs.hasNext() && lib.isImplementation() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/impl/JSFLibraryRegistryImpl.java!JSFLibraryRegistryImpl!getJSFLibrariesByName][SEQ] =  -> libraries=new BasicEList()@ -> IF { -> itLibs=getAllJSFLibraries().iterator()@ -> LOOP { -> curLib=(JSFLibrary) itLibs.next()@itLibs.hasNext() && name!=null -> IF { -> libraries.add(curLib,)@itLibs.hasNext() && name!=null && name.equals(curLib.getName(),) } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/impl/JSFLibraryRegistryImpl.java!JSFLibraryRegistryImpl!getJSFLibraryByID][SEQ] =  -> IF { -> itLibs=getAllJSFLibraries().iterator()@ -> LOOP { -> curLib=(JSFLibrary) itLibs.next()@itLibs.hasNext() && ID!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/impl/JSFLibraryRegistryImpl.java!JSFLibraryRegistryImpl!getNonImplJSFLibraries][SEQ] =  -> nonImplementations=new BasicEList()@ -> itLibs=getAllJSFLibraries().iterator()@ -> LOOP { -> lib=(JSFLibrary) itLibs.next()@itLibs.hasNext() -> IF { -> nonImplementations.add(lib,)@!lib.isImplementation() && itLibs.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/impl/PluginProvidedJSFLibraryImpl.java!PluginProvidedJSFLibraryImpl!getWorkingCopy][SEQ] =  -> workingCopyLib=JSFLibraryRegistryFactory.eINSTANCE.createPluginProvidedJSFLibrary()@ -> workingCopyLib.setName(getName(),)@ -> IF { -> workingCopyLib.setLabel(getLabel(),)@ } -> workingCopyLib.setJSFVersion(getJSFVersion(),)@ -> workingCopyLib.setDeployed(isDeployed(),)@ -> workingCopyLib.setImplementation(isImplementation(),)@ -> workingCopyLib.setPluginID(getPluginID(),)@ -> itArchiveFiles=getArchiveFiles().iterator()@ -> LOOP { -> srcArchiveFile=(ArchiveFile) itArchiveFiles.next()@itArchiveFiles.hasNext() -> destArchiveFile=JSFLibraryRegistryFactory.eINSTANCE.createArchiveFile()@itArchiveFiles.hasNext() -> destArchiveFile.setRelativeToWorkspace(srcArchiveFile.isRelativeToWorkspace(),)@itArchiveFiles.hasNext() -> destArchiveFile.setSourceLocation(srcArchiveFile.getSourceLocation(),)@itArchiveFiles.hasNext() -> destArchiveFile.setRelativeDestLocation(srcArchiveFile.getRelativeDestLocation(),)@itArchiveFiles.hasNext() -> workingCopyLib.getArchiveFiles().add(destArchiveFile,)@itArchiveFiles.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/util/UpgradeOperation.java!UpgradeOperation!canExecute][SEQ] =  -> it=_stepOperations.iterator()@ -> LOOP { -> op=(IUndoableOperation) it.next()@it.hasNext() -> IF { -> return false@it.hasNext() && !op.canExecute() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/util/UpgradeOperation.java!UpgradeOperation!canRedo][SEQ] =  -> it=_stepOperations.iterator()@ -> LOOP { -> op=(IUndoableOperation) it.next()@it.hasNext() -> IF { -> return false@it.hasNext() && !op.canRedo() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/util/UpgradeOperation.java!UpgradeOperation!canUndo][SEQ] =  -> it=_stepOperations.iterator()@ -> LOOP { -> op=(IUndoableOperation) it.next()@it.hasNext() -> IF { -> return false@it.hasNext() && !op.canUndo() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/util/UpgradeOperation.java!UpgradeOperation!commit][SEQ] =  -> it=_stepOperations.iterator()@ -> LOOP { -> op=(VersionUpgradeOperation) it.next()@it.hasNext() -> IF { -> status=op.commit()@it.hasNext() && op.canCommit() -> IF { -> return status@it.hasNext() && status.getSeverity()!=IStatus.OK && op.canCommit() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/util/UpgradeOperation.java!UpgradeOperation!dispose][SEQ] =  -> it=_stepOperations.iterator()@ -> LOOP { -> op=(IUndoableOperation) it.next()@it.hasNext() -> op.dispose()@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/util/UpgradeOperation.java!UpgradeOperation!execute][SEQ] =  -> it=_stepOperations.iterator()@ -> LOOP { -> op=(VersionUpgradeOperation) it.next()@it.hasNext() -> status=(UpgradeStatus) op.execute(monitor,info,)@it.hasNext() -> IF { -> return status@it.hasNext() && status.getSeverity()!=IStatus.OK } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/util/UpgradeOperation.java!UpgradeOperation!redo][SEQ] =  -> it=_stepOperations.iterator()@ -> LOOP { -> op=(VersionUpgradeOperation) it.next()@it.hasNext() -> status=op.redo(monitor,info,)@it.hasNext() -> IF { -> return status@it.hasNext() && status.getSeverity()!=IStatus.OK } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/jsflibraryregistry/util/UpgradeOperation.java!UpgradeOperation!undo][SEQ] =  -> it=_stepOperations.iterator()@ -> LOOP { -> op=(VersionUpgradeOperation) it.next()@it.hasNext() -> status=op.undo(monitor,info,)@it.hasNext() -> IF { -> return status@it.hasNext() && status.getSeverity()!=IStatus.OK } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/J2EEUtils.java!J2EEUtils!doesServletMappingExist][SEQ] =  -> mappings=webApp.getServletMappings()@ -> servletName=servlet.getServletName()@ -> IF { -> it=mappings.iterator()@!(servletName!=null) -> LOOP { -> mapping=(ServletMapping) it.next()@it.hasNext() && servletName!=null -> IF { -> return true@it.hasNext() && servletName!=null && mapping!=null&&mapping.getServlet()!=null&&mapping.getServlet().getServletName()!=null&&mapping.getServlet().getServletName().trim().equals(servletName,)&&mapping.getUrlPattern()!=null&&mapping.getUrlPattern().trim().equals(pattern,) } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/J2EEUtils.java!J2EEUtils!findServlet][SEQ] =  -> IF { -> return null@webApp==null } -> it=webApp.getServlets().iterator()@!(webApp==null) -> LOOP { -> servlet=(Servlet) it.next()@it.hasNext() && !(webApp==null) -> IF { -> IF { -> IF { -> return servlet@it.hasNext() && servlet!=null&&servlet.getWebType()!=null && (ServletType) servlet.getWebType().getClassName()!=null&&(ServletType) servlet.getWebType().getClassName().trim().equals(servletName,) && !(webApp==null) && servlet.getWebType().isServletType() } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/J2EEUtils.java!J2EEUtils!getContextParam][SEQ] =  -> IF { -> it=webApp.getContexts().iterator()@"2.3".equals(webApp.getVersion(),) -> LOOP { -> cp=(ContextParam) it.next()@it.hasNext() && "2.3".equals(webApp.getVersion(),) -> IF { -> return cp.getParamValue()@it.hasNext() && cp!=null&&cp.getParamName()!=null&&cp.getParamName().trim().equals(paramName,) && "2.3".equals(webApp.getVersion(),) } } } ELSE { -> IF { -> it=webApp.getContextParams().iterator()@!("2.3".equals(webApp.getVersion(),)) && "2.4".equals(webApp.getVersion(),) -> LOOP { -> cp=(ParamValue) it.next()@it.hasNext() && !("2.3".equals(webApp.getVersion(),)) && "2.4".equals(webApp.getVersion(),) -> IF { -> return cp.getValue()@it.hasNext() && !("2.3".equals(webApp.getVersion(),)) && "2.4".equals(webApp.getVersion(),) && cp!=null&&cp.getName()!=null&&cp.getName().trim().equals(paramName,) } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/J2EEUtils.java!J2EEUtils!removeContextParam][SEQ] =  -> IF { -> it=webApp.getContexts().iterator()@"2.3".equals(webApp.getVersion(),) -> LOOP { -> cp=(ContextParam) it.next()@it.hasNext() && "2.3".equals(webApp.getVersion(),) -> IF { -> webApp.getContexts().remove(cp,)@it.hasNext() && cp.getParamName().equals(paramName,) && "2.3".equals(webApp.getVersion(),) } } } ELSE { -> IF { -> it=webApp.getContextParams().iterator()@!("2.3".equals(webApp.getVersion(),)) && "2.4".equals(webApp.getVersion(),) -> LOOP { -> cp=(ParamValue) it.next()@it.hasNext() && !("2.3".equals(webApp.getVersion(),)) && "2.4".equals(webApp.getVersion(),) -> IF { -> webApp.getContextParams().remove(cp,)@it.hasNext() && !("2.3".equals(webApp.getVersion(),)) && "2.4".equals(webApp.getVersion(),) && cp.getName().equals(paramName,) } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/J2EEUtils.java!J2EEUtils!setUpURLMappings][SEQ] =  -> it=urlMappingList.iterator()@ -> LOOP { -> pattern=(String) it.next()@it.hasNext() -> IF { -> mapping=WebapplicationFactory.eINSTANCE.createServletMapping()@it.hasNext() && !doesServletMappingExist(webApp,servlet,pattern,) -> mapping.setServlet(servlet,)@!doesServletMappingExist(webApp,servlet,pattern,) -> mapping.setName(servlet.getServletName(),)@!doesServletMappingExist(webApp,servlet,pattern,) -> mapping.setUrlPattern(pattern,)@it.hasNext() && !doesServletMappingExist(webApp,servlet,pattern,) -> webApp.getServletMappings().add(mapping,)@it.hasNext() && !doesServletMappingExist(webApp,servlet,pattern,) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/J2EEUtils.java!J2EEUtils!setupContextParamForV2_3][SEQ] =  -> it=webApp.getContexts().iterator()@ -> LOOP { -> cp=(ContextParam) it.next()@it.hasNext() } -> IF { -> cp=WebapplicationFactory.eINSTANCE.createContextParam()@ -> cp.setParamName(paramName,)@ -> cp.setParamValue(paramValue,)@ -> webApp.getContexts().add(cp,)@ } ELSE { -> IF { -> curVal=cp.getParamValue()@cp.getParamValue().indexOf(paramValue,)<0 -> cp.setParamValue(val,)@cp.getParamValue().indexOf(paramValue,)<0 } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/J2EEUtils.java!J2EEUtils!setupContextParamForV2_4][SEQ] =  -> it=webApp.getContextParams().iterator()@ -> LOOP { -> cp=(ParamValue) it.next()@it.hasNext() } -> IF { -> pv=CommonFactory.eINSTANCE.createParamValue()@ -> pv.setName(paramName,)@ -> pv.setValue(paramValue,)@ -> webApp.getContextParams().add(pv,)@ } ELSE { -> IF { -> curVal=cp.getValue()@cp.getValue().indexOf(paramValue,)<0 -> cp.setValue(val,)@cp.getValue().indexOf(paramValue,)<0 } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/JEEUtils.java!JEEUtils!findServletMapping][SEQ] =  -> it=webApp.getServletMappings().iterator()@ -> LOOP { -> mapping=(ServletMapping) it.next()@it.hasNext() -> IF { -> return mapping@it.hasNext() && mapping.getServletName()!=null&&servlet.getServletName()!=null&&mapping.getServletName().trim().equals(servlet.getServletName().trim(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/JEEUtils.java!JEEUtils!getContextParam][SEQ] =  -> it=webApp.getContextParams().iterator()@ -> LOOP { -> cp=(ParamValue) it.next()@it.hasNext() -> IF { -> return cp.getParamValue()@it.hasNext() && cp!=null&&cp.getParamName()!=null&&cp.getParamName().trim().equals(paramName,) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/JEEUtils.java!JEEUtils!getFileExtensionFromMap][SEQ] =  -> urls=map.getUrlPatterns()@ -> it=urls.iterator()@ -> LOOP { -> extPath=new Path((UrlPatternType) it.next().getValue(),)@it.hasNext() -> IF { -> ext=extPath.getFileExtension()@it.hasNext() && extPath!=null -> IF { -> return ext@it.hasNext() && extPath!=null && ext!=null&&!ext.equals("",) } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/JEEUtils.java!JEEUtils!getPrefixMapping][SEQ] =  -> urls=map.getUrlPatterns()@ -> it=urls.iterator()@ -> LOOP { -> extPath=new Path((UrlPatternType) it.next().getValue(),)@it.hasNext() -> IF { -> ext=extPath.getFileExtension()@it.hasNext() && extPath!=null -> IF { -> lastSeg=extPath.lastSegment()@it.hasNext() && extPath!=null && ext==null -> IF { -> return extPath.removeLastSegments(1,).toString()@it.hasNext() && extPath!=null && ext==null && lastSeg.equals("*",) } -> return extPath.toString()@it.hasNext() && extPath!=null && ext==null && !(lastSeg.equals("*",)) } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/JEEUtils.java!JEEUtils!removeContextParam][SEQ] =  -> it=webApp.getContextParams().iterator()@ -> LOOP { -> cp=(ParamValue) it.next()@it.hasNext() -> IF { -> webApp.getContextParams().remove(cp,)@it.hasNext() && cp.getParamName().equals(paramName,) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/JEEUtils.java!JEEUtils!setupContextParam][SEQ] =  -> it=webApp.getContextParams().iterator()@ -> LOOP { -> cp=(org.eclipse.jst.javaee.core.ParamValue) it.next()@it.hasNext() } -> IF { -> pv=JavaeeFactory.eINSTANCE.createParamValue()@ -> pv.setParamName(paramName,)@ -> pv.setParamValue(paramValue,)@ -> webApp.getContextParams().add(pv,)@ } ELSE { -> IF { -> curVal=cp.getParamValue()@cp.getParamValue().indexOf(paramValue,)<0 -> cp.setParamValue(val,)@cp.getParamValue().indexOf(paramValue,)<0 } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/JSFFacetInstallDataModelProvider.java!JSFFacetInstallDataModelProvider!checkForDupeArchiveFiles][SEQ] =  -> IF { -> return OK_STATUS@aJSFLib==null } -> it=aJSFLib.getArchiveFiles().iterator()@!(aJSFLib==null) -> LOOP { -> jar=(ArchiveFile) it.next()@it.hasNext() && !(aJSFLib==null) -> IF { -> return createErrorStatus(NLS.bind(Messages.JSFFacetInstallDataModelProvider_DupeJarValidation,jar.getResolvedSourceLocation(),),)@it.hasNext() && !(aJSFLib==null) && jars.contains(jar.getResolvedSourceLocation(),) } -> jars.add(jar.getResolvedSourceLocation(),)@it.hasNext() && !(aJSFLib==null) && !(jars.contains(jar.getResolvedSourceLocation(),)) }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/JSFUtils.java!JSFLibraryHandler!numberofValidJar][SEQ] =  -> it=archiveFiles.iterator()@ -> LOOP { -> ar=(ArchiveFile) it.next()@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/project/facet/JSFUtils.java!JSFUtils!getFileUrlPath][SEQ] =  -> IF { -> return null@!isJSFPage(resource,) } -> servlet=findJSFServlet(webAppObj,)@!(!isJSFPage(resource,)) -> implicitServletMappings=new ArrayList()@!(!isJSFPage(resource,)) -> IF { -> servlet=createImplicitServletAndMapping(webAppObj,implicitServletMappings,)@!(!isJSFPage(resource,)) && servlet==null } -> defaultSuffix=getDefaultSuffix(webAppObj,)@!(!isJSFPage(resource,)) -> fileExtension=resource.getFileExtension()@!(!isJSFPage(resource,)) -> canUseExtensionMapping=fileExtension!=null&&fileExtension.equalsIgnoreCase(defaultSuffix,)@!(!isJSFPage(resource,)) -> IF { -> return null@!(!isJSFPage(resource,)) && !canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),) } -> IF { -> webApp=(org.eclipse.jst.javaee.web.WebApp) webAppObj@!(!isJSFPage(resource,)) && isJavaEE(webAppObj,) && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) -> servletName=(org.eclipse.jst.javaee.web.Servlet) servlet.getServletName()@!(!isJSFPage(resource,)) && isJavaEE(webAppObj,) && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) -> IF { -> mappings=webApp.getServletMappings()@!(!isJSFPage(resource,)) && webApp.getServletMappings().size()>0 && isJavaEE(webAppObj,) && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) } -> LOOP { -> IF { -> foundFileExtension=getFileExtensionFromMap(webAppObj,map,)@!(!isJSFPage(resource,)) && map!=null&&map.getServletName()!=null&&map.getServletName().trim().equals(servletName.trim(),) && isJavaEE(webAppObj,) && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) && (List<org.eclipse.jst.javaee.web.ServletMapping>) mappings -> IF { -> return existingURL.removeFileExtension().addFileExtension(foundFileExtension,)@!(!isJSFPage(resource,)) && map!=null&&map.getServletName()!=null&&map.getServletName().trim().equals(servletName.trim(),) && isJavaEE(webAppObj,) && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) && (List<org.eclipse.jst.javaee.web.ServletMapping>) mappings && foundFileExtension!=null&&canUseExtensionMapping } -> foundPrefixMapping=getPrefixMapping(webAppObj,map,)@!(!isJSFPage(resource,)) && map!=null&&map.getServletName()!=null&&map.getServletName().trim().equals(servletName.trim(),) && !(foundFileExtension!=null&&canUseExtensionMapping) && isJavaEE(webAppObj,) && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) && (List<org.eclipse.jst.javaee.web.ServletMapping>) mappings -> IF { -> return new Path(foundPrefixMapping,).append(existingURL,)@!(!isJSFPage(resource,)) && map!=null&&map.getServletName()!=null&&map.getServletName().trim().equals(servletName.trim(),) && !(foundFileExtension!=null&&canUseExtensionMapping) && isJavaEE(webAppObj,) && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) && (List<org.eclipse.jst.javaee.web.ServletMapping>) mappings && foundPrefixMapping!=null } } } -> IF { -> return existingURL.removeFileExtension().addFileExtension(foundFileExtension,)@!(!isJSFPage(resource,)) && isJavaEE(webAppObj,) && !canUseExtensionMapping&&foundFileExtension!=null && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) && !((List<org.eclipse.jst.javaee.web.ServletMapping>) mappings) } } ELSE { -> IF { -> mappings=(org.eclipse.jst.j2ee.webapplication.Servlet) servlet.getMappings()@!(!isJSFPage(resource,)) && !(isJavaEE(webAppObj,)) && (org.eclipse.jst.j2ee.webapplication.Servlet) servlet.getMappings().size()>0 && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) } -> itMappings=mappings.iterator()@!(!isJSFPage(resource,)) && !(isJavaEE(webAppObj,)) && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) -> LOOP { -> map=(org.eclipse.jst.j2ee.webapplication.ServletMapping) itMappings.next()@!(!isJSFPage(resource,)) && !(isJavaEE(webAppObj,)) && itMappings.hasNext() && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) -> foundFileExtension=getFileExtensionFromMap(webAppObj,map,)@!(!isJSFPage(resource,)) && !(isJavaEE(webAppObj,)) && itMappings.hasNext() && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) -> IF { -> return existingURL.removeFileExtension().addFileExtension(foundFileExtension,)@!(!isJSFPage(resource,)) && !(isJavaEE(webAppObj,)) && itMappings.hasNext() && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) && foundFileExtension!=null&&canUseExtensionMapping } -> IF { -> foundPrefixMapping=getPrefixMapping(webAppObj,map,)@!(!isJSFPage(resource,)) && !(isJavaEE(webAppObj,)) && itMappings.hasNext() && !(foundFileExtension!=null&&canUseExtensionMapping) && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) && foundPrefixMapping==null } } -> IF { -> return new Path(foundPrefixMapping,).append(existingURL,)@!(!isJSFPage(resource,)) && !(itMappings.hasNext()) && !(isJavaEE(webAppObj,)) && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) && foundPrefixMapping!=null } -> IF { -> return existingURL.removeFileExtension().addFileExtension(foundFileExtension,)@!(!isJSFPage(resource,)) && !(foundPrefixMapping!=null) && !(itMappings.hasNext()) && !(isJavaEE(webAppObj,)) && !canUseExtensionMapping&&foundFileExtension!=null && !(!canUseExtensionMapping&&!isValidKnownExtension(resource.getFileExtension(),)) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/tld/CMUtil.java!CMUtil!getTLDElementDeclaration][SEQ] =  -> tldmgr=TaglibController.getTLDCMDocumentManager(document,)@ -> IF { -> it=tldmgr.getTaglibTrackers().iterator()@tldmgr!=null -> LOOP { -> tracker=(TaglibTracker) it.next()@it.hasNext() && tldmgr!=null -> IF { -> return (CMElementDeclaration) tracker.getElements().getNamedItem(tracker.getPrefix()+":"+elementName,)@it.hasNext() && tldmgr!=null && tracker.getURI().equals(uri,) } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/internal/tld/LoadBundleUtil.java!!next][SEQ] =  -> return baseName+it.next()@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/AbstractJSFAppConfigLocater.java!AbstractJSFAppConfigLocater!updateConfigProviders][SEQ] =  -> IF { -> oldConfigProviders=new LinkedHashSet()@ -> itConfigProviders=configProviders.iterator()@ -> LOOP { -> configProvider=(IJSFAppConfigProvider) itConfigProviders.next()@newConfigProviders!=null && itConfigProviders.hasNext() -> IF { -> oldConfigProviders.add(configProvider,)@newConfigProviders!=null && !newConfigProviders.remove(configProvider,) && itConfigProviders.hasNext() } } -> itOldConfigProviders=oldConfigProviders.iterator()@ -> LOOP { -> configProvider=(IJSFAppConfigProvider) itOldConfigProviders.next()@itOldConfigProviders.hasNext() -> removeConfigProvider(configProvider,)@itOldConfigProviders.hasNext() } -> itNewConfigProviders=newConfigProviders.iterator()@newConfigProviders!=null -> LOOP { -> configProvider=(IJSFAppConfigProvider) itNewConfigProviders.next()@itNewConfigProviders.hasNext() && newConfigProviders!=null -> addConfigProvider(configProvider,)@itNewConfigProviders.hasNext() && newConfigProviders!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/ContextParamSpecifiedJSFAppConfigLocater.java!ContextParamSpecifiedJSFAppConfigLocater!startLocatingJ2EEConfigs][SEQ] =  -> webApp.eAdapters().add(contextParamAdapter,)@ -> contexts=webApp.getContexts()@ -> IF { -> itContexts=contexts.iterator()@contexts!=null -> LOOP { -> contextParam=(ContextParam) itContexts.next()@itContexts.hasNext() && contexts!=null -> contextParam.eAdapters().add(contextParamAdapter,)@itContexts.hasNext() && contexts!=null } } -> contextParams=webApp.getContextParams()@ -> IF { -> itContextParams=contextParams.iterator()@contextParams!=null -> LOOP { -> paramValue=(ParamValue) itContextParams.next()@contextParams!=null && itContextParams.hasNext() -> paramValue.eAdapters().add(contextParamAdapter,)@contextParams!=null && itContextParams.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/ContextParamSpecifiedJSFAppConfigLocater.java!ContextParamSpecifiedJSFAppConfigLocater!startLocatingJEEConfigs][SEQ] =  -> (EObject) webApp.eAdapters().add(contextParamAdapter,)@ -> params=webApp.getContextParams()@ -> IF { -> itContexts=params.iterator()@params!=null -> LOOP { -> contextParam=(EObject) itContexts.next()@itContexts.hasNext() && params!=null -> contextParam.eAdapters().add(contextParamAdapter,)@itContexts.hasNext() && params!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/ContextParamSpecifiedJSFAppConfigLocater.java!ContextParamSpecifiedJSFAppConfigLocater!stopLocatingJ2EEConfigs][SEQ] =  -> webApp.eAdapters().remove(contextParamAdapter,)@ -> contexts=webApp.getContexts()@ -> IF { -> itContexts=contexts.iterator()@contexts!=null -> LOOP { -> contextParam=(ContextParam) itContexts.next()@itContexts.hasNext() && contexts!=null -> contextParam.eAdapters().remove(contextParamAdapter,)@itContexts.hasNext() && contexts!=null } } -> contextParams=webApp.getContextParams()@ -> IF { -> itContextParams=contextParams.iterator()@contextParams!=null -> LOOP { -> paramValue=(ParamValue) itContextParams.next()@contextParams!=null && itContextParams.hasNext() -> paramValue.eAdapters().remove(contextParamAdapter,)@contextParams!=null && itContextParams.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/ContextParamSpecifiedJSFAppConfigLocater.java!ContextParamSpecifiedJSFAppConfigLocater!stopLocatingJEEConfigs][SEQ] =  -> (EObject) webApp.eAdapters().remove(contextParamAdapter,)@ -> contextParams=webApp.getContextParams()@ -> IF { -> itContextParams=contextParams.iterator()@contextParams!=null -> LOOP { -> paramValue=(EObject) itContextParams.next()@contextParams!=null && itContextParams.hasNext() -> paramValue.eAdapters().remove(contextParamAdapter,)@contextParams!=null && itContextParams.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/JSFAppConfigUtils.java!JSFAppConfigUtils!getConfigFilesForJ2EEApp][SEQ] =  -> webArtifactEdit=WebArtifactEdit.getWebArtifactEditForRead(project,)@ -> IF { -> TRY { -> TRY { -> webApp=webArtifactEdit.getWebApp()@webArtifactEdit!=null } CATCH { -> return filesList@webArtifactEdit!=null } -> IF { -> filesString=null@!(webArtifactEdit!=null) -> IF { -> contexts=webApp.getContexts()@webApp.getVersionID()==J2EEVersionConstants.WEB_2_3_ID && webArtifactEdit!=null && webApp!=null -> itContexts=contexts.iterator()@webApp.getVersionID()==J2EEVersionConstants.WEB_2_3_ID && webArtifactEdit!=null && webApp!=null -> LOOP { -> contextParam=(ContextParam) itContexts.next()@webApp.getVersionID()==J2EEVersionConstants.WEB_2_3_ID && itContexts.hasNext() && webArtifactEdit!=null && webApp!=null -> IF { -> filesString=contextParam.getParamValue()@webApp.getVersionID()==J2EEVersionConstants.WEB_2_3_ID && itContexts.hasNext() && webArtifactEdit!=null && webApp!=null && contextParam.getParamName().equals(CONFIG_FILES_CONTEXT_PARAM_NAME,) } } } ELSE { -> contextParams=webApp.getContextParams()@!(webApp.getVersionID()==J2EEVersionConstants.WEB_2_3_ID) && webArtifactEdit!=null && webApp!=null -> itContextParams=contextParams.iterator()@!(webApp.getVersionID()==J2EEVersionConstants.WEB_2_3_ID) && webArtifactEdit!=null && webApp!=null -> LOOP { -> paramValue=(ParamValue) itContextParams.next()@!(webApp.getVersionID()==J2EEVersionConstants.WEB_2_3_ID) && webArtifactEdit!=null && webApp!=null && itContextParams.hasNext() -> IF { -> filesString=paramValue.getValue()@paramValue.getName().equals(CONFIG_FILES_CONTEXT_PARAM_NAME,) && !(webApp.getVersionID()==J2EEVersionConstants.WEB_2_3_ID) && webArtifactEdit!=null && webApp!=null && itContextParams.hasNext() } } } -> filesList=parseFilesString(filesString,)@!(webArtifactEdit!=null) } } FINALLY { -> webArtifactEdit.dispose()@webArtifactEdit!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/JSFAppConfigUtils.java!JSFAppConfigUtils!getConfigFilesForJEEApp][SEQ] =  -> contextParams=webApp.getContextParams()@ -> itContextParams=contextParams.iterator()@ -> LOOP { -> paramValue=(org.eclipse.jst.javaee.core.ParamValue) itContextParams.next()@itContextParams.hasNext() -> IF { -> filesString=paramValue.getParamValue()@paramValue.getParamName().equals(CONFIG_FILES_CONTEXT_PARAM_NAME,) && itContextParams.hasNext() } } -> return parseFilesString(filesString,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/JSFAppConfigUtils.java!JSFAppConfigUtils!getProjectFacet][SEQ] =  -> IF { -> TRY { -> facetedProject=ProjectFacetsManager.create(project,)@project!=null&&project.isAccessible() -> IF { -> projectFacets=facetedProject.getProjectFacets()@facetedProject!=null && project!=null&&project.isAccessible() -> itProjectFacets=projectFacets.iterator()@facetedProject!=null && project!=null&&project.isAccessible() -> LOOP { -> projectFacetVersion=(IProjectFacetVersion) itProjectFacets.next()@facetedProject!=null && project!=null&&project.isAccessible() && itProjectFacets.hasNext() -> IF { -> return projectFacetVersion@facetedProject!=null && IJSFCoreConstants.JSF_CORE_FACET_ID.equals(projectFacetVersion.getProjectFacet().getId(),) && project!=null&&project.isAccessible() && itProjectFacets.hasNext() } } } } CATCH { } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/RuntimeClasspathJSFAppConfigLocater.java!RuntimeClasspathJSFAppConfigLocater!locateProviders][SEQ] =  -> TRY { -> JARs=JSFAppConfigUtils.getConfigFileJARsFromClasspath(getJSFAppConfigManager().getProject(),)@ -> itJARs=JARs.iterator()@ -> newConfigProviders=new LinkedHashSet()@ -> LOOP { -> JARFilename=(String) itJARs.next()@itJARs.hasNext() -> configProvider=new JARFileJSFAppConfigProvider(JARFilename,)@itJARs.hasNext() -> newConfigProviders.add(configProvider,)@itJARs.hasNext() } -> updateConfigProviders(newConfigProviders,)@ } CATCH { } CATCH { }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/WebContentRelativeJSFAppConfigLocater.java!WebContentRelativeJSFAppConfigLocater!locateProviders][SEQ] =  -> project=manager.getProject()@ -> webContentFolder=new DefaultVirtualComponentQuery().getWebContentFolder(project,)@ -> IF { -> filenames=getFilenames()@ -> itFilenames=filenames.iterator()@ -> newConfigProviders=new LinkedHashSet()@ -> LOOP { -> filename=(String) itFilenames.next()@itFilenames.hasNext() && webContentFolder!=null -> appConfigResource=webContentFolder.findMember(filename,)@itFilenames.hasNext() && webContentFolder!=null -> IF { -> file=(IFile) appConfigResource.getUnderlyingResource()@appConfigResource!=null&&appConfigResource.getType()==IVirtualResource.FILE && itFilenames.hasNext() && webContentFolder!=null -> IF { -> configProvider=new ArtifactEditJSFAppConfigProvider(file,)@appConfigResource!=null&&appConfigResource.getType()==IVirtualResource.FILE && file!=null&&file.exists() && itFilenames.hasNext() && webContentFolder!=null -> newConfigProviders.add(configProvider,)@appConfigResource!=null&&appConfigResource.getType()==IVirtualResource.FILE && file!=null&&file.exists() && itFilenames.hasNext() && webContentFolder!=null } } } -> updateConfigProviders(newConfigProviders,)@ }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/internal/AbstractJSFAppConfigManager.java!AbstractJSFAppConfigManager!getELResolvers][SEQ] =  -> allELResolvers=new ArrayList<String>()@ -> LOOP { -> it=application.getELResolver().iterator()@ -> LOOP { -> varRes=(ELResolverType) it.next()@it.hasNext() -> varClass=varRes.getTextContent()@it.hasNext() -> IF { -> varClass=varClass.trim()@varClass!=null -> IF { -> allELResolvers.add(varClass,)@varClass!=null && !"".equals(varClass,) } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/internal/AbstractJSFAppConfigManager.java!AbstractJSFAppConfigManager!getJSFAppConfigProviders][SEQ] =  -> itConfigLocaters=configLocaters.iterator()@ -> LOOP { -> configLocater=(IJSFAppConfigLocater) itConfigLocaters.next()@itConfigLocaters.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/internal/AbstractJSFAppConfigManager.java!AbstractJSFAppConfigManager!getPropertyResolvers][SEQ] =  -> allPropertyResolvers=new ArrayList<String>()@ -> LOOP { -> it=application.getPropertyResolver().iterator()@ -> LOOP { -> propRes=(PropertyResolverType) it.next()@it.hasNext() -> propClass=propRes.getTextContent()@it.hasNext() -> IF { -> propClass=propClass.trim()@propClass!=null -> IF { -> allPropertyResolvers.add(propClass,)@!"".equals(propClass,) && propClass!=null } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/internal/AbstractJSFAppConfigManager.java!AbstractJSFAppConfigManager!getResourceBundles][SEQ] =  -> allResourceBundles=new ArrayList<ResourceBundleType>()@ -> LOOP { -> applicationIt=facesConfig.getApplication().iterator()@ -> LOOP { -> appType=(ApplicationType) applicationIt.next()@applicationIt.hasNext() -> allResourceBundles.addAll(appType.getResourceBundle(),)@applicationIt.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsfappconfig/internal/AbstractJSFAppConfigManager.java!AbstractJSFAppConfigManager!getVariableResolvers][SEQ] =  -> allVariableResolvers=new ArrayList<String>()@ -> LOOP { -> it=application.getVariableResolver().iterator()@ -> LOOP { -> varRes=(VariableResolverType) it.next()@it.hasNext() -> varClass=varRes.getTextContent()@it.hasNext() -> IF { -> varClass=varClass.trim()@varClass!=null -> IF { -> allVariableResolvers.add(varClass,)@varClass!=null && !"".equals(varClass,) } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsflibraryconfiguration/internal/AbstractJSFLibraryReferenceImpl.java!AbstractJSFLibraryReferenceImpl!getJars][SEQ] =  -> results=new HashSet<IClasspathEntry>()@ -> IF { -> jars=getLibrary().getArchiveFiles()@ -> it=jars.iterator()@ -> LOOP { -> jar=(ArchiveFile) it.next()@it.hasNext() -> path=jar.getResolvedSourceLocation()@it.hasNext() -> results.add(JavaCore.newLibraryEntry(new Path(path,),null,null,),)@it.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/jsflibraryregistry/PluginProvidedJSFLibraryCreationHelper.java!PluginProvidedJSFLibraryCreationHelper!addArchives][SEQ] =  -> jarCol=(JSFLibraryArchiveFilesDelegate) config_element.createExecutableExtension(DELEGATE,)@ -> IF { -> jarCol.setConfigurationElement(config_element,)@jarCol!=null -> jars=jarCol.getArchiveFiles()@jarCol!=null -> it=jars.iterator()@jarCol!=null && !(jars==null) -> LOOP { -> aJar=it.next()@it.hasNext() && jarCol!=null && !(jars==null) -> IF { -> jar=(ArchiveFile) aJar@it.hasNext() && aJar instanceof ArchiveFile && jarCol!=null && !(jars==null) -> IF { -> newLib.getArchiveFiles().add(jar,)@it.hasNext() && aJar instanceof ArchiveFile && !newLib.containsArchiveFile(jar.getSourceLocation(),) && jarCol!=null && !(jars==null) } } ELSE { -> throw new InvalidArchiveFilesCreationException(NLS.bind(Messages.PluginProvidedJSFLibraryCreationHelper_ErrorMultipleDefinition,jar.getSourceLocation(),config_element.getName(),),)@it.hasNext() && jarCol!=null && !(jars==null) && !(aJar instanceof ArchiveFile) } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/metadata/internal/NamespaceMetaDataTranslator.java!NamespaceMetaDataTranslator!findAttributeEntityForTagEntity][SEQ] =  -> it=tag.getChildEntities().iterator()@ -> LOOP { -> attr=(Entity) it.next()@it.hasNext() -> IF { -> return attr@attributeName.equals(attr.getId(),) && it.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/metadata/internal/NamespaceMetaDataTranslator.java!NamespaceMetaDataTranslator!findTagEntity][SEQ] =  -> it=getMergedModel().getChildEntities().iterator()@ -> LOOP { -> entity=(Entity) it.next()@it.hasNext() -> IF { -> return entity@it.hasNext() && nodeName.equals(entity.getId(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/core/metadata/internal/NamespaceMetaDataTranslator.java!NamespaceMetaDataTranslator!findTraitOnEntityById][SEQ] =  -> it=entity.getTraits().iterator()@ -> LOOP { -> t=(Trait) it.next()@it.hasNext() -> IF { -> return t@it.hasNext() && key.equals(t.getId(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/designtime/context/DTJSPExternalContext.java!DTJSPExternalContext!doGetMapForScope][SEQ] =  -> map=new HashMap()@ -> it=JSFCommonPlugin.getSymbolSourceProviders().iterator()@ -> LOOP { -> factory=(ISymbolSourceProviderFactory) it.next()@it.hasNext() -> provider=factory.createInstance(_jspFile.getProject(),)@it.hasNext() -> symbols=provider.getSymbols(_jspFile,scopeMask,)@it.hasNext() -> LOOP { -> map.put(symbols[i].getName(),symbols[i],)@i<symbols.length && it.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/designtime/context/DTJSPExternalContext.java!DTJSPExternalContext!trace][SEQ] =  -> symbolMaps=getRequestMap()getSessionMap()getApplicationMap()getNoneMap()@ -> LOOP { -> stream.println("--------------",)@ -> stream.println(scopeNames[i]+" Scope:",)@i<scopeNames.length -> stream.println("--------------",)@ -> it=symbolMaps[i].values().iterator()@i<scopeNames.length -> LOOP { -> symbol=(ISymbol) it.next()@it.hasNext() && i<scopeNames.length -> System.out.println(symbol.getName(),)@it.hasNext() && i<scopeNames.length } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/designtime/el/DefaultDTMethodResolver.java!DefaultDTMethodResolver!getMethod][SEQ] =  -> it=base.getTypeDescriptor().getMethods().iterator()@ -> LOOP { -> element=(IMethodSymbol) it.next()@it.hasNext() -> IF { -> return element@element.getName().equals(methodId,) && it.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/designtime/el/DefaultDTPropertyResolver.java!DefaultDTPropertyResolver!getProperty][SEQ] =  -> IF { -> objSymbol=(IObjectSymbol) base@base instanceof IObjectSymbol -> typeDesc=objSymbol.getTypeDescriptor()@base instanceof IObjectSymbol } ELSE { -> IF { -> args=new BasicEList<ValueType>()@objSymbol.supportsCoercion(TypeConstants.TYPE_MAP,) && !(objSymbol.supportsCoercion(TypeConstants.TYPE_LIST,)) && base instanceof IObjectSymbol -> args.add(new StringLiteralType(propertyId.toString(),),)@!(base instanceof IObjectSymbol) && objSymbol.supportsCoercion(TypeConstants.TYPE_MAP,) && objSymbol.supportsCoercion(TypeConstants.TYPE_LIST,) -> prop=objSymbol.call("get",args,propertyId.toString(),)@objSymbol.supportsCoercion(TypeConstants.TYPE_MAP,) && !(objSymbol.supportsCoercion(TypeConstants.TYPE_LIST,)) && base instanceof IObjectSymbol -> IF { -> return prop@prop!=null && objSymbol.supportsCoercion(TypeConstants.TYPE_MAP,) && !(objSymbol.supportsCoercion(TypeConstants.TYPE_LIST,)) && base instanceof IObjectSymbol } -> typeDesc=objSymbol.coerce(TypeConstants.TYPE_MAP,)@!(prop!=null) && objSymbol.supportsCoercion(TypeConstants.TYPE_MAP,) && !(objSymbol.supportsCoercion(TypeConstants.TYPE_LIST,)) && base instanceof IObjectSymbol -> IF { -> factoredProperties=factorKey(propertyId,)@!(prop!=null) && propertyId instanceof String&&(String) propertyId.indexOf('.',)>-1 && !(base instanceof IObjectSymbol) && objSymbol.supportsCoercion(TypeConstants.TYPE_MAP,) && objSymbol.supportsCoercion(TypeConstants.TYPE_LIST,) } } ELSE { -> IF { -> return getCCAttrsSymbolIfNecessary(typeDesc,)@!(objSymbol.supportsCoercion(TypeConstants.TYPE_MAP,)) && propertyId instanceof String&&(String) propertyId.equals(ATTRS_SYMBOL_NAME,) && !(objSymbol.supportsCoercion(TypeConstants.TYPE_LIST,)) && base instanceof IObjectSymbol } } -> IF { -> IF { -> return (IBoundedTypeDescriptor) typeDesc.getUnboundedProperty(propertyId,TypeConstants.TYPE_JAVAOBJECT,)@(IBoundedTypeDescriptor) typeDesc.isUnboundedForType(TypeConstants.TYPE_JAVAOBJECT,) && typeDesc instanceof IBoundedTypeDescriptor && objSymbol.supportsCoercion(TypeConstants.TYPE_LIST,) && base instanceof IObjectSymbol } } } -> LOOP { -> it=getIterator(typeDesc,)@!(base instanceof IObjectSymbol) -> LOOP { -> element=(ISymbol) it.next()@it.hasNext() && !(base instanceof IObjectSymbol) -> IF { -> typeDesc=(IObjectSymbol) matchedSymbol.getTypeDescriptor()@it.hasNext() && element.getName().equals(factoredProperties[i],)&&element instanceof IObjectSymbol && !(base instanceof IObjectSymbol) } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/designtime/internal/view/DefaultDTUIViewRoot.java!DefaultDTUIViewRoot!doGetMapForScope][SEQ] =  -> map=new HashMap<String, ISymbol>()@ -> project=_facesContext.adaptContextObject().getProject()@ -> it=JSFCommonPlugin.getSymbolSourceProviders().iterator()@ -> LOOP { -> factory=(ISymbolSourceProviderFactory) it.next()@it.hasNext() -> provider=factory.createInstance(project,)@it.hasNext() -> symbols=provider.getSymbols(_facesContext.adaptContextObject(),scopeMask,)@it.hasNext() -> LOOP { -> map.put(symbols[i].getName(),symbols[i],)@i<symbols.length && it.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/designtime/internal/view/JSPViewDefnAdapter.java!JSPViewDefnAdapter!getPrefix][SEQ] =  -> m=TaglibController.getTLDCMDocumentManager(doc,)@ -> IF { -> return null@m==null } -> trackers=m.getTaglibTrackers()@!(m==null) -> iter=trackers.iterator()@!(m==null) -> LOOP { -> tracker=(TaglibTracker) iter.next()@!(m==null) && iter.hasNext() -> IF { -> return tracker.getPrefix()@namespace.equals(tracker.getURI(),) && !(m==null) && iter.hasNext() } -> cmdoc=tracker.getDocument()@!(namespace.equals(tracker.getURI(),)) && !(m==null) && iter.hasNext() -> IF { -> return tracker.getPrefix()@cmdoc instanceof TLDDocument&&namespace.equals((TLDDocument) cmdoc.getUri(),) && !(namespace.equals(tracker.getURI(),)) && !(m==null) && iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/designtime/internal/view/XMLComponentTreeConstructionStrategy.java!XMLComponentTreeConstructionStrategy!populateViewRoot][SEQ] =  -> it=children.iterator()@ -> LOOP { -> topLevelChild=(ComponentInfo) it.next()@it.hasNext() } -> IF { -> it=foundRoot.getChildren().iterator()@foundRoot!=null -> LOOP { -> child=(ComponentInfo) it.next()@it.hasNext() && foundRoot!=null -> facetName=foundRoot.getFacetName(child,)@it.hasNext() && foundRoot!=null -> IF { -> viewRoot.addChild(child,)@it.hasNext() && facetName==null && foundRoot!=null } ELSE { -> viewRoot.addFacet(facetName,child,)@it.hasNext() && !(facetName==null) && foundRoot!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/designtime/internal/view/model/jsp/CMNodeNamedMapAdapter.java!CMNodeNamedMapAdapter!ensureAllAttributes][SEQ] =  -> IF { -> it=_tldElement.getAttributes().iterator()@ -> LOOP { -> attrDecl=(CMAttributeDeclaration) it.next()@it.hasNext() -> getOrCreateAttribute(attrDecl.getAttrName(),)@it.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/designtime/internal/view/model/jsp/TLDTagElement.java!TLDTagElement!constructAttributesString][SEQ] =  -> it=getAttributeHandlers().entrySet().iterator()@ -> LOOP { -> entry=(Entry) it.next()@it.hasNext() -> name=(String) entry.getKey()@it.hasNext() -> handler=(ITagAttributeHandler) entry.getValue()@it.hasNext() -> attributes+=String.format("\t\t\tAttribute: name=%s, customHandler=%s, propertyName=%s, isELAllowed=%b\n",name,handler.getCustomHandler(),handler.getName(),Boolean.valueOf(handler.isELAllowed(),),)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/designtime/symbols/DefaultBeanSymbolSourceProvider.java!DefaultBeanSymbolSourceProvider!createAdditionalProposalInfo][SEQ] =  -> beanName=(beanType.getManagedBeanName()!=null)?beanType.getManagedBeanName().getTextContent():null@ -> additionalInfo=new StringBuffer()@ -> IF { -> additionalInfo.append("<p><b>"+Messages.getString("DefaultBeanSymbolSourceProvider.AdditionalInformation.Name",),)@ -> additionalInfo.append(" </b>",)@ -> additionalInfo.append(beanName,)@beanName!=null -> additionalInfo.append("</p>",)@beanName!=null } -> beanClass=(beanType.getManagedBeanClass()!=null)?beanType.getManagedBeanClass().getTextContent():null@ -> IF { -> additionalInfo.append("<p><b>"+Messages.getString("DefaultBeanSymbolSourceProvider.AdditionalInformation.Type",),)@ -> additionalInfo.append(" </b>",)@ -> additionalInfo.append(beanClass,)@beanClass!=null -> additionalInfo.append("</p>",)@beanClass!=null } -> beanScope=(beanType.getManagedBeanScope()!=null)?beanType.getManagedBeanScope().getTextContent():null@ -> IF { -> additionalInfo.append("<p><b>"+Messages.getString("DefaultBeanSymbolSourceProvider.AdditionalInformation.Scope",),)@ -> additionalInfo.append(" </b>",)@ -> additionalInfo.append(beanScope,)@beanScope!=null -> additionalInfo.append("</p>",)@beanScope!=null } -> descBuffer=new StringBuffer()@ -> it=beanType.getDescription().iterator()@ -> LOOP { -> descType=(DescriptionType) it.next()@it.hasNext() -> appendString=descType.getTextContent()@it.hasNext() -> IF { -> descBuffer.append(appendString,)@it.hasNext() && appendString!=null } } -> IF { -> additionalInfo.append("<p><b>",)@ -> additionalInfo.append(Messages.getString("DefaultBeanSymbolSourceProvider.AdditionalInformation.Description",),)@ -> additionalInfo.append("</b>",)@ -> additionalInfo.append(descBuffer,)@descBuffer.length()>0 -> additionalInfo.append("</p>",)@descBuffer.length()>0 } -> return additionalInfo.toString()@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/designtime/symbols/DefaultBeanSymbolSourceProvider.java!DefaultBeanSymbolSourceProvider!getManagedBeanSymbols][SEQ] =  -> symbols=new ArrayList()@ -> configManager=JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(iProject,)@ -> IF { -> aIt=configManager.getManagedBeans().iterator()@configManager!=null -> LOOP { -> bean=(ManagedBeanType) aIt.next()@aIt.hasNext() && configManager!=null -> beanIsInScope=isBeanScopeInMask(bean.getManagedBeanScope(),symbolScopeMask,)||JSFAppConfigUtils.isValidJSFProject(iProject,IJSFCoreConstants.FACET_VERSION_2_0,)&&symbolScopeMask==ISymbolConstants.SYMBOL_SCOPE_ALL@aIt.hasNext() && configManager!=null -> IF { -> name=bean.getManagedBeanName().getTextContent()@beanIsInScope && aIt.hasNext() && configManager!=null -> detailedDescription=createAdditionalProposalInfo(bean,)@beanIsInScope && aIt.hasNext() && configManager!=null -> symbol=SymbolFactory.eINSTANCE.createIBeanInstanceSymbol()@beanIsInScope && aIt.hasNext() && configManager!=null -> symbol.setName(name,)@beanIsInScope && aIt.hasNext() && configManager!=null -> IF { -> symbol.setDetailedDescription(detailedDescription,)@beanIsInScope && detailedDescription.length()>0 && aIt.hasNext() && configManager!=null } -> symbol.setRuntimeSource(ERuntimeSource.MANAGED_BEAN_SYMBOL_LITERAL,)@beanIsInScope && aIt.hasNext() && configManager!=null -> TRY { -> javaProject=JavaCore.create(iProject,)@beanIsInScope && aIt.hasNext() && configManager!=null -> typeName=(bean.getManagedBeanClass()!=null)?bean.getManagedBeanClass().getTextContent():""@beanIsInScope && aIt.hasNext() && configManager!=null -> type=javaProject.findType(typeName,)@beanIsInScope && aIt.hasNext() && configManager!=null -> IF { -> javaTypeDescriptor=SymbolFactory.eINSTANCE.createIJavaTypeDescriptor2()@type!=null -> javaTypeDescriptor.setType(type,)@beanIsInScope && type!=null && aIt.hasNext() && configManager!=null -> symbol.setJavaTypeDescriptor(javaTypeDescriptor,)@beanIsInScope && type!=null && aIt.hasNext() && configManager!=null } } -> symbols.add(symbol,)@beanIsInScope && aIt.hasNext() && configManager!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/metadataprocessors/internal/MetaDataEnabledFeatureRegistry.java!MetaDataEnabledFeatureRegistry!getFeatureExtensionsForMatchingSubclass][SEQ] =  -> type=AttributeValueRuntimeTypeRegistry.getInstance().getType(typeId,)@ -> typeClass=AttributeValueRuntimeTypeFactory.getInstance().getClassForType(type,)@ -> ret=new ArrayList<IMetaDataEnabledFeatureExtension>()@ -> it=typeCacheMap.keySet().iterator()@ -> LOOP { -> featureTypeId=(String) it.next()@it.hasNext() -> featureTypeClass=typeCacheMap.get(featureTypeId,)@it.hasNext() -> IF { -> ret.addAll(getExtensionsForId(featureTypeId,),)@it.hasNext() && featureTypeClass!=null&&featureTypeClass.isAssignableFrom(typeClass,) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/tagdisplay/internal/paletteinfos/impl/PaletteInfoImpl.java!PaletteInfoImpl!findTag][SEQ] =  -> it=model.getChildEntities().iterator()@ -> LOOP { -> tag_=(Entity) it.next()@it.hasNext() -> IF { -> return tag_@it.hasNext() && tagid.equals(tag_.getId(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/tagdisplay/internal/paletteinfos/impl/PaletteInfoImpl.java!PaletteInfoImpl!getTagTraitValue][SEQ] =  -> tag_=getTag(tagName,)@ -> IF { -> it=tag_.getTraits().iterator()@tag_!=null -> LOOP { -> trait=(Trait) it.next()@it.hasNext() && tag_!=null -> IF { -> return trait.getValue()@it.hasNext() && traitKey.equals(trait.getId(),) && tag_!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/tagdisplay/internal/paletteinfos/impl/PaletteInfosImpl.java!PaletteInfosImpl!findPaletteInfoById][SEQ] =  -> it=getInfos().iterator()@ -> LOOP { -> info=(PaletteInfo) it.next()@it.hasNext() -> IF { -> return info@it.hasNext() && id.equals(info.getId(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/taglibprocessing/attributevalues/ActionType.java!ActionType!createProposals][SEQ] =  -> ret=new ArrayList()@ -> cases=rule.getNavigationCase()@ -> it=cases.iterator()@ -> LOOP { -> navCase=(NavigationCaseType) it.next()@it.hasNext() -> pv=createProposal(rule,navCase,)@it.hasNext() -> IF { -> ret.add(pv,)@it.hasNext() && pv!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/taglibprocessing/attributevalues/ActionType.java!ActionType!isValidValue][SEQ] =  -> IF { -> return false@value==null||value!=null&&value.length()==0 } -> jsp=getFile2()@!(value==null||value!=null&&value.length()==0) -> IF { -> return true@!(value==null||value!=null&&value.length()==0) && jsp==null } -> IF { -> return true@!(jsp==null) && !(value==null||value!=null&&value.length()==0) && JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null } -> rules=JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),).getNavigationRulesForPage(jsp,)@!(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) -> LOOP { -> cases=rule.getNavigationCase().iterator()@!(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(rules) -> LOOP { -> navCase=(NavigationCaseType) cases.next()@cases.hasNext() && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(rules) -> IF { -> return true@cases.hasNext() && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && rules && navCase.getFromOutcome()!=null&&navCase.getFromOutcome().getTextContent()!=null&&value.equals(navCase.getFromOutcome().getTextContent().trim(),) } } } -> IF { -> index=value.indexOf('?',)@!(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0) && !(rules) -> IF { -> value=value.substring(0,index,)@!(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0) && !(rules) && index!=-1 } -> IF { -> webRoot=ComponentCore.createComponent(jsp.getProject(),).getRootFolder()@JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0 && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(rules) && value!=null&&value.length()>1 -> IF { -> file=webRoot.getFile(new Path(value,),)@JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0 && value.charAt(0,)=='/' && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(rules) && value!=null&&value.length()>1 -> IF { -> return true@JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0 && value.charAt(0,)=='/' && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(rules) && value!=null&&value.length()>1 && file.exists() } } ELSE { -> webContentPath=webRoot.getUnderlyingFolder().getFullPath()@JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0 && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(rules) && value!=null&&value.length()>1 && !(value.charAt(0,)=='/') -> filePath=jsp.getFullPath()@JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0 && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(rules) && value!=null&&value.length()>1 && !(value.charAt(0,)=='/') -> IF { -> extension=filePath.getFileExtension()@JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0 && filePath.matchingFirstSegments(webContentPath,)==webContentPath.segmentCount() && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(rules) && value!=null&&value.length()>1 && !(value.charAt(0,)=='/') -> filePath=filePath.removeFirstSegments(webContentPath.segmentCount(),)@JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0 && filePath.matchingFirstSegments(webContentPath,)==webContentPath.segmentCount() && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(rules) && value!=null&&value.length()>1 && !(value.charAt(0,)=='/') -> filePath=filePath.removeLastSegments(1,)@value.charAt(0,)=='/' && filePath.matchingFirstSegments(webContentPath,)==webContentPath.segmentCount() && !(value!=null&&value.length()>1) && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0) && !(rules) -> filePath=filePath.append(value,)@JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0 && filePath.matchingFirstSegments(webContentPath,)==webContentPath.segmentCount() && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(rules) && value!=null&&value.length()>1 && !(value.charAt(0,)=='/') -> IF { -> filePath=filePath.addFileExtension(extension,)@JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0 && filePath.matchingFirstSegments(webContentPath,)==webContentPath.segmentCount() && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && filePath.getFileExtension()==null&&extension!=null && !(rules) && value!=null&&value.length()>1 && !(value.charAt(0,)=='/') } -> file=webRoot.getFile(filePath,)@JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0 && filePath.matchingFirstSegments(webContentPath,)==webContentPath.segmentCount() && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(rules) && value!=null&&value.length()>1 && !(value.charAt(0,)=='/') -> IF { -> return true@JSFVersion.valueOfProject(jsp.getProject(),).compareTo(JSFVersion.V2_0,)>=0 && filePath.matchingFirstSegments(webContentPath,)==webContentPath.segmentCount() && !(jsp==null) && !(value==null||value!=null&&value.length()==0) && !(JSFAppConfigManagerFactory.getJSFAppConfigManagerInstance(jsp.getProject(),)==null) && !(rules) && value!=null&&value.length()>1 && !(value.charAt(0,)=='/') && file.exists() } } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/taglibprocessing/attributevalues/CurrencyCodeType.java!CurrencyCodeType!getPossibleValues][SEQ] =  -> ret=new ArrayList()@ -> it=_map.keySet().iterator()@ -> LOOP { -> key=(String) it.next()@it.hasNext() -> value=_map.get(key,)@it.hasNext() -> pv=new PossibleValue(key,value,)@it.hasNext() -> ret.add(pv,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/taglibprocessing/attributevalues/FacesConfigConverterIDFeatures.java!FacesConfigConverterIDFeatures!getElementIDs][SEQ] =  -> elements=getElements(mgr,)@ -> ret=new ArrayList(elements.size(),)@ -> it=elements.iterator()@ -> LOOP { -> aType=(ConverterType) it.next()@it.hasNext() -> IF { -> id=aType.getConverterId().getTextContent()@it.hasNext() && aType.getConverterId()!=null&&aType.getConverterId().getTextContent()!=null -> IF { -> ret.add(id.trim(),)@it.hasNext() && id!=null && aType.getConverterId()!=null&&aType.getConverterId().getTextContent()!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/taglibprocessing/attributevalues/FacesConfigConverterIDFeatures.java!FacesConfigConverterIDFeatures!getPossibleValueProposals][SEQ] =  -> ret=new ArrayList()@ -> Collections.sort(elements,new ConverterSorter(),)@ -> it=elements.iterator()@ -> LOOP { -> obj=(ConverterType) it.next()@it.hasNext() -> IF { -> pv=createProposal(obj.getConverterId().getTextContent(),obj.getDisplayName(),obj.getDescription(),)@it.hasNext() && obj.getConverterId()!=null&&obj.getConverterId().getTextContent()!=null -> IF { -> pv.setIcon(getImage(),)@it.hasNext() && obj.getConverterId()!=null&&obj.getConverterId().getTextContent()!=null && pv!=null -> ret.add(pv,)@it.hasNext() && obj.getConverterId()!=null&&obj.getConverterId().getTextContent()!=null && pv!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/taglibprocessing/attributevalues/FacesConfigValidatorIDFeatures.java!FacesConfigValidatorIDFeatures!getElementIDs][SEQ] =  -> elements=getElements(mgr,)@ -> ret=new ArrayList(elements.size(),)@ -> it=elements.iterator()@ -> LOOP { -> aType=(ValidatorType) it.next()@it.hasNext() -> IF { -> id=aType.getValidatorId().getTextContent()@it.hasNext() && aType.getValidatorId()!=null&&aType.getValidatorId().getTextContent()!=null -> IF { -> ret.add(id.trim(),)@it.hasNext() && aType.getValidatorId()!=null&&aType.getValidatorId().getTextContent()!=null && id!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/taglibprocessing/attributevalues/FacesConfigValidatorIDFeatures.java!FacesConfigValidatorIDFeatures!getPossibleValueProposals][SEQ] =  -> ret=new ArrayList()@ -> Collections.sort(elements,new ValidatorSorter(),)@ -> it=elements.iterator()@ -> LOOP { -> obj=(ValidatorType) it.next()@it.hasNext() -> IF { -> pv=createProposal(obj.getValidatorId().getTextContent(),obj.getDisplayName(),obj.getDescription(),)@it.hasNext() && obj.getValidatorId()!=null&&obj.getValidatorId().getTextContent()!=null -> IF { -> pv.setIcon(getImage(),)@it.hasNext() && pv!=null && obj.getValidatorId()!=null&&obj.getValidatorId().getTextContent()!=null -> ret.add(pv,)@it.hasNext() && pv!=null && obj.getValidatorId()!=null&&obj.getValidatorId().getTextContent()!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/taglibprocessing/attributevalues/JavaClassType.java!JavaClassType!createPossibleValues][SEQ] =  -> list=new ArrayList(vals.size(),)@ -> it=vals.iterator()@ -> LOOP { -> elem=(IJavaElement) it.next()@it.hasNext() -> list.add(createPossibleValue(elem,),)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/taglibprocessing/attributevalues/JavaClassType.java!JavaClassType!getInterfaces][SEQ] =  -> ret=new ArrayList()@ -> propVals=getInterfaceNames()@ -> it=propVals.iterator()@ -> LOOP { -> propVal=(String) it.next()@it.hasNext() -> TRY { -> interfase=findType(jp,propVal,)@it.hasNext() -> IF { -> ret.add(interfase,)@it.hasNext() && interfase!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/taglibprocessing/attributevalues/JavaClassType.java!JavaClassType!getPossibleValues][SEQ] =  -> results=getTypes()@ -> IF { -> vals=new HashSet(results.size(),)@results!=null&&!results.isEmpty() -> checkedTypes=new HashSet()@results!=null&&!results.isEmpty() -> it=results.iterator()@results!=null&&!results.isEmpty() -> LOOP { -> match=(SearchMatch) it.next()@it.hasNext() && results!=null&&!results.isEmpty() -> res=(IType) match.getElement()@it.hasNext() && results!=null&&!results.isEmpty() -> addValidSubClasses(res,vals,checkedTypes,)@it.hasNext() && results!=null&&!results.isEmpty() } -> return createPossibleValues(vals,)@results!=null&&!results.isEmpty() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/taglibprocessing/attributevalues/LanguageCodeType.java!LanguageCodeType!getPossibleValues][SEQ] =  -> ret=new ArrayList()@ -> it=_map.keySet().iterator()@ -> LOOP { -> key=(String) it.next()@it.hasNext() -> value=_map.get(key,)@it.hasNext() -> pv=new PossibleValue(key,value,)@it.hasNext() -> ret.add(pv,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/validation/internal/appconfig/AppConfigValidationUtil.java!AppConfigValidationUtil!getDomNode][SEQ] =  -> it=eObj.eAdapters().iterator()@ -> LOOP { -> adapter=(Adapter) it.next()@it.hasNext() -> IF { -> sseAdapter=(EMF2DOMSSEAdapter) adapter@it.hasNext() && adapter instanceof EMF2DOMSSEAdapter -> node=sseAdapter.getNode()@it.hasNext() && adapter instanceof EMF2DOMSSEAdapter -> IF { -> return (IDOMNode) node@it.hasNext() && adapter instanceof EMF2DOMSSEAdapter && node instanceof IDOMNode } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/validation/internal/appconfig/AppConfigValidator.java!AppConfigValidator!getJSFVersion][SEQ] =  -> TRY { -> facetedProject=ProjectFacetsManager.create(project,)@ -> facets=facetedProject.getProjectFacets()@ -> it=facets.iterator()@ -> LOOP { -> facetVersion=(IProjectFacetVersion) it.next()@it.hasNext() -> IF { -> return facetVersion.getVersionString()@it.hasNext() && IJSFCoreConstants.JSF_CORE_FACET_ID.equals(facetVersion.getProjectFacet().getId(),) } } } CATCH { }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/validation/internal/appconfig/AppConfigValidator.java!AppConfigValidator!reportProblems][SEQ] =  -> it=messages.iterator()@ -> LOOP { -> message=(IMessage) it.next()@it.hasNext() -> IF { -> line=model.getStructuredDocument().getLineOfOffset(message.getOffset(),)@it.hasNext() && model!=null -> IF { -> message.setLineNo(line+1,)@it.hasNext() && line>=0 && model!=null } } -> reporter.addMessage(this,message,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/validation/internal/appconfig/ApplicationValidationVisitor.java!LocaleConfigValidationVisitor!doValidate][SEQ] =  -> localeConfig=(LocaleConfigType) object@ -> defaultLocale=localeConfig.getDefaultLocale()@ -> IF { -> addMessageInfo(messages,AppConfigValidationUtil.validateLocaleType(defaultLocale.getTextContent(),),defaultLocale,file,)@defaultLocale!=null } -> it=localeConfig.getSupportedLocale().iterator()@ -> LOOP { -> supportedLocale=(SupportedLocaleType) it.next()@it.hasNext() -> addMessageInfo(messages,AppConfigValidationUtil.validateLocaleType(supportedLocale.getTextContent(),),supportedLocale,file,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/validation/internal/appconfig/EObjectValidationVisitor.java!EObjectValidationVisitor!validate][SEQ] =  -> doValidate(eObject,messages,file,)@ -> features=eObject.eClass().getEAllStructuralFeatures()@ -> it=features.iterator()@ -> LOOP { -> feature=(EStructuralFeature) it.next()@it.hasNext() -> visitor=getVisitorForFeature(feature,)@it.hasNext() -> IF { -> obj=eObject.eGet(feature,)@it.hasNext() && visitor!=null -> IF { -> childIt=(List) obj.iterator()@it.hasNext() && obj instanceof List&&feature.isMany() && visitor!=null -> LOOP { -> child=childIt.next()@it.hasNext() && obj instanceof List&&feature.isMany() && visitor!=null && childIt.hasNext() -> IF { -> visitor.validate((EObject) child,messages,file,)@it.hasNext() && child instanceof EObject && obj instanceof List&&feature.isMany() && visitor!=null && childIt.hasNext() } } } ELSE { -> IF { -> visitor.validate((EObject) obj,messages,file,)@it.hasNext() && !(obj instanceof List&&feature.isMany()) && visitor!=null && obj instanceof EObject } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/validation/internal/strategy/AttributeValidatingStrategy.java!AttributeValidatingStrategy!validateELExpression][SEQ] =  -> elValidator=new ELExpressionValidator(elContext,elText,_validationContext.getSymbolResolverFactory(),_validationContext.getReporter(),)@ -> elValidator.validateXMLNode()@ -> exprType=elValidator.getExpressionType()@ -> IF { -> boxedType=TypeTransformer.transformBoxPrimitives(exprType,)@exprType!=null -> testSignatures=boxedType.getSignatures()@exprType!=null -> IF { -> IF { -> elText2=elText.substring(0,elText.lastIndexOf('.',),)@elText.indexOf('.',)!=-1 && exprType!=null && testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],) -> elValidator2=new ELExpressionValidator(elContext,elText2,_validationContext.getSymbolResolverFactory(),_validationContext.getReporter(),)@elText.indexOf('.',)!=-1 && exprType!=null && testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],) -> elValidator2.validateXMLNode()@elText.indexOf('.',)!=-1 && exprType!=null && testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],) -> exprType2=elValidator.getExpressionType()@elText.indexOf('.',)!=-1 && exprType!=null && testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],) -> boxedType2=TypeTransformer.transformBoxPrimitives(exprType2,)@elText.indexOf('.',)!=-1 && exprType!=null && testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],) -> testSignatures2=boxedType2.getSignatures()@elText.indexOf('.',)!=-1 && exprType!=null && testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],) -> IF { -> return @elText.indexOf('.',)!=-1 && testSignatures2.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures2[0],) && exprType!=null && testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],) } } } -> it=elVals.iterator()@!(testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],)) && !(exprType!=null) -> LOOP { -> elval=(IValidELValues) it.next()@it.hasNext() && !(testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],)) && !(exprType!=null) -> attributeVal=attrAdapter.getValue()@!(testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],)) && exprType!=null -> TRY { -> expectedType=elval.getExpectedRuntimeType()@it.hasNext() && !(testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],)) && !(exprType!=null) -> IF { -> expectedType=maybeAddAlternativeTypes(expectedType,exprType,elementAdapter,attrAdapter,)@expectedType!=null && !(testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],)) && exprType!=null -> status=_typeComparator.calculateTypeCompatibility(expectedType,exprType,)@expectedType!=null && !(testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],)) && exprType!=null -> IF { -> reportValidationMessage(status,context,attributeVal,)@expectedType!=null && !(testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],)) && exprType!=null && status.getSeverity()!=Diagnostic.OK } } } CATCH { -> reportValidationMessage(createValidationMessage(context,attributeVal,IStatus.WARNING,e.getMessage(),_validationContext.getFile(),),context,attributeVal,)@!(testSignatures.length>0&&TypeConstants.TYPE_JAVAOBJECT.equals(testSignatures[0],)) && exprType!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/validation/internal/strategy/AttributeValidatingStrategy.java!AttributeValidatingStrategy!validateNonELAttributeValue][SEQ] =  -> attributeValue=attrAdapter.getValue()@ -> IF { -> System.out.println(addDebugSpacer(3,)+"attrVal= "+(attributeValue!=null)?attributeValue:"null",)@ } -> attributeId=attrAdapter.getAttributeIdentifier()@ -> vv=MetaDataEnabledProcessingFactory.getInstance().getAttributeValueRuntimeTypeFeatureProcessors(IValidValues.class,context,attributeId,)@!(attributeId.getTagIdentifier()==null||attributeId.getTagIdentifier().getTagName()==null||attributeId.getName()==null) -> IF { -> it=vv.iterator()@!(attributeId.getTagIdentifier()==null||attributeId.getTagIdentifier().getTagName()==null||attributeId.getName()==null) && !vv.isEmpty() -> LOOP { -> v=(IValidValues) it.next()@it.hasNext() && !(attributeId.getTagIdentifier()==null||attributeId.getTagIdentifier().getTagName()==null||attributeId.getName()==null) && !vv.isEmpty() -> IF { -> msgs=v.getValidationMessages().iterator()@it.hasNext() && !v.isValidValue(attributeValue.trim(),) && !(attributeId.getTagIdentifier()==null||attributeId.getTagIdentifier().getTagName()==null||attributeId.getName()==null) && !vv.isEmpty() -> LOOP { -> msg=(IValidationMessage) msgs.next()@it.hasNext() && !v.isValidValue(attributeValue.trim(),) && msgs.hasNext() && !(attributeId.getTagIdentifier()==null||attributeId.getTagIdentifier().getTagName()==null||attributeId.getName()==null) && !vv.isEmpty() -> reportValidationMessage(createValidationMessage(context,attributeValue,msg.getSeverity(),msg.getMessage(),_validationContext.getFile(),),context,attributeValue,)@it.hasNext() && !v.isValidValue(attributeValue.trim(),) && msgs.hasNext() && !(attributeId.getTagIdentifier()==null||attributeId.getTagIdentifier().getTagName()==null||attributeId.getName()==null) && !vv.isEmpty() } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.core/src/org/eclipse/jst/jsf/validation/internal/strategy/ContainmentValidatingStrategy.java!ContainmentValidatingStrategy!validateContainment][SEQ] =  -> IF { -> return @JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0 } -> context=elementAdapter.getDocumentContext()@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) -> resolver=IStructuredDocumentContextResolverFactory.INSTANCE.getDOMContextResolver(context,)@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) -> node=resolver.getNode()@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) -> uri=elementAdapter.getNamespace()@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) -> tagName=elementAdapter.getLocalName()@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) -> mdcontext=MetaDataQueryContextFactory.getInstance().createTaglibDomainModelContext(jsfValidationContext.getFile(),)@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) -> query=MetaDataQueryFactory.getInstance().createQuery(mdcontext,)@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) -> entity=query.getQueryHelper().getEntity(uri,tagName,)@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) -> IF { -> trait=query.findTrait(entity,"containment-constraint",)@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && entity!=null -> IF { -> tagConstraint=(ContainsTagConstraint) trait.getValue()@trait!=null && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && entity!=null -> algorithm=tagConstraint.getSetGenerator().getAlgorithm()@trait!=null && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && entity!=null -> IF { -> return @trait!=null && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && entity!=null && !"xpath".equals(algorithm,) } -> expr=tagConstraint.getSetGenerator().getExpression()@trait!=null && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(!"xpath".equals(algorithm,)) && entity!=null -> xpathAlg=new XPathMatchingAlgorithm(expr,)@trait!=null && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(!"xpath".equals(algorithm,)) && entity!=null -> TRY { -> set=xpathAlg.evaluate(node,)@trait!=null && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(!"xpath".equals(algorithm,)) && entity!=null -> set=elem2TagIdMapper.map(set,)@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(entity!=null) && !(trait!=null) && !(!"xpath".equals(algorithm,)) } CATCH { -> JSFCorePlugin.log(e,"Problem with expression: "+expr+" on node "+node,)@trait!=null && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(!"xpath".equals(algorithm,)) && entity!=null -> return @trait!=null && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(!"xpath".equals(algorithm,)) && entity!=null } CATCH { -> JSFCorePlugin.log(e,"Problem evaluating expression: "+expr+" on node "+node,)@trait!=null && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(!"xpath".equals(algorithm,)) && entity!=null -> return @trait!=null && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(!"xpath".equals(algorithm,)) && entity!=null } -> constraintData=tagConstraint.getSatisfiesSet()@trait!=null && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(!"xpath".equals(algorithm,)) && entity!=null -> constraintSet=new ConcreteAxiomaticSet()@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(entity!=null) && !(trait!=null) && !(!"xpath".equals(algorithm,)) -> it=constraintData.getTags().iterator()@trait!=null && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(!"xpath".equals(algorithm,)) && entity!=null -> LOOP { -> tagId=(TagId) it.next()@trait!=null && it.hasNext() && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(!"xpath".equals(algorithm,)) && entity!=null -> constraintSet.add(TagIdentifierFactory.createJSPTagWrapper(tagId.getUri(),tagId.getName(),),)@trait!=null && it.hasNext() && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(!"xpath".equals(algorithm,)) && entity!=null } -> memberConstraint=new MemberConstraint(constraintSet,)@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(entity!=null) && !(trait!=null) && !(!"xpath".equals(algorithm,)) -> diag=memberConstraint.isSatisfied(set,)@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(entity!=null) && !(trait!=null) && !(!"xpath".equals(algorithm,)) -> IF { -> data=diag.getData()@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(entity!=null) && !(trait!=null) && !(!"xpath".equals(algorithm,)) && diag.getSeverity()!=Diagnostic.OK -> it=data.iterator()@!(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(entity!=null) && !(trait!=null) && !(!"xpath".equals(algorithm,)) && diag.getSeverity()!=Diagnostic.OK -> LOOP { -> missingParent=(TagIdentifier) it.next()@trait!=null && it.hasNext() && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(!"xpath".equals(algorithm,)) && entity!=null && diag.getSeverity()!=Diagnostic.OK -> reportContainmentProblem(context,node,missingParent,)@trait!=null && it.hasNext() && !(JSPUtil.isJSPFragment(jsfValidationContext.getFile(),)||_containmentValidationCount>0) && !(!"xpath".equals(algorithm,)) && entity!=null && diag.getSeverity()!=Diagnostic.OK } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facelet.core/src/org/eclipse/jst/jsf/facelet/core/internal/cm/NamespaceCMAdapter.java!WrappingIterator!next][SEQ] =  -> nextElement=(ITagElement) _viewElementIterator.next()@ -> node=getNamedItem(nextElement.getName(),)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facelet.core/src/org/eclipse/jst/jsf/facelet/core/internal/facet/FaceletFacet.java!FaceletFacet!getProjectFacet][SEQ] =  -> IF { -> TRY { -> facetedProject=ProjectFacetsManager.create(project,)@project!=null&&project.isAccessible() -> IF { -> projectFacets=facetedProject.getProjectFacets()@facetedProject!=null && project!=null&&project.isAccessible() -> itProjectFacets=projectFacets.iterator()@facetedProject!=null && project!=null&&project.isAccessible() -> LOOP { -> projectFacetVersion=(IProjectFacetVersion) itProjectFacets.next()@facetedProject!=null && project!=null&&project.isAccessible() && itProjectFacets.hasNext() -> IF { -> return projectFacetVersion@facetedProject!=null && project!=null&&project.isAccessible() && FACET_ID.equals(projectFacetVersion.getProjectFacet().getId(),) && itProjectFacets.hasNext() } } } } CATCH { } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facelet.core/src/org/eclipse/jst/jsf/facelet/core/internal/facet/FaceletUninstallDelegate.java!FaceletUninstallDelegate!maybeChangeFaceletViewHandler][SEQ] =  -> edit=FacesConfigArtifactEdit.getFacesConfigArtifactEditForWrite(project,"WEB-INF/faces-config.xml",)@ -> IF { -> TRY { -> root=edit.getFacesConfig()@edit!=null -> IF { -> IF { } -> applications=root.getApplication()@edit!=null && isViewHandlerPresent(root,) -> appIt=applications.iterator()@edit!=null && isViewHandlerPresent(root,) -> LOOP { -> application=(ApplicationType) appIt.next()@appIt.hasNext() && edit!=null && isViewHandlerPresent(root,) -> viewHandlerIt=application.getViewHandler().iterator()@appIt.hasNext() && edit!=null && isViewHandlerPresent(root,) -> LOOP { -> viewHandlerType=(ViewHandlerType) viewHandlerIt.next()@appIt.hasNext() && edit!=null && viewHandlerIt.hasNext() && isViewHandlerPresent(root,) -> IF { -> viewHandlerIt.remove()@appIt.hasNext() && edit!=null && viewHandlerIt.hasNext() && isViewHandlerPresent(root,) && viewHandlerType!=null&&RUNTIME_VIEWHANDLER_CLASS_NAME.equals(viewHandlerType.getTextContent().trim(),) -> IF { } } } } -> edit.save(monitor,)@edit!=null && isViewHandlerPresent(root,) -> IF { } } ELSE { -> IF { } } -> edit.dispose()@edit!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facelet.core/src/org/eclipse/jst/jsf/facelet/core/internal/facet/WebAppConfigurator.java!!run][SEQ] =  -> webApp=(org.eclipse.jst.j2ee.webapplication.WebApp) ModelProviderManager.getModelProvider(getProject(),).getModelObject()@ -> it=webApp.getContextParams().iterator()@ -> LOOP { -> paramValue=(org.eclipse.jst.j2ee.common.ParamValue) it.next()@it.hasNext() -> IF { -> it.remove()@it.hasNext() && paramName.equals(paramValue.getName().trim(),)&&paramVal.equals(paramValue.getValue().trim(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facelet.core/src/org/eclipse/jst/jsf/facelet/core/internal/facet/WebAppConfigurator.java!!run][SEQ] =  -> webApp=(org.eclipse.jst.javaee.web.WebApp) ModelProviderManager.getModelProvider(getProject(),).getModelObject()@ -> listenerIt=webApp.getListeners().iterator()@ -> LOOP { -> listener=(org.eclipse.jst.javaee.core.Listener) listenerIt.next()@listenerIt.hasNext() -> IF { -> listenerIt.remove()@listenerClass.equals(listener.getListenerClass().trim(),) && listenerIt.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facelet.core/src/org/eclipse/jst/jsf/facelet/core/internal/facet/WebAppConfigurator.java!!run][SEQ] =  -> webApp=(org.eclipse.jst.j2ee.webapplication.WebApp) ModelProviderManager.getModelProvider(getProject(),).getModelObject()@ -> listenerIt=webApp.getListeners().iterator()@ -> LOOP { -> listener=(org.eclipse.jst.j2ee.common.Listener) listenerIt.next()@listenerIt.hasNext() -> IF { -> listenerIt.remove()@listenerIt.hasNext() && listenerClass.equals(listener.getListenerClassName().trim(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facelet.core/src/org/eclipse/jst/jsf/facelet/core/internal/facet/WebAppConfigurator.java!J2EEWebAppConfigurator!isContextParamPresent][SEQ] =  -> it=webApp.getContextParams().iterator()@ -> LOOP { -> paramValue=(org.eclipse.jst.j2ee.common.ParamValue) it.next()@it.hasNext() -> IF { -> return true@it.hasNext() && paramName.equals(paramValue.getName().trim(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facelet.core/src/org/eclipse/jst/jsf/facelet/core/internal/facet/WebAppConfigurator.java!J2EEWebAppConfigurator!isListenerPresent][SEQ] =  -> listenerIt=webApp.getListeners().iterator()@ -> LOOP { -> listener=(org.eclipse.jst.j2ee.common.Listener) listenerIt.next()@listenerIt.hasNext() -> IF { -> return true@listenerIt.hasNext() && listenerClass.equals(listener.getListenerClassName().trim(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facelet.core/src/org/eclipse/jst/jsf/facelet/core/internal/facet/WebAppConfigurator.java!JavaEEWebAppConfigurator!isListenerPresent][SEQ] =  -> listenerIt=webApp.getListeners().iterator()@ -> LOOP { -> listener=(org.eclipse.jst.javaee.core.Listener) listenerIt.next()@listenerIt.hasNext() -> IF { -> return true@listenerClass.equals(listener.getListenerClass().trim(),) && listenerIt.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facelet.core/src/org/eclipse/jst/jsf/facelet/core/internal/util/TagMetadataLoader.java!TagMetadataLoader!getString][SEQ] =  -> trait=query.findTrait(model,PALETTE_INFOS,)@ -> IF { -> tags=(PaletteInfos) trait.getValue()@trait!=null -> it=tags.getInfos().iterator()@trait!=null -> LOOP { -> tag=(PaletteInfo) it.next()@it.hasNext() && trait!=null -> IF { -> feature=tag.eClass().getEStructuralFeature(key,)@it.hasNext() && trait!=null && tag.getId().equalsIgnoreCase(tagName,) -> IF { -> IF { -> strValue=tag.eGet(feature,)@it.hasNext() && trait!=null && feature!=null && tag.getId().equalsIgnoreCase(tagName,) && tag.eIsSet(feature,) -> IF { -> value=(String) strValue@it.hasNext() && trait!=null && feature!=null && strValue instanceof String && tag.getId().equalsIgnoreCase(tagName,) && tag.eIsSet(feature,) } } } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facelet.ui/src/org/eclipse/jst/jsf/facelet/ui/internal/contentassist/XHTMLContentAssistProcessor.java!XHTMLContentAssistProcessor!getAvailableChildElementDeclarations][SEQ] =  -> namespaces=getDocumentNamespaces(_factory,childPosition,)@ -> availableChildElements=new ArrayList()@ -> LOOP { -> prefix=entry.getValue().getPrefix()@namespaces.entrySet() -> cmDocument=_factory.createCMDocumentForContext(entry.getValue().getUri(),prefix,)@namespaces.entrySet() -> IF { -> it=cmDocument.getElements().iterator()@cmDocument!=null && namespaces.entrySet() -> LOOP { -> availableChildElements.add(it.next(),)@it.hasNext() && cmDocument!=null && namespaces.entrySet() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/FacesConfigEditor.java!FacesConfigEditor!addPageActionRegistry][SEQ] =  -> IF { -> pageActionRegisty=(ActionRegistry) page.getAdapter(ActionRegistry.class,)@page!=null -> IF { -> iter=pageActionRegisty.getActions()@page!=null && pageActionRegisty!=null -> LOOP { -> getActionRegistry().registerAction((IAction) iter.next(),)@page!=null && pageActionRegisty!=null && iter.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/FacesConfigEditor.java!FacesConfigEditor!doSave][SEQ] =  -> TRY { -> iter=pages.iterator()@ -> LOOP { -> obj=iter.next()@iter.hasNext() -> IF { -> (FormPage) obj.doSave(monitor,)@obj instanceof FormPage && iter.hasNext() } } } CATCH { }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/FacesConfigEditor.java!FacesConfigEditor!handleChangedResources][SEQ] =  -> IF { -> i=changedResources.iterator()@!changedResources.isEmpty()&&!isDirty()||handleDirtyConflict() -> LOOP { -> resource=(Resource) i.next()@!changedResources.isEmpty()&&!isDirty()||handleDirtyConflict() && i.hasNext() -> IF { -> resource.unload()@!changedResources.isEmpty()&&!isDirty()||handleDirtyConflict() && i.hasNext() && resource.isLoaded() -> TRY { -> resource.load(Collections.EMPTY_MAP,)@!changedResources.isEmpty()&&!isDirty()||handleDirtyConflict() && i.hasNext() && resource.isLoaded() } CATCH { } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/FacesConfigEditor.java!FacesConfigEditor!matches][SEQ] =  -> file=(IResource) input.getAdapter(IResource.class,)@ -> IF { -> project=file.getProject()@file!=null -> IF { -> TRY { -> facetedProject=ProjectFacetsManager.create(project,)@project!=null && file!=null -> IF { -> facets=facetedProject.getProjectFacets()@facetedProject!=null && project!=null && file!=null -> it=facets.iterator()@facetedProject!=null && project!=null && file!=null -> LOOP { -> version=(IProjectFacetVersion) it.next()@it.hasNext() && facetedProject!=null && project!=null && file!=null -> facet=version.getProjectFacet()@it.hasNext() && facetedProject!=null && project!=null && file!=null -> IF { } ELSE { -> IF { } } } } } CATCH { } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/FacesConfigEditor.java!FacesConfigEditor!setSelection][SEQ] =  -> listeners=selectionChangedListeners.iterator()@ -> LOOP { -> listener=(ISelectionChangedListener) listeners.next()@listeners.hasNext() -> listener.selectionChanged(new SelectionChangedEvent(this,selection,),)@listeners.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/FacesConfigEditor.java!MultiPageCommandStackListener!dispose][SEQ] =  -> stacks=commandStacks.iterator()@ -> LOOP { -> (CommandStack) stacks.next().removeCommandStackListener(this,)@stacks.hasNext() } -> commandStacks.clear()@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/FacesConfigEditor.java!MultiPageCommandStackListener!markSaveLocations][SEQ] =  -> stacks=commandStacks.iterator()@ -> LOOP { -> stack=(CommandStack) stacks.next()@stacks.hasNext() -> stack.markSaveLocation()@stacks.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/FacesConfigEditor.java!MultiPageCommandStackListener!updateActions][SEQ] =  -> ids=actionIds.iterator()@ -> LOOP { -> action=getActionRegistry().getAction(ids.next(),)@ids.hasNext() -> IF { -> (UpdateAction) action.update()@ids.hasNext() && null!=action&&action instanceof UpdateAction } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/MultiPageEditorOutlinePage.java!MultiPageEditorOutlinePage!dispose][SEQ] =  -> clone=(Map) (HashMap) mapPartToRec.clone()@ -> iterator=clone.values().iterator()@ -> LOOP { -> rec=(PageRec) iterator.next()@iterator.hasNext() -> removePage(rec,)@iterator.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/MultiPageEditorOutlinePage.java!MultiPageEditorOutlinePage!refreshGlobalActionHandlers][SEQ] =  -> bars=getSite().getActionBars()@ -> bars.clearGlobalActionHandlers()@ -> newActionHandlers=activeRec.subActionBars.getGlobalActionHandlers()@ -> IF { -> keys=newActionHandlers.entrySet()@newActionHandlers!=null -> iter=keys.iterator()@newActionHandlers!=null -> LOOP { -> entry=(Map.Entry) iter.next()@newActionHandlers!=null && iter.hasNext() -> bars.setGlobalActionHandler((String) entry.getKey(),(IAction) entry.getValue(),)@newActionHandlers!=null && iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/dialog/ComponentListDialog.java!ComponentListDialog!selectionChanged][SEQ] =  -> selection=getSelection()@ -> IF { -> ssel=(IStructuredSelection) selection@selection instanceof IStructuredSelection } -> IF { -> iter=ssel.iterator()@!ssel.isEmpty() -> LOOP { -> element=(ComponentType) iter.next()@!ssel.isEmpty() && iter.hasNext() -> IF { -> setValue(element.getComponentType().getTextContent(),)@element.getComponentType()!=null && !ssel.isEmpty() && iter.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/page/OthersPage.java!OthersPage!setInputForApplicationSections][SEQ] =  -> IF { -> application=(ApplicationType) facesConfig.getApplication().get(0,)@facesConfig.getApplication().size()>0 } -> it=leftSections.iterator()@ -> LOOP { -> section=(ApplicationSection) it.next()@it.hasNext() -> section.setInput(application,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/page/OthersPage.java!OthersPage!setInputForFactorySections][SEQ] =  -> IF { -> factory=(FactoryType) facesConfig.getFactory().get(0,)@facesConfig.getFactory().size()>0 } -> it=rightSections.iterator()@ -> LOOP { -> section=it.next()@it.hasNext() -> IF { -> (FactorySection) section.setInput(factory,)@it.hasNext() && section instanceof FactorySection } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/page/OthersPage.java!OthersPage!setInputForLifecycleSections][SEQ] =  -> IF { -> lifecycle=(LifecycleType) facesConfig.getLifecycle().get(0,)@facesConfig.getLifecycle().size()>0 } -> it=rightSections.iterator()@ -> LOOP { -> section=it.next()@it.hasNext() -> IF { -> (LifecycleSection) section.setInput(lifecycle,)@it.hasNext() && section instanceof LifecycleSection } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/page/detail/FacesConfigDetailsPage.java!FacesConfigDetailsPage!selectionChanged][SEQ] =  -> listeners=selectionChangedListeners.iterator()@ -> LOOP { -> listener=(ISelectionChangedListener) listeners.next()@listeners.hasNext() -> listener.selectionChanged(new SelectionChangedEvent(this,event.getSelection(),),)@listeners.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/PageflowEditor.java!PageflowEditor!configureEditPartViewer][SEQ] =  -> actionRegistry_=(ActionRegistry) getParentEditor().getAdapter(ActionRegistry.class,)@ -> IF { -> iter=actionRegistry_.getActions()@actionRegistry_!=null -> LOOP { -> getActionRegistry().registerAction((IAction) iter.next(),)@actionRegistry_!=null && iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/PageflowEditor.java!PageflowEditor!propagateProperty][SEQ] =  -> processPropertyChange(property,part,)@ -> IF { -> iterConns=(GraphicalEditPart) part.getSourceConnections().iterator()@part instanceof GraphicalEditPart -> LOOP { -> child=(EditPart) iterConns.next()@iterConns.hasNext() && part instanceof GraphicalEditPart -> propagateProperty(property,child,)@iterConns.hasNext() && part instanceof GraphicalEditPart } } -> iter=part.getChildren().iterator()@ -> LOOP { -> child=(EditPart) iter.next()@iter.hasNext() -> propagateProperty(property,child,)@iter.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/PageflowEditor.java!PageflowEditor!updateActions][SEQ] =  -> ids=actionIds.iterator()@ -> LOOP { -> action=getActionRegistry().getAction(ids.next(),)@ids.hasNext() -> IF { -> (UpdateAction) action.update()@ids.hasNext() && null!=action&&action instanceof UpdateAction } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/action/AlignmentAction.java!AlignmentAction!getFitnessPart][SEQ] =  -> iter=editparts.iterator()@ -> LOOP { -> part=(GraphicalEditPart) iter.next()@iter.hasNext() -> rectPart=part.getFigure().getBounds()@iter.hasNext() -> IF { -> positionComparor=rectPart.getLeft().x@rectPart.getLeft().x<positionComparor && iter.hasNext() } -> IF { -> positionComparor=rectPart.getRight().x@iter.hasNext() && rectPart.getRight().x>positionComparor } -> IF { -> positionComparor=rectPart.getTop().y@rectPart.getTop().y<positionComparor && iter.hasNext() } -> IF { -> positionComparor=rectPart.getBottom().y@iter.hasNext() && rectPart.getBottom().y>positionComparor } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/editpart/PageflowEditPart.java!PageflowEditPart!getModelChildren][SEQ] =  -> allChildren=new LinkedList()@ -> it=getPageflow().getNodes().iterator()@ -> LOOP { -> allChildren.add(it.next(),)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/editpart/PageflowNodeEditPart.java!PageflowNodeEditPart!activate][SEQ] =  -> it=getPageflowNode().getInlinks().iterator()@ -> LOOP { -> link=(PageflowLink) it.next()@it.hasNext() -> hookIntoPageflowElement(link,)@it.hasNext() } -> it=getPageflowNode().getOutlinks().iterator()@ -> LOOP { -> link=(PageflowLink) it.next()@it.hasNext() -> hookIntoPageflowElement(link,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/editpart/PageflowNodeEditPart.java!PageflowNodeEditPart!deactivate][SEQ] =  -> it=getPageflowNode().getInlinks().iterator()@ -> LOOP { -> link=(PageflowLink) it.next()@it.hasNext() -> unhookFromPageflowElement(link,)@it.hasNext() } -> it=getPageflowNode().getOutlinks().iterator()@ -> LOOP { -> link=(PageflowLink) it.next()@it.hasNext() -> unhookFromPageflowElement(link,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/layout/PageflowLayoutManager.java!PageflowLayoutManager!addSelfLoopLinks][SEQ] =  -> IF { -> links=pageflow.getLinks()@pageflow.getLinks()!=null&&selfLoopLinks!=null&&selfLoopLinks.size()>0 -> iter=selfLoopLinks.iterator()@pageflow.getLinks()!=null&&selfLoopLinks!=null&&selfLoopLinks.size()>0 -> LOOP { -> link=(PageflowLink) iter.next()@pageflow.getLinks()!=null&&selfLoopLinks!=null&&selfLoopLinks.size()>0 && iter.hasNext() -> updateSelfLoopLink(link,)@pageflow.getLinks()!=null&&selfLoopLinks!=null&&selfLoopLinks.size()>0 && iter.hasNext() -> links.add(link,)@pageflow.getLinks()!=null&&selfLoopLinks!=null&&selfLoopLinks.size()>0 && iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/layout/PageflowLayoutManager.java!PageflowLayoutManager!createGraphs][SEQ] =  -> IF { -> nodesMap=new HashMap()@ -> nodes=new NodeList()@ -> edges=new EdgeList()@ -> pfNodes=pageflow.getNodes()@pageflow!=null -> IF { -> iter=pfNodes.iterator()@pageflow!=null && pfNodes!=null -> LOOP { -> pfNode=(PageflowNode) iter.next()@pageflow!=null && iter.hasNext() && pfNodes!=null -> node=new Node(pfNode,)@pageflow!=null && iter.hasNext() && pfNodes!=null -> rectNode=getPageflowNodeBounds(pfNode,)@pageflow!=null && iter.hasNext() && pfNodes!=null -> IF { -> node.setPadding(new Insets(node.height,node.width,node.height,node.width,),)@rectNode!=null && pageflow!=null && iter.hasNext() && pfNodes!=null } ELSE { -> node.setPadding(new Insets(DEFAULT_PADDING,),)@ } -> nodesMap.put(pfNode,node,)@pageflow!=null && iter.hasNext() && pfNodes!=null -> nodes.add(node,)@pageflow!=null && iter.hasNext() && pfNodes!=null } } -> pfLinks=pageflow.getLinks()@pageflow!=null -> iter=pfLinks.iterator()@pageflow!=null -> LOOP { -> link=(PageflowLink) iter.next()@pageflow!=null && iter.hasNext() -> source=link.getSource()@pageflow!=null && iter.hasNext() -> target=link.getTarget()@pageflow!=null && iter.hasNext() -> sourceNode=(Node) nodesMap.get(source,)@pageflow!=null && iter.hasNext() -> targetNode=(Node) nodesMap.get(target,)@pageflow!=null && iter.hasNext() -> IF { -> edge=new Edge(sourceNode,targetNode,)@pageflow!=null && sourceNode!=null&&targetNode!=null && iter.hasNext() -> edges.add(edge,)@pageflow!=null && sourceNode!=null&&targetNode!=null && iter.hasNext() } } -> graph=new DirectedGraph()@ -> lstGraph=new ArrayList()@ -> lstGraph.add(graph,)@ }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/layout/PageflowLayoutManager.java!PageflowLayoutManager!getFitnessRectangle][SEQ] =  -> bendPoints=anotherSelfLoopLink.getBendPoints()@ -> IF { -> iterBendPoint=bendPoints.iterator()@bendPoints!=null&&bendPoints.size()>0 -> LOOP { -> bendPoint=(PageflowLinkBendpoint) iterBendPoint.next()@bendPoints!=null&&bendPoints.size()>0 && iterBendPoint.hasNext() -> IF { -> rectDefault=new Rectangle(0,0,rectDefault.width+DEFAULT_PADDING,rectDefault.height+DEFAULT_PADDING,)@bendPoint.getD1Width()==-rectDefault.width&&bendPoint.getD1Height()==-rectDefault.height } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/layout/PageflowLayoutManager.java!PageflowLayoutManager!layoutPageflow][SEQ] =  -> selfLoopLinks=removeSelfLoopLinks(pageflow,)@ -> lstGraph=createGraphs(pageflow,)@ -> iter=lstGraph.iterator()@ -> LOOP { -> graph=(DirectedGraph) iter.next()@iter.hasNext() -> new DirectedGraphLayout().visit(graph,)@iter.hasNext() } -> updatePageflow(lstGraph,)@ -> IF { -> addSelfLoopLinks(pageflow,selfLoopLinks,)@selfLoopLinks!=null }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/layout/PageflowLayoutManager.java!PageflowLayoutManager!removeSelfLoopLinks][SEQ] =  -> selfLoopLinks=new ArrayList()@ -> IF { -> iter=pageflow.getLinks().iterator()@pageflow.getLinks()!=null -> LOOP { -> link=(PageflowLink) iter.next()@pageflow.getLinks()!=null && iter.hasNext() -> IF { -> iter.remove()@pageflow.getLinks()!=null && link.getSource()==link.getTarget() && iter.hasNext() -> link.getBendPoints().clear()@pageflow.getLinks()!=null && link.getSource()==link.getTarget() && iter.hasNext() -> selfLoopLinks.add(link,)@pageflow.getLinks()!=null && link.getSource()==link.getTarget() && iter.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/layout/PageflowLayoutManager.java!PageflowLayoutManager!resolveConflict][SEQ] =  -> iter=notUpdatedNodes.iterator()@ -> LOOP { -> resolveConflict(newPageflow,(PageflowNode) iter.next(),)@iter.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/layout/PageflowLayoutManager.java!PageflowLayoutManager!updatePFLink][SEQ] =  -> iter=oldPageflow.getLinks().iterator()@ -> LOOP { -> oldLink=(PageflowLink) iter.next()@iter.hasNext() -> IF { -> updatePFLink(newLink,oldLink,)@isSameLink(newLink,oldLink,) && iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/layout/PageflowLayoutManager.java!PageflowLayoutManager!updatePFLink][SEQ] =  -> factory=PageflowModelManager.getFactory()@ -> newLink.getBendPoints().clear()@ -> iter=link.getBendPoints().iterator()@ -> LOOP { -> bendPoint=(PageflowLinkBendpoint) iter.next()@iter.hasNext() -> newBendPoint=factory.createPFLinkBendpoint()@ -> newBendPoint.setD1Height(bendPoint.getD1Height(),)@iter.hasNext() -> newBendPoint.setD1Width(bendPoint.getD1Width(),)@iter.hasNext() -> newBendPoint.setD2Height(bendPoint.getD2Height(),)@iter.hasNext() -> newBendPoint.setD2Width(bendPoint.getD2Width(),)@iter.hasNext() -> newLink.getBendPoints().add(newBendPoint,)@ } -> copiedLinks.put(link,link,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/layout/PageflowLayoutManager.java!PageflowLayoutManager!updatePageflowLayout][SEQ] =  -> notUpdatedNodes=new ArrayList()@ -> IF { -> iter=newPageflow.getNodes().iterator()@ -> LOOP { -> newNode=(PageflowNode) iter.next()@iter.hasNext() && oldPageflow.getNodes().size()>0 -> IF { -> notUpdatedNodes.add(newNode,)@iter.hasNext() && !updatePageflowNode(newNode,oldPageflow,) && oldPageflow.getNodes().size()>0 } } } ELSE { -> notUpdatedNodes.addAll(newPageflow.getNodes(),)@ } -> IF { -> iter=newPageflow.getLinks().iterator()@ -> LOOP { -> newLink=(PageflowLink) iter.next()@iter.hasNext() && oldPageflow.getLinks().size()>0 -> updatePFLink(newLink,oldPageflow,)@iter.hasNext() && oldPageflow.getLinks().size()>0 } } -> IF { -> resolveConflict(newPageflow,notUpdatedNodes,)@notUpdatedNodes.size()>0 }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/layout/PageflowLayoutManager.java!PageflowLayoutManager!updatePageflowNode][SEQ] =  -> iter=oldPageflow.getNodes().iterator()@ -> LOOP { -> oldNode=(PageflowNode) iter.next()@iter.hasNext() -> IF { -> IF { -> updatePageflowNode(newNode,oldNode,)@(PageflowPage) oldNode.getPath().trim().equals((PageflowPage) newNode.getPath().trim(),) && oldNode instanceof PageflowPage&&newNode instanceof PageflowPage && iter.hasNext() -> return true@(PageflowPage) oldNode.getPath().trim().equals((PageflowPage) newNode.getPath().trim(),) && oldNode instanceof PageflowPage&&newNode instanceof PageflowPage && iter.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/layout/PageflowLayoutManager.java!PageflowLayoutManager!updatePageflow][SEQ] =  -> iter=lstGraph.iterator()@ -> LOOP { -> graph=(DirectedGraph) iter.next()@iter.hasNext() -> LOOP { -> node=graph.nodes.getNode(i,)@i<graph.nodes.size() && iter.hasNext() -> pfNode=(PageflowNode) node.data@i<graph.nodes.size() && iter.hasNext() -> pfNode.setX(X_SPACE+node.y,)@i<graph.nodes.size() && iter.hasNext() -> pfNode.setY(Y_SPACE+node.x+topSubGraph,)@i<graph.nodes.size() && iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/layout/PageflowLayoutManager.java!PageflowLayoutManager!updateSelfLoopLink][SEQ] =  -> sourceNode=selfLoopLink.getSource()@ -> rectNode=getPageflowNodeBounds(sourceNode,)@ -> outLinks=sourceNode.getOutlinks()@ -> IF { -> iter=outLinks.iterator()@outLinks!=null&&outLinks.size()>0 -> LOOP { -> anotherSelfLoopLink=(PageflowLink) iter.next()@outLinks!=null&&outLinks.size()>0 && iter.hasNext() -> IF { -> rectNode=getFitnessRectangle(rectNode,anotherSelfLoopLink,)@anotherSelfLoopLink!=selfLoopLink&&anotherSelfLoopLink.getTarget()==sourceNode && outLinks!=null&&outLinks.size()>0 && iter.hasNext() } } } -> factory=PageflowModelManager.getFactory()@ -> bpTop=factory.createPFLinkBendpoint()@ -> bpLeftTop=factory.createPFLinkBendpoint()@ -> bpLeft=factory.createPFLinkBendpoint()@ -> bpTop.setD1Height(-rectNode.height,)@ -> bpTop.setD2Height(-rectNode.height,)@ -> bpLeftTop.setD1Width(-rectNode.width,)@ -> bpLeftTop.setD1Height(-rectNode.height,)@ -> bpLeftTop.setD2Width(-rectNode.width,)@ -> bpLeftTop.setD2Height(-rectNode.height,)@ -> bpLeft.setD1Width(-rectNode.width,)@ -> bpLeft.setD2Width(-rectNode.width,)@ -> selfLoopLink.getBendPoints().add(bpTop,)@ -> selfLoopLink.getBendPoints().add(bpLeftTop,)@ -> selfLoopLink.getBendPoints().add(bpLeft,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/model/impl/LinkReferenceElement.java!LinkReferenceElement!update][SEQ] =  -> nodes=getData().iterator()@ -> LOOP { -> next=nodes.next()@nodes.hasNext() -> IF { -> nodes.remove()@!TransformUtil.isValidFacesConfigElement((EObject) next,) && nodes.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/model/impl/PageReferenceElement.java!PageReferenceElement!update][SEQ] =  -> nodes=getData().iterator()@ -> LOOP { -> next=nodes.next()@nodes.hasNext() -> IF { -> IF { -> nodes.remove()@next instanceof FromViewIdType && !TransformUtil.isValidFacesConfigElement((EObject) next,) && nodes.hasNext() } -> links=(PageflowPage) pageflowElement.getOutlinks()@ -> LOOP { -> link=(PageflowLink) links.get(i,)@i<links.size() -> IF { -> rule=(NavigationRuleType) (NavigationCaseType) (PageflowLink) links.get(i,).getFCElements().getData().get(0,).eContainer()@next instanceof FromViewIdType && nodes.hasNext() && !link.getFCElements().isEmpty()&&TransformUtil.isValidFacesConfigElement((NavigationCaseType) (PageflowLink) links.get(i,).getFCElements().getData().get(0,),) && i<links.size() } } -> nodes.remove()@next instanceof FromViewIdType && nodes.hasNext() } ELSE { -> IF { -> IF { -> nodes.remove()@!TransformUtil.isValidFacesConfigElement((EObject) next,) && nodes.hasNext() && next instanceof ToViewIdType && !(next instanceof FromViewIdType) } -> links=(PageflowPage) pageflowElement.getInlinks()@nodes.hasNext() && next instanceof ToViewIdType && !(next instanceof FromViewIdType) -> LOOP { -> link=(PageflowLink) links.get(i,)@i<links.size() } -> nodes.remove()@nodes.hasNext() && next instanceof ToViewIdType && !(next instanceof FromViewIdType) } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/model/impl/PageflowImpl.java!PageflowImpl!getDefaultNodeName][SEQ] =  -> mapNodePrefix_=getNodePrefixMap()@ -> strNodePrefix=(String) mapNodePrefix_.get(nodeType,)@ -> LOOP { -> iter=getNodes().iterator()@ -> LOOP { -> node=(PageflowNode) iter.next()@iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/model/impl/PageflowNodeImpl.java!PageflowNodeImpl!findLinkTo][SEQ] =  -> i=this.getOutlinks().iterator()@ -> LOOP { -> link=(PageflowLink) i.next()@i.hasNext() -> IF { -> return link@link.getTarget()==target && i.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/properties/GeneralViewSection.java!GeneralViewSection!dispose][SEQ] =  -> clone=(Map) (HashMap) mapPartToRec.clone()@ -> iter=clone.values().iterator()@ -> LOOP { -> rec=(PageRec) iter.next()@iter.hasNext() -> removePage(rec,)@iter.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/properties/PageflowElementPropertySource.java!PageflowElementPropertySource!getPropertyDescriptors][SEQ] =  -> propertyDescriptors=new Vector()@ -> cls=element.eClass()@ -> it=cls.getEAllAttributes().iterator()@ -> LOOP { -> attr=(EAttribute) it.next()@it.hasNext() -> type=attr.getEAttributeType()@it.hasNext() -> IF { -> IF { -> propertyDescriptor=getPagePathPropertyDescriptor(attr,)@it.hasNext() && type.getInstanceClass()==String.class && attr.getName().equalsIgnoreCase(PAGEFLOW_PATH,) } ELSE { } ELSE { -> propertyDescriptor=new TextPropertyDescriptor(Integer.toString(attr.getFeatureID(),),getString(attr.getName(),),)@it.hasNext() && !(attr.getName().equalsIgnoreCase(PAGEFLOW_CONFIG_FILE,)) && !(attr.getName().equalsIgnoreCase(PAGEFLOW_PATH,)) && type.getInstanceClass()==String.class } -> IF { -> propertyDescriptor.setLabelProvider(new PageflowLabelProvider(),)@it.hasNext() && propertyDescriptor!=null && type.getInstanceClass()==String.class -> propertyDescriptors.add(propertyDescriptor,)@it.hasNext() && propertyDescriptor!=null && type.getInstanceClass()==String.class } } ELSE { -> IF { -> propertyDescriptor=getBooleanTypePropertyDescriptor(attr,)@it.hasNext() && !(type.getInstanceClass()==String.class) && type.getInstanceClass()==boolean.class -> propertyDescriptor.setLabelProvider(new BooleanLabelProvider(),)@it.hasNext() && !(type.getInstanceClass()==String.class) && type.getInstanceClass()==boolean.class -> propertyDescriptors.add(propertyDescriptor,)@it.hasNext() && !(type.getInstanceClass()==String.class) && type.getInstanceClass()==boolean.class } } } -> return (IPropertyDescriptor[]) propertyDescriptors.toArray( new IPropertyDescriptor[],)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/properties/PageflowLinkPropertySource.java!PageflowLinkPropertySource!getPropertyDescriptors][SEQ] =  -> propertyDescriptors=new Vector()@ -> cls=element.eClass()@ -> it=cls.getEAllAttributes().iterator()@ -> LOOP { -> attr=(EAttribute) it.next()@it.hasNext() -> type=attr.getEAttributeType()@it.hasNext() -> IF { -> propertyDescriptor=new TextPropertyDescriptor(Integer.toString(attr.getFeatureID(),),getString(attr.getName(),),)@it.hasNext() && type.getInstanceClass()==String.class -> IF { -> propertyDescriptor.setLabelProvider(new PageflowLabelProvider(),)@it.hasNext() && propertyDescriptor!=null && type.getInstanceClass()==String.class -> propertyDescriptors.add(propertyDescriptor,)@it.hasNext() && propertyDescriptor!=null && type.getInstanceClass()==String.class } } ELSE { -> IF { -> propertyDescriptor=getBooleanTypePropertyDescriptor(attr,)@it.hasNext() && !(type.getInstanceClass()==String.class) && type.getInstanceClass()==boolean.class -> propertyDescriptor.setLabelProvider(new BooleanLabelProvider(),)@it.hasNext() && !(type.getInstanceClass()==String.class) && type.getInstanceClass()==boolean.class -> propertyDescriptors.add(propertyDescriptor,)@it.hasNext() && !(type.getInstanceClass()==String.class) && type.getInstanceClass()==boolean.class } } } -> it=cls.getEReferences().iterator()@ -> LOOP { -> attr=(EReference) it.next()@it.hasNext() -> IF { -> propertyDescriptor=getExistingPagePathPropertyDescriptor(attr,)@it.hasNext() && attr.getFeatureID()==PageflowPackage.PF_LINK__SOURCE||attr.getFeatureID()==PageflowPackage.PF_LINK__TARGET -> IF { -> propertyDescriptor.setLabelProvider(new PageflowLabelProvider(),)@it.hasNext() && attr.getFeatureID()==PageflowPackage.PF_LINK__SOURCE||attr.getFeatureID()==PageflowPackage.PF_LINK__TARGET && propertyDescriptor!=null -> propertyDescriptors.add(propertyDescriptor,)@it.hasNext() && attr.getFeatureID()==PageflowPackage.PF_LINK__SOURCE||attr.getFeatureID()==PageflowPackage.PF_LINK__TARGET && propertyDescriptor!=null } } } -> return (IPropertyDescriptor[]) propertyDescriptors.toArray( new IPropertyDescriptor[],)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/properties/section/AbstractEditPartSection.java!AbstractEditPartSection!getFeatureID][SEQ] =  -> IF { -> return null@editPart!=null&&!editPart.getModel() instanceof EObject } -> propertyID=getPropertyRegistry().get(propertyName,)@!(editPart!=null&&!editPart.getModel() instanceof EObject) -> IF { -> cls=(EObject) editPart.getModel().eClass()@!(editPart!=null&&!editPart.getModel() instanceof EObject) -> it=cls.getEAllAttributes().iterator()@!(editPart!=null&&!editPart.getModel() instanceof EObject) -> LOOP { -> attr=(EAttribute) it.next()@it.hasNext() && propertyID==null && !(editPart!=null&&!editPart.getModel() instanceof EObject) -> IF { -> propertyID=Integer.toString(attr.getFeatureID(),)@it.hasNext() && propertyID==null && !(editPart!=null&&!editPart.getModel() instanceof EObject) && attr.getName().equalsIgnoreCase(propertyName,) -> getPropertyRegistry().put(propertyName,propertyID,)@it.hasNext() && propertyID==null && !(editPart!=null&&!editPart.getModel() instanceof EObject) && attr.getName().equalsIgnoreCase(propertyName,) } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/synchronization/FC2PFTransformer.java!FC2PFTransformer!cleanPageflowNavigationRule][SEQ] =  -> links=pageflow_.getLinks()@ -> linksIterator=links.iterator()@ -> LOOP { -> link=(PageflowLink) linksIterator.next()@linksIterator.hasNext() -> IF { -> linksIterator.remove()@linksIterator.hasNext() && link.getFCElements().isEmpty() -> IF { -> link.getSource().getOutlinks().remove(link,)@link.getSource()!=null && linksIterator.hasNext() && link.getFCElements().isEmpty() } -> IF { -> link.getTarget().getInlinks().remove(link,)@linksIterator.hasNext() && link.getTarget()!=null && link.getFCElements().isEmpty() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/synchronization/FC2PFTransformer.java!FC2PFTransformer!isAdapted][SEQ] =  -> IF { -> adapters=object.eAdapters().iterator()@object!=null -> LOOP { -> adapter=adapters.next()@object!=null && adapters.hasNext() -> IF { -> return true@object!=null && adapter instanceof FC2PFSynchronizer||adapter instanceof PF2FCSynchronizer && adapters.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/synchronization/FC2PFTransformer.java!FC2PFTransformer!unAdapt][SEQ] =  -> adapters=object.eAdapters().iterator()@ -> LOOP { -> adapter=adapters.next()@adapters.hasNext() -> IF { -> adapters.remove()@adapter instanceof FC2PFSynchronizer||adapter instanceof PF2FCSynchronizer && adapters.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/synchronization/FC2PFTransformer.java!FC2PFTransformer!updateNavigationRulesInPageflowFromFacesConfig][SEQ] =  -> IF { -> iterLink=pageflow.getLinks().iterator()@ -> LOOP { -> link=(PageflowLink) iterLink.next()@iterLink.hasNext() -> link.getSource().getOutlinks().remove(link,)@iterLink.hasNext() -> link.getTarget().getInlinks().remove(link,)@iterLink.hasNext() } -> pageflow.getLinks().clear()@ } ELSE { -> iterRulesFC=rulesFC.iterator()@!(rulesFC==null||rulesFC.isEmpty()) -> LOOP { -> ruleFC=(NavigationRuleType) iterRulesFC.next()@iterRulesFC.hasNext() && !(rulesFC==null||rulesFC.isEmpty()) -> casesFC=ruleFC.getNavigationCase()@iterRulesFC.hasNext() && !(rulesFC==null||rulesFC.isEmpty()) -> iterCasesFC=casesFC.iterator()@iterRulesFC.hasNext() && !(rulesFC==null||rulesFC.isEmpty()) -> LOOP { -> navigationCaseFC=(NavigationCaseType) iterCasesFC.next()@iterRulesFC.hasNext() && iterCasesFC.hasNext() && !(rulesFC==null||rulesFC.isEmpty()) -> isNew|=updatePageflowElements(pageflow,navigationCaseFC,)@iterRulesFC.hasNext() && iterCasesFC.hasNext() && !(rulesFC==null||rulesFC.isEmpty()) } } } -> isNew|=cleanPageflowNavigationRule(pageflow,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/util/EditPartMarkerUtil.java!EditPartMarkerUtil!findEditPart][SEQ] =  -> model=containerPart.getModel()@ -> IF { -> modelId=(PageflowElement) model.getId()@model instanceof PageflowElement } -> iterNode=containerPart.getChildren().iterator()@!(model instanceof PageflowElement) -> LOOP { -> child=(GraphicalEditPart) iterNode.next()@!(model instanceof PageflowElement) && iterNode.hasNext() -> foundPart=findEditPart(child,id,)@!(model instanceof PageflowElement) && iterNode.hasNext() -> IF { -> return foundPart@!(model instanceof PageflowElement) && iterNode.hasNext() && foundPart!=null } } -> iterConnection=containerPart.getSourceConnections().iterator()@!(model instanceof PageflowElement) && !(iterNode.hasNext()) -> LOOP { -> child=(GraphicalEditPart) iterConnection.next()@!(model instanceof PageflowElement) && !(iterNode.hasNext()) && iterConnection.hasNext() -> foundPart=findEditPart(child,id,)@!(model instanceof PageflowElement) && !(iterNode.hasNext()) && iterConnection.hasNext() -> IF { -> return foundPart@!(model instanceof PageflowElement) && !(iterNode.hasNext()) && iterConnection.hasNext() && foundPart!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/util/PageflowAnnotationUtil.java!PageflowAnnotationUtil!validatePageflow][SEQ] =  -> IF { -> return @containerPart==null } -> iterChild=containerPart.getChildren().iterator()@!(containerPart==null) -> LOOP { -> element=(PageflowElementEditPart) iterChild.next()@iterChild.hasNext() && !(containerPart==null) -> IF { -> (PFValidator) element.validate()@iterChild.hasNext() && !(containerPart==null) && element instanceof PFValidator } -> iterLinks=element.getSourceConnections().iterator()@iterChild.hasNext() && !(containerPart==null) -> LOOP { -> link=(PageflowLinkEditPart) iterLinks.next()@iterLinks.hasNext() && iterChild.hasNext() && !(containerPart==null) -> link.validate()@iterLinks.hasNext() && iterChild.hasNext() && !(containerPart==null) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/util/PageflowModelManager.java!PageflowModelManager!foundPage][SEQ] =  -> IF { -> iterNodes=getModel().getNodes().iterator()@ -> LOOP { -> node=(PageflowNode) iterNodes.next()@iterNodes.hasNext() -> IF { -> IF { -> page=(PageflowPage) node@iterNodes.hasNext() && node instanceof PageflowPage && (PageflowPage) node.getPath().equalsIgnoreCase(webPath,) } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/util/PageflowModelManager.java!PageflowModelManager!getModel][SEQ] =  -> IF { -> l=resourcePageflow.getContents()@ -> i=l.iterator()@ -> LOOP { -> o=i.next()@i.hasNext() && null==pageflow -> IF { -> pageflow=(Pageflow) o@o instanceof Pageflow && i.hasNext() && null==pageflow } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/pageflow/util/PageflowValidation.java!PageflowValidation!isExistedPage][SEQ] =  -> IF { -> return false@pageflow==null||pagePath==null } -> iter=pageflow.getNodes().iterator()@!(pageflow==null||pagePath==null) -> LOOP { -> existedNode=(PageflowNode) iter.next()@!(pageflow==null||pagePath==null) && iter.hasNext() -> IF { -> IF { -> return true@existedNode instanceof PageflowPage && (PageflowPage) existedNode.getPath()!=null&&(PageflowPage) existedNode.getPath().equalsIgnoreCase(pagePath,) && !(pageflow==null||pagePath==null) && iter.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/preference/BaseNodeFigure.java!BaseNodeFigure!determineAnchorPositions][SEQ] =  -> topConnectionAnchors.clear()@ -> bottomConnectionAnchors.clear()@ -> leftConnectionAnchors.clear()@ -> rightConnectionAnchors.clear()@ -> IF { -> it=getSourceConnectionAnchors().iterator()@ -> LOOP { -> port=(PortConnectionAnchor) it.next()@it.hasNext() -> direction=port.getOrientation()@it.hasNext() -> IF { -> loc=port.getOwner().getParent().getBounds().getLocation()@direction==PositionConstants.NONE && it.hasNext() -> itc=port.getConnections().iterator()@direction==PositionConstants.NONE && it.hasNext() -> IF { -> LOOP { -> conn=(PolylineConnection) itc.next()@direction==PositionConstants.NONE && it.hasNext() && itc.hasNext() -> IF { -> otherPort=conn.getTargetAnchor()@direction==PositionConstants.NONE && port==conn.getSourceAnchor() && it.hasNext() && itc.hasNext() } ELSE { -> otherPort=conn.getSourceAnchor()@direction==PositionConstants.NONE && it.hasNext() && itc.hasNext() && !(port==conn.getSourceAnchor()) } -> otherLoc=otherPort.getOwner().getParent().getBounds().getLocation()@direction==PositionConstants.NONE && it.hasNext() && itc.hasNext() -> direction=loc.getPosition(otherLoc,)@direction==PositionConstants.NONE && it.hasNext() && itc.hasNext() -> IF { -> topConnectionAnchors.add(port,)@direction==PositionConstants.NONE && it.hasNext() && itc.hasNext() && direction==PositionConstants.NORTH } ELSE { -> IF { -> bottomConnectionAnchors.add(port,)@direction==PositionConstants.NONE && it.hasNext() && itc.hasNext() && !(direction==PositionConstants.NORTH) && direction==PositionConstants.SOUTH } ELSE { -> IF { -> leftConnectionAnchors.add(port,)@direction==PositionConstants.NONE && it.hasNext() && !(direction==PositionConstants.SOUTH) && itc.hasNext() && direction==PositionConstants.WEST && !(direction==PositionConstants.NORTH) } ELSE { -> rightConnectionAnchors.add(port,)@direction==PositionConstants.NONE && it.hasNext() && !(direction==PositionConstants.WEST) && !(direction==PositionConstants.SOUTH) && itc.hasNext() && !(direction==PositionConstants.NORTH) } } } -> (PortFigure) port.getOwner().setOrientation(direction,)@direction==PositionConstants.NONE && it.hasNext() && itc.hasNext() } } ELSE { -> rightConnectionAnchors.add(port,)@direction==PositionConstants.NONE && it.hasNext() && !(itc.hasNext()) -> (PortFigure) port.getOwner().setOrientation(PositionConstants.EAST,)@direction==PositionConstants.NONE && it.hasNext() && !(itc.hasNext()) } } ELSE { -> IF { -> topConnectionAnchors.add(port,)@it.hasNext() && !(direction==PositionConstants.NONE) && direction==PositionConstants.NORTH } ELSE { -> IF { -> bottomConnectionAnchors.add(port,)@it.hasNext() && !(direction==PositionConstants.NORTH) && !(direction==PositionConstants.NONE) && direction==PositionConstants.SOUTH } ELSE { -> IF { -> leftConnectionAnchors.add(port,)@it.hasNext() && !(direction==PositionConstants.SOUTH) && direction==PositionConstants.WEST && !(direction==PositionConstants.NORTH) && !(direction==PositionConstants.NONE) } ELSE { -> rightConnectionAnchors.add(port,)@it.hasNext() && !(direction==PositionConstants.WEST) && !(direction==PositionConstants.SOUTH) && !(direction==PositionConstants.NORTH) && !(direction==PositionConstants.NONE) } } } } } -> it=getTargetConnectionAnchors().iterator()@ -> LOOP { -> port=(PortConnectionAnchor) it.next()@it.hasNext() -> direction=port.getOrientation()@it.hasNext() -> IF { -> loc=port.getOwner().getParent().getBounds().getLocation()@it.hasNext() && direction==PositionConstants.NONE -> itc=port.getConnections().iterator()@it.hasNext() && direction==PositionConstants.NONE -> IF { -> LOOP { -> conn=(PolylineConnection) itc.next()@it.hasNext() && direction==PositionConstants.NONE && itc.hasNext() -> IF { -> otherPort=conn.getTargetAnchor()@it.hasNext() && direction==PositionConstants.NONE && port==conn.getSourceAnchor() && itc.hasNext() } ELSE { -> otherPort=conn.getSourceAnchor()@it.hasNext() && direction==PositionConstants.NONE && itc.hasNext() && !(port==conn.getSourceAnchor()) } -> otherLoc=otherPort.getOwner().getParent().getBounds().getLocation()@it.hasNext() && direction==PositionConstants.NONE && itc.hasNext() -> direction=loc.getPosition(otherLoc,)@it.hasNext() && direction==PositionConstants.NONE && itc.hasNext() -> IF { -> topConnectionAnchors.add(port,)@it.hasNext() && direction==PositionConstants.NONE && itc.hasNext() && direction==PositionConstants.NORTH } ELSE { -> IF { -> bottomConnectionAnchors.add(port,)@it.hasNext() && direction==PositionConstants.NONE && itc.hasNext() && !(direction==PositionConstants.NORTH) && direction==PositionConstants.SOUTH } ELSE { -> IF { -> rightConnectionAnchors.add(port,)@it.hasNext() && direction==PositionConstants.NONE && !(direction==PositionConstants.SOUTH) && itc.hasNext() && !(direction==PositionConstants.NORTH) && direction==PositionConstants.EAST } ELSE { -> leftConnectionAnchors.add(port,)@it.hasNext() && direction==PositionConstants.NONE && !(direction==PositionConstants.SOUTH) && itc.hasNext() && !(direction==PositionConstants.NORTH) && !(direction==PositionConstants.EAST) } } } -> (PortFigure) port.getOwner().setOrientation(direction,)@it.hasNext() && direction==PositionConstants.NONE && itc.hasNext() } } ELSE { -> leftConnectionAnchors.add(port,)@it.hasNext() && direction==PositionConstants.NONE && !(itc.hasNext()) -> (PortFigure) port.getOwner().setOrientation(PositionConstants.WEST,)@it.hasNext() && direction==PositionConstants.NONE && !(itc.hasNext()) } } ELSE { -> IF { -> topConnectionAnchors.add(port,)@it.hasNext() && !(direction==PositionConstants.NONE) && direction==PositionConstants.NORTH } ELSE { -> IF { -> bottomConnectionAnchors.add(port,)@it.hasNext() && !(direction==PositionConstants.NORTH) && !(direction==PositionConstants.NONE) && direction==PositionConstants.SOUTH } ELSE { -> IF { -> rightConnectionAnchors.add(port,)@it.hasNext() && !(direction==PositionConstants.SOUTH) && !(direction==PositionConstants.NORTH) && !(direction==PositionConstants.NONE) && direction==PositionConstants.EAST } ELSE { -> leftConnectionAnchors.add(port,)@it.hasNext() && !(direction==PositionConstants.SOUTH) && !(direction==PositionConstants.NORTH) && !(direction==PositionConstants.EAST) && !(direction==PositionConstants.NONE) } } } } } -> comparePorts=new Comparator()@ -> Collections.sort(topConnectionAnchors,comparePorts,)@ -> Collections.sort(leftConnectionAnchors,comparePorts,)@ -> Collections.sort(bottomConnectionAnchors,comparePorts,)@ -> Collections.sort(rightConnectionAnchors,comparePorts,)@ }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/preference/BaseNodeFigure.java!BaseNodeFigure!getAnchorSize][SEQ] =  -> IF { -> iter=connectionAnchors.values().iterator()@!connectionAnchors.isEmpty() -> a=(PortConnectionAnchor) iter.next()@!connectionAnchors.isEmpty() -> d=a.getOwner().getPreferredSize()@!connectionAnchors.isEmpty() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/preference/BaseNodeFigure.java!BaseNodeFigure!getNameForAnchor][SEQ] =  -> IF { -> it=connectionAnchors.keySet().iterator()@!(anchor!=null) -> LOOP { -> name=(String) it.next()@it.hasNext() && anchor!=null -> IF { -> return name@it.hasNext() && anchor!=null && anchor.equals(connectionAnchors.get(name,),) } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/preference/BaseNodeFigure.java!BaseNodeFigure!placeAnchors][SEQ] =  -> IF { -> sz=baseFigure.getPreferredSize()@ -> layout=getLayoutManager()@ -> d=getAnchorSize()@ -> y+=sz.height-leftConnectionAnchors.size()*d.height+FigureConstants.PORT_SPACING/2@ -> it=leftConnectionAnchors.iterator()@ -> LOOP { -> port=(PortConnectionAnchor) it.next()@it.hasNext() -> r=new Rectangle(x,y,-1,-1,)@it.hasNext() -> oldrect=(Rectangle) layout.getConstraint(port.getOwner(),)@it.hasNext() -> IF { -> layout.setConstraint(port.getOwner(),new Rectangle(x,y,-1,-1,),)@it.hasNext() && !r.equals(oldrect,) } } -> y+=sz.height-rightConnectionAnchors.size()*d.height+FigureConstants.PORT_SPACING/2@ -> it=rightConnectionAnchors.iterator()@ -> LOOP { -> port=(PortConnectionAnchor) it.next()@it.hasNext() -> r=new Rectangle(x,y,-1,-1,)@it.hasNext() -> oldrect=(Rectangle) layout.getConstraint(port.getOwner(),)@it.hasNext() -> IF { -> layout.setConstraint(port.getOwner(),new Rectangle(x,y,-1,-1,),)@it.hasNext() && !r.equals(oldrect,) } } -> x+=sz.width-topConnectionAnchors.size()*d.width+FigureConstants.PORT_SPACING/2@ -> it=topConnectionAnchors.iterator()@ -> LOOP { -> port=(PortConnectionAnchor) it.next()@it.hasNext() -> r=new Rectangle(x,y,-1,-1,)@it.hasNext() -> oldrect=(Rectangle) layout.getConstraint(port.getOwner(),)@it.hasNext() -> IF { -> layout.setConstraint(port.getOwner(),new Rectangle(x,y,-1,-1,),)@it.hasNext() && !r.equals(oldrect,) } } -> x+=sz.width-bottomConnectionAnchors.size()*d.width+FigureConstants.PORT_SPACING/2@ -> it=bottomConnectionAnchors.iterator()@ -> LOOP { -> port=(PortConnectionAnchor) it.next()@it.hasNext() -> r=new Rectangle(x,y,-1,-1,)@it.hasNext() -> oldrect=(Rectangle) layout.getConstraint(port.getOwner(),)@it.hasNext() -> IF { -> layout.setConstraint(port.getOwner(),new Rectangle(x,y,-1,-1,),)@it.hasNext() && !r.equals(oldrect,) } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/preference/BaseNodeFigure.java!BaseNodeFigure!setAnchorsVisible][SEQ] =  -> IF { -> all=new ArrayList()@ -> all.addAll(getTargetConnectionAnchors(),)@ -> all.addAll(getSourceConnectionAnchors(),)@ -> it=all.iterator()@ -> LOOP { -> fig=(ConnectionAnchor) it.next().getOwner()@it.hasNext() && anchorsVisible!=visible -> fig.setVisible(visible,)@it.hasNext() && anchorsVisible!=visible } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/preference/CompoundNodeFigure.java!CompoundNodeFigure!fireExtentChanged][SEQ] =  -> IF { -> iter=getListeners(FreeformListener.class,)@ -> LOOP { -> (FreeformListener) iter.next().notifyFreeformExtentChanged()@iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/preference/IconFigure.java!IconFigure!placeDecorators][SEQ] =  -> size=this.getIconBounds().getSize()@ -> it=getDecorators().iterator()@ -> LOOP { -> decorator=(BaseFigureDecorator) it.next()@it.hasNext() -> decoratorSize=decorator.getPreferredSize()@it.hasNext() -> decorator.getPosition()@it.hasNext() -> getLayoutManager().setConstraint(decorator,new Rectangle(x,y,-1,-1,),)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/preference/IconFigure.java!IconFigure!removeDecorator][SEQ] =  -> it=getDecorators().iterator()@ -> LOOP { -> d=(BaseFigureDecorator) it.next()@it.hasNext() -> IF { -> it.remove()@it.hasNext() && d.getPosition()==position -> remove(d,)@it.hasNext() && d.getPosition()==position } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/preference/ObserveVisibleXYLayout.java!ObserveVisibleXYLayout!layout][SEQ] =  -> children=parent.getChildren().iterator()@ -> offset=getOrigin(parent,)@ -> LOOP { -> f=(IFigure) children.next()@children.hasNext() -> bounds=(Rectangle) getConstraint(f,)@children.hasNext() -> IF { -> preferredSize_=f.getPreferredSize(bounds.width,bounds.height,)@bounds.width==-1||bounds.height==-1 && children.hasNext() -> bounds=bounds.getCopy()@bounds.width==-1||bounds.height==-1 && children.hasNext() } -> bounds=bounds.getTranslated(offset,)@children.hasNext() -> f.setBounds(bounds,)@children.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/preference/PortConnectionAnchor.java!PortConnectionAnchor!getConnections][SEQ] =  -> list=new Vector()@ -> it=listeners.iterator()@ -> LOOP { -> listener=it.next()@it.hasNext() -> IF { -> list.add(listener,)@it.hasNext() && listener instanceof PolylineConnection } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/preference/PrintedPageLayer.java!PrintedPageLayer!setFreeformBounds][SEQ] =  -> IF { -> layer=(FreeformLayer) host.getLayer(LayerConstants.PRIMARY_LAYER,)@ -> b=layer.getFreeformExtent().getCopy()@ -> layer=(FreeformLayer) host.getLayer(LayerConstants.CONNECTION_LAYER,)@ -> b=b.union(layer.getFreeformExtent(),)@ -> layer=(FreeformLayer) host.getLayer(LayerConstants.FEEDBACK_LAYER,)@ -> b=b.union(layer.getFreeformExtent(),)@ -> keepers=new ArrayList()@ -> trash=new ArrayList()@ -> iter=getChildren().iterator()@ -> LOOP { -> child=(Figure) iter.next()@iter.hasNext() -> IF { -> keepers.add(child,)@iter.hasNext() && child.getBounds().intersects(b,) } ELSE { -> trash.add(child,)@!(child.getBounds().intersects(b,)) && iter.hasNext() } } -> LOOP { -> LOOP { -> iter=keepers.iterator()@xi<x+w -> LOOP { -> child=(Figure) iter.next()@xi<x+w && iter.hasNext() -> p=child.getBounds().getLocation()@xi<x+w && yi<y+h && iter.hasNext() } -> IF { -> add(createPage(xi,yi,),)@xi<x+w && yi<y+h } } } -> iter=trash.iterator()@ -> LOOP { -> remove((Figure) iter.next(),)@iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/preference/TabbedTitleBarBorder.java!TabbedTitleBarBorder!paint][SEQ] =  -> is=new Insets(in,)@ -> getInsets(figure,)@ -> super.paint(figure,g,is,)@ -> tempRect.setBounds(getPaintRectangle(figure,in,),)@ -> r.height=Math.min(r.height,getTextExtents(figure,).height,)@ -> g.clipRect(r,)@ -> g.setBackgroundColor(getBackgroundColor(),)@ -> g.fillRectangle(r,)@ -> iter=getTabList().iterator()@ -> LOOP { -> t=(Tab) iter.next()@iter.hasNext() -> t.paint(g,figure,x,y,)@iter.hasNext() -> x+=t.getTextExtents().width@iter.hasNext() } -> g.setBackgroundColor(getBackgroundColor(),)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/preference/WindowFigure.java!WindowFigure!fireExtentChanged][SEQ] =  -> iter=getListeners(FreeformListener.class,)@ -> LOOP { -> (FreeformListener) iter.next().notifyFreeformExtentChanged()@iter.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/section/AbstractFacesConfigSection.java!AbstractFacesConfigSection!selectionChanged][SEQ] =  -> listeners=selectionChangedListeners.iterator()@ -> LOOP { -> listener=(ISelectionChangedListener) listeners.next()@listeners.hasNext() -> listener.selectionChanged(new SelectionChangedEvent(this,(event!=null)?event.getSelection():StructuredSelection.EMPTY,),)@listeners.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/section/FacesConfigMasterSection.java!FacesConfigMasterSection!removeButtonSelected][SEQ] =  -> selection=getSelection()@ -> IF { -> ssel=(IStructuredSelection) selection@selection instanceof IStructuredSelection } -> IF { -> commands=new ArrayList(ssel.size(),)@!ssel.isEmpty() -> iter=ssel.iterator()@!ssel.isEmpty() -> LOOP { -> element=(EObject) iter.next()@!ssel.isEmpty() && iter.hasNext() -> command=RemoveCommand.create(getEditingDomain(),element,)@!ssel.isEmpty() && iter.hasNext() -> commands.add(command,)@!ssel.isEmpty() && iter.hasNext() } -> command=new CompoundCommand(commands,)@!ssel.isEmpty() -> IF { -> getEditingDomain().getCommandStack().execute(command,)@!ssel.isEmpty() && command.canExecute() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/section/ListEntriesEditGroup.java!ListEntriesEditGroup!selectionChanged][SEQ] =  -> listeners=selectionChangedListeners.iterator()@ -> LOOP { -> listener=(ISelectionChangedListener) listeners.next()@listeners.hasNext() -> listener.selectionChanged(new SelectionChangedEvent(this,event.getSelection(),),)@listeners.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/section/ManagedBeanMasterSection.java!ManagedBeanMasterSection!addAdaptersOntoInput][SEQ] =  -> super.addAdaptersOntoInput(newInput,)@ -> facesConfig=(FacesConfigType) newInput@ -> IF { -> facesConfig.eAdapters().add(getManagedBeanMasterSectionAdapter(),)@EcoreUtil.getExistingAdapter(facesConfig,ManagedBeanMasterSection.class,)==null } -> managedbeans=facesConfig.getManagedBean()@ -> it=managedbeans.iterator()@ -> LOOP { -> managedbean=(ManagedBeanType) it.next()@it.hasNext() -> IF { -> managedbean.eAdapters().add(getManagedBeanMasterSectionAdapter(),)@it.hasNext() && EcoreUtil.getExistingAdapter(managedbean,ManagedBeanMasterSection.class,)==null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/section/ManagedBeanMasterSection.java!ManagedBeanMasterSection!removeAdaptersFromInput][SEQ] =  -> facesConfig=(FacesConfigType) oldInput@ -> IF { -> facesConfig.eAdapters().remove(getManagedBeanMasterSectionAdapter(),)@EcoreUtil.getExistingAdapter(facesConfig,ManagedBeanMasterSection.class,)!=null } -> managedbeans=facesConfig.getManagedBean()@ -> it=managedbeans.iterator()@ -> LOOP { -> managedbean=(ManagedBeanType) it.next()@it.hasNext() -> IF { -> managedbean.eAdapters().remove(getManagedBeanMasterSectionAdapter(),)@it.hasNext() && EcoreUtil.getExistingAdapter(managedbean,ManagedBeanMasterSection.class,)!=null } } -> super.removeAdaptersFromInput(oldInput,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/section/ManagedBeanScopeTreeItem.java!ManagedBeanScopeTreeItem!getChildren][SEQ] =  -> result=new ArrayList()@ -> managedBeans=facesConfig.getManagedBean()@ -> it=managedBeans.iterator()@ -> LOOP { -> managedBean=(ManagedBeanType) it.next()@it.hasNext() -> IF { -> IF { -> result.add(managedBean,)@it.hasNext() && managedBean.getManagedBeanScope()!=null && scope.equals(managedBean.getManagedBeanScope().getTextContent(),) } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/section/ManagedPropertyEditGroup.java!ManagedPropertyEditGroup!selectionChanged][SEQ] =  -> listeners=selectionChangedListeners.iterator()@ -> LOOP { -> listener=(ISelectionChangedListener) listeners.next()@listeners.hasNext() -> listener.selectionChanged(new SelectionChangedEvent(this,event.getSelection(),),)@listeners.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/section/MapEntriesEditGroup.java!MapEntriesEditGroup!selectionChanged][SEQ] =  -> listeners=selectionChangedListeners.iterator()@ -> LOOP { -> listener=(ISelectionChangedListener) listeners.next()@listeners.hasNext() -> listener.selectionChanged(new SelectionChangedEvent(this,event.getSelection(),),)@listeners.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/section/OthersPageBaseSection.java!OthersPageBaseSection!removeButtonSelected][SEQ] =  -> selection=getSelection()@ -> IF { -> ssel=(IStructuredSelection) selection@selection instanceof IStructuredSelection } -> IF { -> commands=new ArrayList(ssel.size(),)@!ssel.isEmpty() -> iter=ssel.iterator()@!ssel.isEmpty() -> LOOP { -> element=(EObject) iter.next()@!ssel.isEmpty() && iter.hasNext() -> IF { -> element=element.eContainer()@!ssel.isEmpty() && element.eContainer().eContents().size()==1 && iter.hasNext() } -> command=RemoveCommand.create(getEditingDomain(),element,)@!ssel.isEmpty() && iter.hasNext() -> commands.add(command,)@!ssel.isEmpty() && iter.hasNext() } -> command=new CompoundCommand(commands,)@!ssel.isEmpty() -> IF { -> getEditingDomain().getCommandStack().execute(command,)@!ssel.isEmpty() && command.canExecute() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/section/OverviewNavigationSection.java!OverviewNavigationSection!addAdaptersOntoInput][SEQ] =  -> facesConfig=(FacesConfigType) newInput@ -> addOverviewNavigationSectionAdapter(facesConfig,)@ -> it=facesConfig.getNavigationRule().iterator()@ -> LOOP { -> navigationRule=(NavigationRuleType) it.next()@it.hasNext() -> addOverviewNavigationSectionAdapter(navigationRule,)@it.hasNext() -> IF { -> addOverviewNavigationSectionAdapter(navigationRule.getFromViewId(),)@it.hasNext() && navigationRule.getFromViewId()!=null } -> it2=navigationRule.getNavigationCase().iterator()@it.hasNext() -> LOOP { -> navigationCase=(NavigationCaseType) it2.next()@it.hasNext() && it2.hasNext() -> addOverviewNavigationSectionAdapter(navigationCase,)@it.hasNext() && it2.hasNext() -> IF { -> addOverviewNavigationSectionAdapter(navigationCase.getFromOutcome(),)@it.hasNext() && it2.hasNext() && navigationCase.getFromOutcome()!=null } -> IF { -> addOverviewNavigationSectionAdapter(navigationCase.getToViewId(),)@navigationCase.getToViewId()!=null && it.hasNext() && it2.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/section/OverviewNavigationSection.java!OverviewNavigationSection!removeAdaptersFromInput][SEQ] =  -> super.removeAdaptersFromInput(oldInput,)@ -> facesConfig=(FacesConfigType) oldInput@ -> removeOverviewNavigationSectionAdapter(facesConfig,)@ -> it=facesConfig.getNavigationRule().iterator()@ -> LOOP { -> navigationRule=(NavigationRuleType) it.next()@it.hasNext() -> removeOverviewNavigationSectionAdapter(navigationRule,)@it.hasNext() -> IF { -> removeOverviewNavigationSectionAdapter(navigationRule.getFromViewId(),)@it.hasNext() && navigationRule.getFromViewId()!=null } -> it2=navigationRule.getNavigationCase().iterator()@it.hasNext() -> LOOP { -> navigationCase=(NavigationCaseType) it2.next()@it.hasNext() && it2.hasNext() -> removeOverviewNavigationSectionAdapter(navigationCase,)@it.hasNext() && it2.hasNext() -> IF { -> removeOverviewNavigationSectionAdapter(navigationCase.getFromOutcome(),)@it.hasNext() && it2.hasNext() && navigationCase.getFromOutcome()!=null } -> IF { -> removeOverviewNavigationSectionAdapter(navigationCase.getToViewId(),)@navigationCase.getToViewId()!=null && it.hasNext() && it2.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig.ui/src/org/eclipse/jst/jsf/facesconfig/ui/util/JavaClassUtils.java!JavaClassUtils!isDuplicateMethod][SEQ] =  -> IF { -> return false@method==null||!method.exists() } -> paramTypes=method.getParameterTypes()@!(method==null||!method.exists()) -> methodName=method.getElementName()@!(method==null||!method.exists()) -> iter=methodList.iterator()@!(method==null||!method.exists()) -> LOOP { -> existedMethod=(IMethod) iter.next()@!(method==null||!method.exists()) && iter.hasNext() -> IF { -> return true@!(method==null||!method.exists()) && isSameMethodSignature(methodName,paramTypes,existedMethod,) && iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig/facesconfig/org/eclipse/jst/jsf/facesconfig/internal/translator/DynamicElementTranslator.java!DynamicAttributeTranslator!getMOFValue][SEQ] =  -> IF { -> attributes=(DynamicElement) mofObject.getAttributes()@mofObject instanceof DynamicElement -> it=attributes.iterator()@mofObject instanceof DynamicElement -> LOOP { -> attribute=(DynamicAttribute) it.next()@it.hasNext() && mofObject instanceof DynamicElement -> IF { -> return attribute.getValue()@it.hasNext() && mofObject instanceof DynamicElement && fDOMNames[0].equals(attribute.getName(),) } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.facesconfig/facesconfig/org/eclipse/jst/jsf/facesconfig/internal/translator/DynamicElementTranslator.java!DynamicElementTranslator!getDynamicAttributeTranslators][SEQ] =  -> attributes=element.getAttributes()@ -> it=attributes.iterator()@ -> LOOP { -> attribute=(DynamicAttribute) it.next()@it.hasNext() -> translators[++i]=new DynamicAttributeTranslator(attribute.getName(),FacesConfigPackage.eINSTANCE.getDynamicElement_Attributes(),)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/classpath/JSFLibraryContainerWizardPage.java!JSFLibraryContainerWizardPage!getAllUnselectedJSFLibrariesExceptReferencedLib][SEQ] =  -> allLibs=getAllJSFLibraries()@ -> selLibs=getSelectedJSFLibariesForProject().values()@ -> it=selLibs.iterator()@ -> LOOP { -> aLib=(JSFLibrary) it.next()@it.hasNext() -> i=allLibs.indexOf(aLib,)@it.hasNext() -> IF { -> allLibs.remove(i,)@it.hasNext() && i>=0&&referenceLib==null||aLib!=null&&!aLib.getID().equals(referenceLib.getID(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/classpath/JSFLibraryContainerWizardPage.java!JSFLibraryContainerWizardPage!getSelectedJSFLibariesForProject][SEQ] =  -> IF { -> allLibs=getAllJSFLibraries()@_currentLibs==null -> curLibs=getJSFLibraryEntries(currentEntries,)@_currentLibs==null -> _currentLibs=new HashMap(curLibs.size(),)@_currentLibs==null -> it=curLibs.iterator()@_currentLibs==null -> LOOP { -> lib=(JSFLibrary) it.next()@it.hasNext() && _currentLibs==null -> index=getIndex(allLibs,lib,)@it.hasNext() && _currentLibs==null -> IF { -> _currentLibs.put(lib.getID(),allLibs.get(index,),)@it.hasNext() && _currentLibs==null && index>=0 } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/classpath/JSFLibraryEditControl.java!!run][SEQ] =  -> it=_listeners.iterator()@ -> LOOP { -> listener=(JSFLibraryValidationListener) it.next()@it.hasNext() -> listener.notifyValidation(jSFLibraryValidationEvent,)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/classpath/JSFLibraryEditControl.java!!widgetSelected][SEQ] =  -> IF { -> objs=(StructuredSelection) jars.getSelection()@jars.getSelection() instanceof StructuredSelection -> IF { -> it=objs.iterator()@objs!=null && jars.getSelection() instanceof StructuredSelection -> LOOP { -> obj=it.next()@it.hasNext() && objs!=null && jars.getSelection() instanceof StructuredSelection -> jar=(ArchiveFile) obj@it.hasNext() && objs!=null && jars.getSelection() instanceof StructuredSelection -> workingCopyLibrary.getArchiveFiles().remove(jar,)@it.hasNext() && objs!=null && jars.getSelection() instanceof StructuredSelection } } -> jars.refresh()@jars.getSelection() instanceof StructuredSelection }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/classpath/JSFLibraryEditControl.java!JSFLibraryEditControl!isNameInRegistry][SEQ] =  -> it=c.iterator()@ -> LOOP { -> lib=(JSFLibrary) it.next()@it.hasNext() -> IF { -> return true@it.hasNext() && lib.getName().equals(name,) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/classpath/JSFLibraryEditControl.java!JSFLibraryEditControl!loadVersions][SEQ] =  -> cboVersions.removeAll()@ -> it=JSFVersion.VALUES.iterator()@ -> LOOP { -> ver=(JSFVersion) it.next()@it.hasNext() -> IF { -> cboVersions.add(Messages.JSFLibraryEditControl_ImplVersion_UNKNOWN,)@ } ELSE { -> cboVersions.add(ver.getName(),)@it.hasNext() && !(ver.getName().equals(JSFVersion.UNKNOWN_LITERAL.getName(),)) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/common/MetadataTagImageManager.java!MetadataTagImageManager!getIconImageDescriptor][SEQ] =  -> trait=query.findTrait(model,"paletteInfos",)@ -> IF { -> tags=(PaletteInfos) trait.getValue()@trait!=null -> it=tags.getInfos().iterator()@trait!=null -> LOOP { -> tag=(PaletteInfo) it.next()@it.hasNext() && trait!=null -> IF { -> sourceProvider=(Trait) tag.eContainer().eContainer().getSourceModelProvider()@it.hasNext() && trait!=null && tag.getId().equalsIgnoreCase(tagName,) -> IF { -> icon=getImageDescriptorFromString(sourceProvider,tag.getSmallIcon(),)@it.hasNext() && trait!=null && tag.getId().equalsIgnoreCase(tagName,) } ELSE { -> icon=getImageDescriptorFromString(sourceProvider,tag.getLargeIcon(),)@it.hasNext() && trait!=null && tag.getId().equalsIgnoreCase(tagName,) } } } } ELSE { -> it=model.getChildEntities().iterator()@!(trait!=null) -> LOOP { -> tagAsEntity=(Entity) it.next()@it.hasNext() && !(trait!=null) -> IF { -> IF { -> icon=getImageDescriptorFromTagTraitValueAsString(query,tagAsEntity,TRAIT_ICON_SMALL,ImageDescriptor.getMissingImageDescriptor(),)@it.hasNext() && !(trait!=null) && tagAsEntity.getId().equalsIgnoreCase(tagName,) } ELSE { -> icon=getImageDescriptorFromTagTraitValueAsString(query,tagAsEntity,TRAIT_ICON_LARGE,ImageDescriptor.getMissingImageDescriptor(),)@it.hasNext() && !(trait!=null) && tagAsEntity.getId().equalsIgnoreCase(tagName,) } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/contentassist/JSFContentAssistProcessor.java!JSFContentAssistProcessor!createProposals][SEQ] =  -> ret=new ArrayList()@ -> it=p.getPossibleValues().iterator()@ -> LOOP { -> val=(IPossibleValue) it.next()@it.hasNext() -> IF { -> proposal=new CustomCompletionProposal(val.getValue(),getReplacementOffset(),getReplacementLength(),getCursorPosition(val,),getImage(val,),val.getDisplayValue(),null,getAdditionalInfo(val,tagElement,attr,),XMLRelevanceConstants.R_JSP_ATTRIBUTE_VALUE,true,)@it.hasNext() && val!=null -> ret.add(proposal,)@it.hasNext() && val!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/contentassist/JSFContentAssistProcessor.java!JSFContentAssistProcessor!getCMAttributeDeclaration][SEQ] =  -> attrs=tagElement.getAttributes()@ -> it=attrs.iterator()@ -> LOOP { -> CMAttr=(CMAttributeDeclaration) it.next()@it.hasNext() -> IF { -> return CMAttr@it.hasNext() && CMAttr.getAttrName().equals(attr.getName(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/jsflibraryconfig/JSFLibraryConfigControl.java!!checkStateChanged][SEQ] =  -> changedItem=(JSFLibraryInternalReference) event.getElement()@ -> isChecked4Deploy=event.getChecked()@ -> list=workingCopyModel.getJSFComponentLibraries()@ -> it=list.iterator()@ -> LOOP { -> crtjsflib=(JSFLibraryInternalReference) it.next()@it.hasNext() -> IF { -> crtjsflib.setToBeDeployed(isChecked4Deploy,)@it.hasNext() && crtjsflib.getID().equals(changedItem.getID(),) -> fireChangedEvent(event,)@crtjsflib.getID().equals(changedItem.getID(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/jsflibraryconfig/JSFLibraryConfigControl.java!!run][SEQ] =  -> it=getChangeListeners().iterator()@ -> LOOP { -> (JSFLibraryConfigControlChangeListener) it.next().changed(new JSFLibraryConfigControlChangeEvent(e,),)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/jsflibraryconfig/JSFLibraryConfigControl.java!JSFLibraryConfigControl!initializeControlValues][SEQ] =  -> it=workingCopyModel.getJSFComponentLibraries().iterator()@ -> LOOP { -> savedCompLib=(JSFLibraryInternalReference) it.next()@it.hasNext() -> selected=JSFLibraryRegistryUtil.getInstance().getJSFLibraryReferencebyID(savedCompLib.getID(),)@it.hasNext() -> IF { -> ctvSelCompLib.setChecked(selected,selected.isCheckedToBeDeployed(),)@it.hasNext() && selected!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/jsflibraryconfig/JSFLibraryConfigControl.java!JSFLibraryConfigControl!resetComponentLibSelection][SEQ] =  -> IF { -> selected=new ArrayList(item.size(),)@item!=null&&!item.isEmpty() -> sel=item.iterator()@item!=null&&!item.isEmpty() -> LOOP { -> jsfLibDctr=(JSFLibraryInternalReference) sel.next()@sel.hasNext() && item!=null&&!item.isEmpty() -> selected.add(jsfLibDctr,)@sel.hasNext() && item!=null&&!item.isEmpty() -> list=workingCopyModel.getJSFComponentLibraries()@ -> it=list.iterator()@ -> LOOP { -> crtjsfLibDctr=(JSFLibraryInternalReference) it.next()@it.hasNext() && sel.hasNext() && item!=null&&!item.isEmpty() -> IF { -> crtjsfLibDctr.setToBeDeployed(state,)@it.hasNext() && sel.hasNext() && item!=null&&!item.isEmpty() && crtjsfLibDctr.getID().equals(jsfLibDctr.getID(),) -> crtjsfLibDctr.setSelected(state,)@it.hasNext() && sel.hasNext() && item!=null&&!item.isEmpty() && crtjsfLibDctr.getID().equals(jsfLibDctr.getID(),) } } } -> destViewer.refresh()@ -> it=selected.iterator()@item!=null&&!item.isEmpty() -> LOOP { -> destViewer.setChecked(it.next(),state,)@it.hasNext() && item!=null&&!item.isEmpty() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/jsflibraryconfig/JSFLibraryConfigControl.java!JSFLibraryConfigControl!resetCompontLibSelectionAll][SEQ] =  -> list=workingCopyModel.getJSFComponentLibraries()@ -> it=list.iterator()@ -> LOOP { -> jsfLibDctr=(JSFLibraryInternalReference) it.next()@it.hasNext() -> jsfLibDctr.setSelected(state,)@it.hasNext() -> jsfLibDctr.setToBeDeployed(state,)@it.hasNext() } -> destViewer.refresh()@ -> destViewer.setAllChecked(state,)@ -> btnAddAll.setEnabled(!state,)@ -> btnRemoveAll.setEnabled(state,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.jsf.ui/src/org/eclipse/jst/jsf/ui/internal/project/facet/JSFFacetInstallPage.java!JSFFacetInstallPage!setWizardContext][SEQ] =  -> it=context.getSelectedProjectFacets().iterator()@ -> LOOP { -> pfv=(IProjectFacetVersion) it.next()@it.hasNext() } -> IF { -> TRY { -> webAppDataModel=(IDataModel) context.getConfig(webFacetVersion,IFacetedProject.Action.Type.INSTALL,context.getProjectName(),)@webFacetVersion!=null -> IF { -> webAppDataModel.addListener(this,)@webFacetVersion!=null && webAppDataModel!=null } } CATCH { } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/commands/jsfhtml/AddJSFCoreChildCommand.java!AddJSFCoreChildCommand!doExecute][SEQ] =  -> prefix=JSPUtil.getOrCreatePrefix(this.getModel(),ITLDConstants.URI_JSF_CORE,"f",)@ -> child=_parent.getOwnerDocument().createElement(tag,)@ -> child.setPrefix(prefix,)@ -> IF { -> iter=_attrMap.keySet().iterator()@_attrMap!=null -> LOOP { -> key=(String) iter.next()@_attrMap!=null && iter.hasNext() -> value=(String) _attrMap.get(key,)@_attrMap!=null && iter.hasNext() -> child.setAttribute(key,value,)@_attrMap!=null && iter.hasNext() } } -> IF { -> child.setAttribute(_attrName,_attrValue,)@_attrName!=null } -> _parent.appendChild(child,)@ -> formatNode(child,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/converter/DefaultTransformer.java!DefaultTransformer!transform][SEQ] =  -> IF { -> IF { -> itOperations=transformOperations.iterator()@transformOperations.size()>0 -> LOOP { -> operation=(ITransformOperation) itOperations.next()@transformOperations.size()>0 && srcElement!=null && itOperations.hasNext() -> curElement=operation.transform(srcElement,curElement,)@transformOperations.size()>0 && srcElement!=null && itOperations.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/converter/operations/jsf/DataTableOperation.java!DataTableOperation!buildBody][SEQ] =  -> tbodyElement=appendChildElement("tbody",tableElement,)@ -> trElement=appendChildElement("tr",tbodyElement,)@ -> rowClassesAttribute=srcElement.getAttribute("rowClasses",)@ -> IF { -> tokenizer=new StringTokenizer(rowClassesAttribute,", ",)@rowClassesAttribute!=null&&rowClassesAttribute.length()>0 -> IF { -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CreateAttributeOperation, new String[],)@tokenizer.hasMoreTokens() && rowClassesAttribute!=null&&rowClassesAttribute.length()>0 -> operation.transform(srcElement,trElement,)@tokenizer.hasMoreTokens() && rowClassesAttribute!=null&&rowClassesAttribute.length()>0 } } -> columnElementList=getChildElements(srcElement,"column",)@ -> itColumnElementList=columnElementList.iterator()@ -> LOOP { -> columnElement=(Element) itColumnElementList.next()@itColumnElementList.hasNext() -> tagConverterContext.addChild(columnElement,new ConvertPosition(trElement,++index,),)@itColumnElementList.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/converter/operations/jsf/DataTableOperation.java!DataTableOperation!buildHeaderOrFooter][SEQ] =  -> facetName=(isHeader)?"header":"footer"@ -> headerOrFooterTagName=(isHeader)?"thead":"tfoot"@ -> thOrTdTagName=(isHeader)?"th":"td"@ -> headerClassOrFooterClassAttrName=(isHeader)?"headerClass":"footerClass"@ -> facetElement=getChildFacetByName(srcElement,facetName,)@ -> columnElementList=getChildElements(srcElement,"column",)@ -> itColumnElementList=columnElementList.iterator()@ -> LOOP { -> columnElement=(Element) itColumnElementList.next()@itColumnElementList.hasNext() -> columnFacet=getChildFacetByName(columnElement,facetName,)@itColumnElementList.hasNext() } -> headerOrFooterElement=appendChildElement(headerOrFooterTagName,tableElement,)@!(facetElement==null&&!hasColumnFacet) -> IF { -> trElement=appendChildElement("tr",headerOrFooterElement,)@!(facetElement==null&&!hasColumnFacet) && facetElement!=null -> thOrTdElement=appendChildElement(thOrTdTagName,trElement,)@!(facetElement==null&&!hasColumnFacet) && facetElement!=null -> headerClassOrFooterClassAttribute=srcElement.getAttribute(headerClassOrFooterClassAttrName,)@!(facetElement==null&&!hasColumnFacet) && facetElement!=null -> IF { -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CreateAttributeOperation, new String[],)@!(facetElement==null&&!hasColumnFacet) && facetElement!=null && headerClassOrFooterClassAttribute!=null&&headerClassOrFooterClassAttribute.length()>0 -> operation.transform(srcElement,thOrTdElement,)@!(facetElement==null&&!hasColumnFacet) && facetElement!=null && headerClassOrFooterClassAttribute!=null&&headerClassOrFooterClassAttribute.length()>0 } -> IF { -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CreateAttributeOperation, new String[],)@!(facetElement==null&&!hasColumnFacet) && facetElement!=null && columnElementList.size()>0 -> operation.transform(srcElement,thOrTdElement,)@!(facetElement==null&&!hasColumnFacet) && facetElement!=null && columnElementList.size()>0 } -> tagConverterContext.addChild(facetElement,new ConvertPosition(thOrTdElement,0,),)@!(facetElement==null&&!hasColumnFacet) && facetElement!=null } -> IF { -> trElement=appendChildElement("tr",headerOrFooterElement,)@!(facetElement==null&&!hasColumnFacet) -> itColumnElementList=columnElementList.iterator()@!(facetElement==null&&!hasColumnFacet) -> LOOP { -> columnElement=(Element) itColumnElementList.next()@!(facetElement==null&&!hasColumnFacet) && itColumnElementList.hasNext() -> columnFacet=getChildFacetByName(columnElement,facetName,)@!(facetElement==null&&!hasColumnFacet) && itColumnElementList.hasNext() -> thOrTdElement=appendChildElement(thOrTdTagName,trElement,)@!(facetElement==null&&!hasColumnFacet) && itColumnElementList.hasNext() -> headerClassOrFooterClassAttribute=srcElement.getAttribute(headerClassOrFooterClassAttrName,)@!(facetElement==null&&!hasColumnFacet) && itColumnElementList.hasNext() -> IF { -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CreateAttributeOperation, new String[],)@!(facetElement==null&&!hasColumnFacet) && headerClassOrFooterClassAttribute!=null&&headerClassOrFooterClassAttribute.length()>0 && itColumnElementList.hasNext() -> operation.transform(srcElement,thOrTdElement,)@!(facetElement==null&&!hasColumnFacet) && headerClassOrFooterClassAttribute!=null&&headerClassOrFooterClassAttribute.length()>0 && itColumnElementList.hasNext() } -> IF { -> tagConverterContext.addChild(columnFacet,new ConvertPosition(thOrTdElement,0,),)@!(facetElement==null&&!hasColumnFacet) && columnFacet!=null && itColumnElementList.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/converter/operations/jsf/DataTableOperation.java!DataTableOperation!getChildFacetByName][SEQ] =  -> facets=getChildElements(srcElement,"facet",)@ -> itFacets=facets.iterator()@ -> LOOP { -> facet=(Element) itFacets.next()@itFacets.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/converter/operations/jsf/PanelGridOperation.java!PanelGridOperation!getChildFacetByName][SEQ] =  -> facets=getChildElements(srcElement,"facet",)@ -> itFacets=facets.iterator()@ -> LOOP { -> facet=(Element) itFacets.next()@itFacets.hasNext() -> facetAttrName=facet.getAttribute("name",)@itFacets.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/converter/operations/jsf/PanelGridOperation.java!PanelGridOperation!transform][SEQ] =  -> tableElement=createElement("table",)@ -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CopyAllAttributesOperation, new String[],)@ -> operation.transform(srcElement,tableElement,)@ -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_RenameAttributeOperation, new String[],)@ -> operation.transform(srcElement,tableElement,)@ -> TRY { -> columns=Integer.parseInt(srcElement.getAttribute("columns",),)@ } CATCH { -> columns=1@ } -> headerFacetElement=getChildFacetByName(srcElement,"header",)@ -> IF { -> tHeadElement=appendChildElement("thead",tableElement,)@headerFacetElement!=null -> trElement=appendChildElement("tr",tHeadElement,)@headerFacetElement!=null -> thElement=appendChildElement("th",trElement,)@headerFacetElement!=null -> headerClass=srcElement.getAttribute("headerClass",)@headerFacetElement!=null -> IF { -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CreateAttributeOperation, new String[],)@headerClass!=null&&headerClass.length()>0 && headerFacetElement!=null -> operation.transform(srcElement,thElement,)@headerClass!=null&&headerClass.length()>0 && headerFacetElement!=null } -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CreateAttributeOperation, new String[],)@headerFacetElement!=null -> operation.transform(srcElement,thElement,)@headerFacetElement!=null -> tagConverterContext.addChild(headerFacetElement,new ConvertPosition(thElement,0,),)@headerFacetElement!=null } -> footerFacetElement=getChildFacetByName(srcElement,"footer",)@ -> IF { -> tFootElement=appendChildElement("tfoot",tableElement,)@footerFacetElement!=null -> trElement=appendChildElement("tr",tFootElement,)@footerFacetElement!=null -> tdElement=appendChildElement("td",trElement,)@footerFacetElement!=null -> footerClass=srcElement.getAttribute("footerClass",)@footerFacetElement!=null -> IF { -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CreateAttributeOperation, new String[],)@footerFacetElement!=null && footerClass!=null&&footerClass.length()>0 -> operation.transform(srcElement,tdElement,)@footerFacetElement!=null && footerClass!=null&&footerClass.length()>0 } -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CreateAttributeOperation, new String[],)@footerFacetElement!=null -> operation.transform(srcElement,tdElement,)@footerFacetElement!=null -> tagConverterContext.addChild(footerFacetElement,new ConvertPosition(tdElement,0,),)@footerFacetElement!=null } -> rowClasses=new ArrayList()@ -> rowClassesAttribute=srcElement.getAttribute("rowClasses",)@ -> IF { -> tokenizer=new StringTokenizer(rowClassesAttribute,", ",)@rowClassesAttribute!=null&&rowClassesAttribute.length()>0 -> LOOP { -> rowClasses.add(tokenizer.nextToken(),)@tokenizer.hasMoreTokens() && rowClassesAttribute!=null&&rowClassesAttribute.length()>0 } } -> columnClasses=new ArrayList()@ -> columnClassAttribute=srcElement.getAttribute("columnClasses",)@ -> IF { -> tokenizer=new StringTokenizer(columnClassAttribute,", ",)@columnClassAttribute!=null -> LOOP { -> columnClasses.add(tokenizer.nextToken(),)@columnClassAttribute!=null && tokenizer.hasMoreTokens() } } -> tBodyElement=appendChildElement("tbody",tableElement,)@ -> childElements=getChildElementsSkipFacets(srcElement,)@ -> itChildElements=childElements.iterator()@ -> LOOP { -> IF { -> trElement=appendChildElement("tr",tBodyElement,)@columnIndex==0 && itChildElements.hasNext() -> IF { -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CreateAttributeOperation, new String[],)@columnIndex==0 && !rowClasses.isEmpty() && itChildElements.hasNext() -> operation.transform(srcElement,trElement,)@columnIndex==0 && !rowClasses.isEmpty() && itChildElements.hasNext() -> nextRow=nextRow+1%rowClasses.size()@columnIndex==0 && !rowClasses.isEmpty() && itChildElements.hasNext() } } -> tdElement=appendChildElement("td",trElement,)@itChildElements.hasNext() -> IF { -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CreateAttributeOperation, new String[],)@columnIndex<columnClasses.size() && itChildElements.hasNext() -> operation.transform(srcElement,tdElement,)@columnIndex<columnClasses.size() && itChildElements.hasNext() } -> tagConverterContext.addChild((Element) itChildElements.next(),new ConvertPosition(tdElement,0,),)@itChildElements.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/converter/operations/jsf/TableBasedOperation.java!TableBasedOperation!transform][SEQ] =  -> tableElement=createElement("table",)@ -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CopyAttributeOperation, new String[],)@ -> operation.transform(srcElement,tableElement,)@ -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_RenameAttributeOperation, new String[],)@ -> operation.transform(srcElement,tableElement,)@ -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CopyAttributeOperation, new String[],)@ -> operation.transform(srcElement,tableElement,)@ -> operation=TransformOperationFactory.getInstance().getTransformOperation(TransformOperationFactory.OP_CopyAttributeOperation, new String[],)@ -> operation.transform(srcElement,tableElement,)@ -> IF { -> itemContainer=appendChildElement("tr",tableElement,)@ } -> isDisabled=Boolean.TRUE.toString().equalsIgnoreCase(srcElement.getAttribute("disabled",),)@ -> isReadOnly=Boolean.TRUE.toString().equalsIgnoreCase(srcElement.getAttribute("readonly",),)@ -> selectItemList=getChildElements(srcElement,"selectItem",)@ -> IF { -> itSelectItemList=selectItemList.iterator()@selectItemList.size()>0 -> LOOP { -> selectItem=(Element) itSelectItemList.next()@selectItemList.size()>0 && itSelectItemList.hasNext() -> labelElement=createElement("label",)@selectItemList.size()>0 && itSelectItemList.hasNext() -> inputElement=appendChildElement("input",labelElement,)@selectItemList.size()>0 && itSelectItemList.hasNext() -> inputElement.setAttribute("type",getInputType(),)@ -> IF { -> inputElement.setAttribute("disabled","disabled",)@ } -> IF { -> inputElement.setAttribute("readonly","readonly",)@ } -> selectItemID=selectItem.getAttribute("id",)@selectItemList.size()>0 && itSelectItemList.hasNext() -> IF { -> inputElement.setAttribute("id",selectItemID,)@selectItemID!=null&&selectItemID.length()>0 && selectItemList.size()>0 && itSelectItemList.hasNext() } -> selectItemValue=selectItem.getAttribute("value",)@selectItemList.size()>0 && itSelectItemList.hasNext() -> IF { -> inputElement.setAttribute("value",selectItemValue,)@selectItemValue!=null&&selectItemValue.length()>0 && selectItemList.size()>0 && itSelectItemList.hasNext() } -> label=getSelectItemLabel(selectItem,)@selectItemList.size()>0 && itSelectItemList.hasNext() -> appendChildText(label,labelElement,)@selectItemList.size()>0 && itSelectItemList.hasNext() -> IF { -> tdElement=appendChildElement("td",itemContainer,)@selectItemList.size()>0 && itSelectItemList.hasNext() -> tdElement.appendChild(labelElement,)@selectItemList.size()>0 && itSelectItemList.hasNext() } ELSE { -> trElement=appendChildElement("tr",itemContainer,)@selectItemList.size()>0 && itSelectItemList.hasNext() -> tdElement=appendChildElement("td",trElement,)@selectItemList.size()>0 && itSelectItemList.hasNext() -> tdElement.appendChild(labelElement,)@selectItemList.size()>0 && itSelectItemList.hasNext() } } } ELSE { -> spanElement=createElement("span",)@ -> appendAttribute(spanElement,"style",JSFUIPluginResourcesUtil.getInstance().getString("TableBasedOperation.NoSelectItem.style",),)@ -> selectItemsList=getChildElements(srcElement,"selectItems",)@!(selectItemList.size()>0) -> IF { -> appendChildText(JSFUIPluginResourcesUtil.getInstance().getString("TableBasedOperation.OnlySelectItems.text",),spanElement,)@ } ELSE { -> appendChildText(JSFUIPluginResourcesUtil.getInstance().getString("TableBasedOperation.NoSelectItem.text",),spanElement,)@ } -> IF { -> tdElement=appendChildElement("td",itemContainer,)@!(selectItemList.size()>0) -> tdElement.appendChild(spanElement,)@!(selectItemList.size()>0) } ELSE { -> trElement=appendChildElement("tr",itemContainer,)@!(selectItemList.size()>0) -> tdElement=appendChildElement("td",trElement,)@!(selectItemList.size()>0) -> tdElement.appendChild(spanElement,)@!(selectItemList.size()>0) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/elementedit/jsfhtml/ColumnElementEdit.java!MyDropLocationStrategy!calculateDesignPosition][SEQ] =  -> target=validator.getEditableContainer(new Target(target,),)@ -> IF { -> tagId=(ElementEditPart) target.getTagIdentifier()@target instanceof ElementEditPart -> IF { -> it=target.getChildren().iterator()@target instanceof ElementEditPart && IJSFConstants.TAG_IDENTIFIER_DATA_TABLE.isSameTagType(tagId,) -> LOOP { -> nodeEditPart=(NodeEditPart) it.next()@it.hasNext() && target instanceof ElementEditPart && IJSFConstants.TAG_IDENTIFIER_DATA_TABLE.isSameTagType(tagId,) -> tagId2=nodeEditPart.getTagIdentifier()@it.hasNext() && target instanceof ElementEditPart && IJSFConstants.TAG_IDENTIFIER_DATA_TABLE.isSameTagType(tagId,) -> IF { -> columnBounds=ColumnHelper.getAdjustedColumnBoundingRectangle(nodeEditPart,)@it.hasNext() && IJSFConstants.TAG_IDENTIFIER_COLUMN.isSameTagType(tagId2,) && target instanceof ElementEditPart && IJSFConstants.TAG_IDENTIFIER_DATA_TABLE.isSameTagType(tagId,) } } } -> tagId=(ElementEditPart) target.getTagIdentifier()@target instanceof ElementEditPart -> IF { -> columnBounds=ColumnHelper.getAdjustedColumnBoundingRectangle((GraphicalEditPart) target,)@IJSFConstants.TAG_IDENTIFIER_COLUMN.isSameTagType(tagId,) && target instanceof ElementEditPart -> IF { -> position=DesignPosition.createPositionBeforePart(target,)@CaretPositionResolver.toXMiddle(columnBounds,p,)<0 && IJSFConstants.TAG_IDENTIFIER_COLUMN.isSameTagType(tagId,) && target instanceof ElementEditPart } ELSE { -> position=DesignPosition.createPositionAfterPart(target,)@!(CaretPositionResolver.toXMiddle(columnBounds,p,)<0) && IJSFConstants.TAG_IDENTIFIER_COLUMN.isSameTagType(tagId,) && target instanceof ElementEditPart } -> IF { -> return position@validator.isValidPosition(position,) && IJSFConstants.TAG_IDENTIFIER_COLUMN.isSameTagType(tagId,) && target instanceof ElementEditPart } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/elementedit/jsfhtml/DataTableElementEdit.java!DataTableResizePolicy!getRetargetSelectionEditPart][SEQ] =  -> IF { -> editPart=(GraphicalEditPart) getHost()@!(hitTestColumnSelection(mouseLocation,)) -> children=editPart.getChildren()@!(hitTestColumnSelection(mouseLocation,)) -> it=children.iterator()@!(hitTestColumnSelection(mouseLocation,)) -> LOOP { -> child=(GraphicalEditPart) it.next()@it.hasNext() && !(hitTestColumnSelection(mouseLocation,)) -> IF { -> childNode=(NodeEditPart) child.getDOMNode()@it.hasNext() && child instanceof NodeEditPart && !(hitTestColumnSelection(mouseLocation,)) -> IF { -> relativeMousePointer=mouseLocation.getCopy()@!(JSFDOMUtil.isHColumn(childNode,)) && hitTestColumnSelection(mouseLocation,) && !(child instanceof NodeEditPart) && !(it.hasNext()) -> hostFigure=child.getFigure()@it.hasNext() && hitTestColumnSelection(mouseLocation,) && child instanceof NodeEditPart && JSFDOMUtil.isHColumn(childNode,) -> hostFigure.translateToRelative(relativeMousePointer,)@it.hasNext() && hitTestColumnSelection(mouseLocation,) && child instanceof NodeEditPart && JSFDOMUtil.isHColumn(childNode,) -> hostBounds=hostFigure.getBounds()@it.hasNext() && hitTestColumnSelection(mouseLocation,) && child instanceof NodeEditPart && JSFDOMUtil.isHColumn(childNode,) -> IF { -> return child@it.hasNext() && hitTestColumnSelection(mouseLocation,) && child instanceof NodeEditPart && JSFDOMUtil.isHColumn(childNode,) && relativeMousePointer.x>=hostBounds.x&&relativeMousePointer.x<hostBounds.x+hostBounds.width } } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/sections/JSFHtmlActionListenerSection.java!!widgetSelected][SEQ] =  -> selection=(IStructuredSelection) _listenersViewer.getSelection()@ -> IF { -> i=selection.iterator()@selection!=null -> LOOP { -> node=(IDOMElement) i.next()@selection!=null && i.hasNext() -> c=new RemoveSubNodeCommand(SectionResources.getString("JSFHtmlCommandButtonSection.CommandLabel.RemoveSubTag",),_element,node,)@selection!=null && i.hasNext() -> c.execute()@selection!=null && i.hasNext() } -> _listenersViewer.refresh()@selection!=null }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/sections/JSFHtmlDataTableColumnsSection.java!!widgetSelected][SEQ] =  -> selection=(IStructuredSelection) _columnsViewer.getSelection()@ -> IF { -> i=selection.iterator()@selection!=null -> LOOP { -> node=(IDOMElement) i.next()@selection!=null && i.hasNext() -> c=new RemoveSubNodeCommand(SectionResources.getString("JSFHtmlDataTableSection.CommandLabel.RemoveSubTag",),_element,node,)@selection!=null && i.hasNext() -> c.execute()@selection!=null && i.hasNext() } -> _columnsViewer.refresh()@selection!=null }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/sections/JSFHtmlInputOthersSection.java!!widgetSelected][SEQ] =  -> selection=(IStructuredSelection) _validatorsViewer.getSelection()@ -> IF { -> i=selection.iterator()@selection!=null -> LOOP { -> node=(IDOMElement) i.next()@selection!=null && i.hasNext() -> c=new RemoveSubNodeCommand(SectionResources.getString("JSFHtmlInputTextSection.CommandLabel.RemoveSubTag",),_element,node,)@selection!=null && i.hasNext() -> c.execute()@selection!=null && i.hasNext() } -> _validatorsViewer.refresh()@selection!=null }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/sections/JSFHtmlInputOthersSection.java!!widgetSelected][SEQ] =  -> selection=(IStructuredSelection) _listenersViewer.getSelection()@ -> IF { -> i=selection.iterator()@selection!=null -> LOOP { -> node=(IDOMElement) i.next()@selection!=null && i.hasNext() -> c=new RemoveSubNodeCommand(SectionResources.getString("JSFHtmlInputTextSection.CommandLabel.RemoveSubTag",),_element,node,)@selection!=null && i.hasNext() -> c.execute()@selection!=null && i.hasNext() } -> _listenersViewer.refresh()@selection!=null }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/sections/JSFHtmlInputOthersSection.java!!widgetSelected][SEQ] =  -> selection=(IStructuredSelection) _convertorsViewer.getSelection()@ -> IF { -> i=selection.iterator()@selection!=null -> LOOP { -> node=(IDOMElement) i.next()@selection!=null && i.hasNext() -> c=new RemoveSubNodeCommand(SectionResources.getString("JSFHtmlInputTextSection.CommandLabel.RemoveSubTag",),_element,node,)@selection!=null && i.hasNext() -> c.execute()@selection!=null && i.hasNext() } -> _convertorsViewer.refresh()@selection!=null }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/sections/JSFHtmlOutputFormatParamsSection.java!!widgetSelected][SEQ] =  -> selection=(IStructuredSelection) _paramViewer.getSelection()@ -> IF { -> i=selection.iterator()@selection!=null -> LOOP { -> node=(IDOMElement) i.next()@selection!=null && i.hasNext() -> c=new RemoveSubNodeCommand(SectionResources.getString("JSFHtmlOutputFormatSection.CommandLabel.RemoveSubTag",),_element,node,)@selection!=null && i.hasNext() -> c.execute()@selection!=null && i.hasNext() } -> _paramViewer.refresh()@selection!=null }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/sections/JSFHtmlOutputTextConverterSection.java!!widgetSelected][SEQ] =  -> selection=(IStructuredSelection) _convertViewer.getSelection()@ -> IF { -> i=selection.iterator()@selection!=null -> LOOP { -> node=(IDOMElement) i.next()@selection!=null && i.hasNext() -> c=new RemoveSubNodeCommand(SectionResources.getString("JSFHtmlOutputTextSection.CommandLabel.RemoveSubTag",),_element,node,)@selection!=null && i.hasNext() -> c.execute()@selection!=null && i.hasNext() } -> _convertViewer.refresh()@selection!=null }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner.jsf.ui/src/org/eclipse/jst/pagedesigner/jsf/ui/sections/JSFHtmlSelectChoicesSection.java!!widgetSelected][SEQ] =  -> selection=(IStructuredSelection) _choiceViewer.getSelection()@ -> IF { -> i=selection.iterator()@selection!=null -> LOOP { -> node=(IDOMElement) i.next()@selection!=null && i.hasNext() -> c=new RemoveSubNodeCommand(SectionResources.getString("JSFHtmlSelectManyCheckboxSection.CommandLabel.RemoveSubTag",),_element,node,)@selection!=null && i.hasNext() -> c.execute()@selection!=null && i.hasNext() } -> _choiceViewer.refresh()@selection!=null }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/actions/range/HTagsInsertGroupAction.java!HTagsInsertGroupAction!setViewer][SEQ] =  -> IF { -> values=_actions.values()@_actions!=null&&_actions.size()>0 -> iterator=values.iterator()@_actions!=null&&_actions.size()>0 -> LOOP { -> action=(DesignerToolBarAction) iterator.next()@_actions!=null&&_actions.size()>0 && iterator.hasNext() -> action.setViewer(viewer,)@_actions!=null&&_actions.size()>0 && iterator.hasNext() } } -> super.setViewer(viewer,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/actions/range/HTagsInsertGroupAction.java!HTagsInsertGroupAction!updateStatus][SEQ] =  -> IF { -> values=_actions.values()@_actions!=null&&_actions.size()>0 -> iterator=values.iterator()@_actions!=null&&_actions.size()>0 -> LOOP { -> action=(DesignerToolBarAction) iterator.next()@_actions!=null&&_actions.size()>0 && iterator.hasNext() -> action.updateStatus()@_actions!=null&&_actions.size()>0 && iterator.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/actions/single/SingleElementActionGroup.java!SingleElementActionGroup!addPositionRelativeMenu][SEQ] =  -> subMenuItem=menu.find(PageDesignerActionConstants.SELECT_SUBMENU_ID,)@ -> IF { -> subMenu=(IMenuManager) subMenuItem@subMenuItem instanceof IMenuManager -> selectParentAction=SelectParentAction.create(ele,part,)@subMenuItem instanceof IMenuManager -> subMenu.add(selectParentAction,)@subMenuItem instanceof IMenuManager -> children=new ArrayList()@ -> it=part.getChildren().iterator()@ -> LOOP { -> childPart=(EditPart) it.next()@it.hasNext() -> IF { -> children.add(SelectNodeAction.create((Element) (ElementEditPart) childPart.getModel().getNodeName(),childPart,),)@it.hasNext() && childPart instanceof ElementEditPart&&(ElementEditPart) childPart.isSelectable()&&(ElementEditPart) childPart.getModel() instanceof Element } } -> IF { -> selectChildMenu=new MenuManager(Messages.SingleElementActionGroup_ChildrenActionText,)@children.size()>0 && subMenuItem instanceof IMenuManager -> subMenu.add(selectChildMenu,)@subMenuItem instanceof IMenuManager -> it=children.iterator()@children.size()>0 -> LOOP { -> selectChildMenu.add((Action) it.next(),)@it.hasNext() && children.size()>0 && subMenuItem instanceof IMenuManager } } ELSE { -> childrenAction=new Action(Messages.SingleElementActionGroup_ChildrenActionText,)@subMenuItem instanceof IMenuManager -> childrenAction.setEnabled(false,)@ -> subMenu.add(childrenAction,)@subMenuItem instanceof IMenuManager } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/commands/html/TableResizeColumnCommand.java!TableResizeColumnCommand!doExecute][SEQ] =  -> list=_tableUtil.getColumnCells(index,)@ -> itr=list.iterator()@ -> LOOP { -> ele=(Element) itr.next()@itr.hasNext() } -> cellFigure=getFigureInfo(cell,)@ -> oldColumnWidth=cellFigure.getBounds().width@ -> cellPadding=cellFigure.getInsets().getWidth()@ -> map=new HashMap()@ -> IF { -> map.put(ICSSPropertyID.ATTR_WIDTH,newWidth+"px",)@newWidth>0 -> DOMStyleUtil.insertStyle(cell,map,)@newWidth>0 }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/commands/single/AddSubNodeCommand.java!AddSubNodeCommand!doExecute][SEQ] =  } ELSE { -> prefix=JSPUtil.getOrCreatePrefix(_parent.getModel(),_url,null,)@!(ITLDConstants.URI_HTML.equals(_url,)) -> _child=(IDOMElement) _parent.getOwnerDocument().createElement(nodeName,)@ -> iterator=_attributes.keySet().iterator()@!(_child==null) -> LOOP { -> key=(String) iterator.next()@iterator.hasNext() && !(_child==null) -> value=(String) _attributes.get(key,)@iterator.hasNext() && !(_child==null) -> _child.setAttribute(key,value,)@iterator.hasNext() && !(_child==null) } -> _parent.appendChild(_child,)@!(_child==null)
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/commands/single/ChangeAttributeCommand.java!ChangeAttributeCommand!doExecute][SEQ] =  } ELSE { -> IF { -> iterator=_attributes.keySet().iterator()@_attributes!=null -> LOOP { -> name=(String) iterator.next()@iterator.hasNext() && _attributes!=null -> value=(String) _attributes.get(name,)@iterator.hasNext() && _attributes!=null -> updateElement(name,value,)@iterator.hasNext() && _attributes!=null } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/commands/single/ChangeTagCommand.java!ChangeTagCommand!doExecute][SEQ] =  } ELSE { } ELSE { } ELSE { -> tag=JSPUtil.getOrCreatePrefix(getModel(),_uri,null,)+_localTag@!(_totalTag!=null) && !(ITLDConstants.URI_JSP.equals(_uri,)) && !(ITLDConstants.URI_HTML.equals(_uri,)) -> replacement=(IDOMElement) _element.getOwnerDocument().createElement(tag,)@ -> attrs=_element.getAttributes()@ -> LOOP { -> a=(Attr) attrs.item(i,)@i<n -> replacement.setAttribute(a.getName(),a.getValue(),)@i<n } -> IF { -> iter=_attributes.keySet().iterator()@_attributes!=null -> LOOP { -> name=(String) iter.next()@_attributes!=null && iter.hasNext() -> value=(String) _attributes.get(name,)@_attributes!=null && iter.hasNext() -> replacement.setAttribute(name,value,)@_attributes!=null && iter.hasNext() } } -> IF { -> nl=_element.getChildNodes()@ -> list=new ArrayList()@ -> LOOP { -> list.add(nl.item(i,),)@i<n } -> LOOP { -> replacement.appendChild((Node) list.get(i,),)@i<n } } -> _element.getParentNode().replaceChild(replacement,_element,)@ -> setReplacedElement(replacement,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/css2/layout/FlowPage.java!FlowPage!postValidate][SEQ] =  -> it=getChildren().iterator()@ -> LOOP { -> (FlowFigure) it.next().postValidate()@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dom/DOMStyleUtil.java!DOMStyleUtil!insertStyle][SEQ] =  -> IF { -> styledecl=(ElementCSSInlineStyle) original.getStyle()@original instanceof ElementCSSInlineStyle -> IF { -> IF { -> original.setAttribute(styleAttrName,"",)@original instanceof ElementCSSInlineStyle && original.getAttribute(styleAttrName,)==null && styledecl==null -> styledecl=(ElementCSSInlineStyle) original.getStyle()@original instanceof ElementCSSInlineStyle && original.getAttribute(styleAttrName,)==null && styledecl==null } } -> IF { -> iter=map.keySet().iterator()@!(styledecl!=null) && !(original instanceof ElementCSSInlineStyle) -> LOOP { -> key=(String) iter.next()@original instanceof ElementCSSInlineStyle && iter.hasNext() && styledecl!=null -> value=(String) map.get(key,)@original instanceof ElementCSSInlineStyle && iter.hasNext() && styledecl!=null -> IF { -> styledecl.removeProperty(key,)@original instanceof ElementCSSInlineStyle && value==null && iter.hasNext() && styledecl!=null } ELSE { -> styledecl.setProperty(key,value,null,)@original instanceof ElementCSSInlineStyle && !(value==null) && iter.hasNext() && styledecl!=null } } -> return @original instanceof ElementCSSInlineStyle && styledecl!=null } } -> oldstyle=original.getAttribute(styleAttrName,)@!(original instanceof ElementCSSInlineStyle) -> tokenizer=new StringTokenizer(oldstyle,";",)@!(original instanceof ElementCSSInlineStyle) -> buffer=new StringBuffer()@!(original instanceof ElementCSSInlineStyle) -> LOOP { -> token=tokenizer.nextToken().trim()@tokenizer.hasMoreTokens() && !(original instanceof ElementCSSInlineStyle) -> index=token.indexOf(':',)@tokenizer.hasMoreTokens() && !(original instanceof ElementCSSInlineStyle) -> IF { -> buffer.append(token,).append("; ",)@tokenizer.hasMoreTokens() && !(original instanceof ElementCSSInlineStyle) && index==-1 } -> propertyName=token.substring(0,index,).trim()@tokenizer.hasMoreTokens() && !(original instanceof ElementCSSInlineStyle) -> IF { -> propertyValue=(String) map.remove(propertyName,)@tokenizer.hasMoreTokens() && !(original instanceof ElementCSSInlineStyle) && map.containsKey(propertyName,) } ELSE { -> buffer.append(propertyName,).append(": ",).append(propertyValue,).append("; ",)@!(propertyValue==null) && tokenizer.hasMoreTokens() && !(original instanceof ElementCSSInlineStyle) && map.containsKey(propertyName,) } ELSE { -> buffer.append(token,).append("; ",)@!(map.containsKey(propertyName,)) && tokenizer.hasMoreTokens() && !(original instanceof ElementCSSInlineStyle) } } -> iter=map.keySet().iterator()@!(original instanceof ElementCSSInlineStyle) -> LOOP { -> key=(String) iter.next()@iter.hasNext() && !(original instanceof ElementCSSInlineStyle) -> value=(String) map.get(key,)@iter.hasNext() && !(original instanceof ElementCSSInlineStyle) -> IF { -> buffer.append(key,).append(": ",).append(value,).append("; ",)@value!=null && iter.hasNext() && !(original instanceof ElementCSSInlineStyle) } } -> original.setAttribute(styleAttrName,buffer.toString(),)@!(original instanceof ElementCSSInlineStyle)
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dom/html/TableUtil.java!TableUtil!countMaxValue][SEQ] =  -> itr=list.iterator()@ -> LOOP { -> ele=(Element) itr.next()@itr.hasNext() -> value=DOMUtil.getIntAttributeIgnoreCase(ele,attr,1,)@itr.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dom/html/TableUtil.java!TableUtil!fillSectionTrCells][SEQ] =  -> IF { -> LOOP { -> insertPoints=new ArrayList()@ -> LOOP { -> LOOP { -> cell=(Element) list.get(column,)@lists!=null && column<list.size() && i<size && j<i -> rowSpan=DOMUtil.getIntAttributeIgnoreCase(cell,IHTMLConstants.ATTR_ROWSPAN,1,)@lists!=null && column<list.size() && i<size && j<i -> IF { -> colSpan=DOMUtil.getIntAttributeIgnoreCase(cell,IHTMLConstants.ATTR_COLSPAN,1,)@rowSpan>i-j && lists!=null && column<list.size() && i<size && j<i -> insertPoints.add(new ColStructure(column,colSpan,),)@rowSpan>i-j && lists!=null && column<list.size() && i<size && j<i } } } -> IF { -> Collections.sort(insertPoints,)@insertPoints.size()>0 -> itr=insertPoints.iterator()@insertPoints.size()>0 -> LOOP { -> cls=(ColStructure) itr.next()@itr.hasNext() && insertPoints.size()>0 -> loop=cls.getColSpan()@itr.hasNext() && insertPoints.size()>0 -> column=cls.getColumn()@lists!=null && i<size && itr.hasNext() && insertPoints.size()>0 -> LOOP { -> trCells.add(++column,getFakeElement(),)@lists!=null && --loop!=0 && i<size && itr.hasNext() && insertPoints.size()>0 } } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dom/html/TableUtil.java!TableUtil!hasColumnSpanElement][SEQ] =  -> cells=getColumnCells(columnIndex,)@ -> IF { -> itr=cells.iterator()@cells!=null -> LOOP { -> cell=(Element) itr.next()@cells!=null && itr.hasNext() -> value=DOMUtil.getIntAttributeIgnoreCase(cell,IHTMLConstants.ATTR_COLSPAN,1,)@cells!=null && itr.hasNext() -> IF { -> return true@cells!=null && itr.hasNext() && value>1 } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dom/html/TableUtil.java!TableUtil!hasRowSpanElement][SEQ] =  -> list=DOMUtil.getElementChildren(tr,)@ -> itr=list.iterator()@ -> LOOP { -> ele=(Element) itr.next()@itr.hasNext() -> value=DOMUtil.getIntAttributeIgnoreCase(ele,IHTMLConstants.ATTR_ROWSPAN,1,)@itr.hasNext() -> IF { -> return true@value>1 && itr.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dom/html/TableUtil.java!TableUtil!initialTrCells][SEQ] =  -> size=trList.size()@ -> IF { -> LOOP { -> lists[i]=new ArrayList()@i<n -> tr=(Element) trList.get(i,)@trList!=null && i<n -> domCells=DOMUtil.getElementChildren(tr,)@trList!=null && i<n -> itr=domCells.iterator()@trList!=null && i<n -> LOOP { -> cell=(Element) itr.next()@itr.hasNext() && trList!=null && i<n -> lists[i].add(cell,)@itr.hasNext() && trList!=null && i<n -> colSpan=DOMUtil.getIntAttributeIgnoreCase(cell,IHTMLConstants.ATTR_COLSPAN,1,)@itr.hasNext() && trList!=null && i<n -> LOOP { -> fakeElement=getFakeElement()@--colSpan>0 && itr.hasNext() && trList!=null && i<n -> lists[i].add(fakeElement,)@--colSpan>0 && itr.hasNext() && trList!=null && i<n } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dtmanager/DefaultDTInfo.java!DefaultDTInfo!getTagDecorateInfo][SEQ] =  -> tdInfos=dtInfo.getTagDecorateInfos()@ -> itTDInfos=tdInfos.iterator()@ -> LOOP { -> curTDInfo=(TagDecorateInfo) itTDInfos.next()@itTDInfos.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dtmanager/converter/DTHTMLOutputRenderer.java!DTHTMLOutputRenderer!appendChildOperations][SEQ] =  -> itOperations=operations.iterator()@ -> LOOP { -> operation=(Operation) itOperations.next()@itOperations.hasNext() -> opID=operation.getId()@itOperations.hasNext() -> params=getParamsArray(operation,)@itOperations.hasNext() -> currentTransformOperation=TransformOperationFactory.getInstance().getTransformOperation(opID,params,dtInfo.getTrait(),)@itOperations.hasNext() -> IF { -> parentOperation.appendChildOperation(currentTransformOperation,)@currentTransformOperation!=null && itOperations.hasNext() -> childOperations=operation.getOperations()@currentTransformOperation!=null && itOperations.hasNext() -> IF { -> IF { -> return false@childOperations!=null&&childOperations.size()>0 && currentTransformOperation!=null && itOperations.hasNext() && !appendChildOperations(currentTransformOperation,childOperations,dtInfo,) } } } ELSE { -> return false@!(currentTransformOperation!=null) && itOperations.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dtmanager/converter/DTHTMLOutputRenderer.java!DTHTMLOutputRenderer!appendOperationsToTransformer][SEQ] =  -> itOperations=operations.iterator()@ -> LOOP { -> operation=(Operation) itOperations.next()@itOperations.hasNext() -> opID=operation.getId()@itOperations.hasNext() -> params=getParamsArray(operation,)@itOperations.hasNext() -> currentTransformOperation=TransformOperationFactory.getInstance().getTransformOperation(opID,params,dtInfo.getTrait(),)@itOperations.hasNext() -> IF { -> transformer.appendTransformOperation(currentTransformOperation,)@currentTransformOperation!=null && itOperations.hasNext() -> childOperations=operation.getOperations()@currentTransformOperation!=null && itOperations.hasNext() -> IF { -> IF { -> return false@childOperations!=null&&childOperations.size()>0 && currentTransformOperation!=null && itOperations.hasNext() && !appendChildOperations(currentTransformOperation,childOperations,dtInfo,) } } } ELSE { -> return false@!(currentTransformOperation!=null) && itOperations.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dtmanager/converter/DTHTMLOutputRenderer.java!DTHTMLOutputRenderer!getParamsArray][SEQ] =  -> paramsList=operation.getParameters()@ -> IF { -> itParamsList=paramsList.iterator()@paramsList!=null -> LOOP { -> param=(Parameter) itParamsList.next()@itParamsList.hasNext() && paramsList!=null -> paramsArray[++index]=param.getValue()@itParamsList.hasNext() && paramsList!=null } -> return paramsArray@paramsList!=null }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dtmanager/converter/DefaultTransformer.java!DefaultTransformer!transform][SEQ] =  -> IF { -> IF { -> itOperations=transformOperations.iterator()@transformOperations.size()>0 -> LOOP { -> operation=(ITransformOperation) itOperations.next()@transformOperations.size()>0 && srcElement!=null && itOperations.hasNext() -> curElement=operation.transform(srcElement,curElement,)@transformOperations.size()>0 && srcElement!=null && itOperations.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dtmanager/converter/internal/DTHTMLOutputRenderer.java!DTHTMLOutputRenderer!appendChildOperations][SEQ] =  -> itOperations=operations.iterator()@ -> LOOP { -> operation=(Operation) itOperations.next()@itOperations.hasNext() -> opID=operation.getId()@itOperations.hasNext() -> params=getParamsArray(operation,)@itOperations.hasNext() -> currentTransformOperation=TransformOperationFactory.getInstance().getTransformOperation(opID,params,)@itOperations.hasNext() -> IF { -> parentOperation.appendChildOperation(currentTransformOperation,)@currentTransformOperation!=null && itOperations.hasNext() -> childOperations=operation.getOperations()@currentTransformOperation!=null && itOperations.hasNext() -> IF { -> IF { -> return false@childOperations!=null&&childOperations.size()>0 && currentTransformOperation!=null && itOperations.hasNext() && !appendChildOperations(currentTransformOperation,childOperations,dtInfo,) } } } ELSE { -> return false@!(currentTransformOperation!=null) && itOperations.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dtmanager/converter/internal/DTHTMLOutputRenderer.java!DTHTMLOutputRenderer!appendOperationsToTransformer][SEQ] =  -> itOperations=operations.iterator()@ -> LOOP { -> operation=(Operation) itOperations.next()@itOperations.hasNext() -> opID=operation.getId()@itOperations.hasNext() -> params=getParamsArray(operation,)@itOperations.hasNext() -> currentTransformOperation=TransformOperationFactory.getInstance().getTransformOperation(opID,params,)@itOperations.hasNext() -> IF { -> transformer.appendTransformOperation(currentTransformOperation,)@currentTransformOperation!=null && itOperations.hasNext() -> childOperations=operation.getOperations()@currentTransformOperation!=null && itOperations.hasNext() -> IF { -> IF { -> return false@childOperations!=null&&childOperations.size()>0 && currentTransformOperation!=null && itOperations.hasNext() && !appendChildOperations(currentTransformOperation,childOperations,dtInfo,) } } } ELSE { -> return false@!(currentTransformOperation!=null) && itOperations.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dtmanager/converter/internal/DTHTMLOutputRenderer.java!DTHTMLOutputRenderer!getParamsArray][SEQ] =  -> paramsList=operation.getParameters()@ -> IF { -> itParamsList=paramsList.iterator()@paramsList!=null -> LOOP { -> param=(Parameter) itParamsList.next()@itParamsList.hasNext() && paramsList!=null -> paramsArray[++index]=param.getValue()@itParamsList.hasNext() && paramsList!=null } -> return paramsArray@paramsList!=null }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dtmanager/converter/internal/DefaultTransformer.java!DefaultTransformer!transform][SEQ] =  -> IF { -> IF { -> itOperations=transformOperations.iterator()@transformOperations.size()>0 -> LOOP { -> operation=(ITransformOperation) itOperations.next()@transformOperations.size()>0 && srcElement!=null && itOperations.hasNext() -> curElement=operation.transform(srcElement,curElement,)@transformOperations.size()>0 && srcElement!=null && itOperations.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/dtmanager/converter/operations/AbstractTransformOperation.java!AbstractTransformOperation!executeChildOperations][SEQ] =  -> IF { -> itChildOperations=childOperations.iterator()@childOperations!=null&&childOperations.size()>0 -> LOOP { -> childOperation=(ITransformOperation) itChildOperations.next()@childOperations!=null&&childOperations.size()>0 && itChildOperations.hasNext() -> retElement=childOperation.transform(srcElement,retElement,)@childOperations!=null&&childOperations.size()>0 && itChildOperations.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/HTMLEditor.java!HTMLEditor!deletePreviewFiles][SEQ] =  -> itPreviewFiles=PREVIEW_FILES_LIST.iterator()@ -> LOOP { -> file=(File) itPreviewFiles.next()@itPreviewFiles.hasNext() -> IF { -> file.delete()@file!=null&&file.exists() && itPreviewFiles.hasNext() } } -> PREVIEW_FILES_LIST.clear()@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/DesignerPaletteCustomizationsHelper.java!DesignerPaletteCustomizationsHelper!applyImport][SEQ] =  -> it=customizer.getDesignerPaletteRoot().getChildren().iterator()@ -> LOOP { -> o=it.next()@it.hasNext() -> IF { -> pd=(TaglibPaletteDrawer) o@it.hasNext() && o instanceof TaglibPaletteDrawer -> IF { -> pd.setVisible(!isHidden,)@it.hasNext() && uri.equals(pd.getURI(),) && o instanceof TaglibPaletteDrawer } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/DesignerPaletteCustomizationsHelper.java!DesignerPaletteCustomizationsHelper!exportCustomizations][SEQ] =  -> document=XMLUtil.getDocumentBuilder().getDOMImplementation().createDocument(null,IPaletteConstants.ROOT,null,)@ -> TRY { -> index=filename.lastIndexOf(File.separator,)@ -> foldername=filename.substring(0,index,)@ -> folder=new File(foldername,)@ -> IF { -> folder.mkdir()@folder!=null&&!folder.exists() } -> ostream=new FileOutputStream(filename,)@ -> iter=paletteItemManager.getAllCategories().iterator()@ -> LOOP { -> category=(TaglibPaletteDrawer) iter.next()@iter.hasNext() -> categoryElement=document.createElement(IPaletteConstants.CATEGORY_TAG,)@ -> categoryElement.setAttribute(IPaletteConstants.ID,category.getURI(),)@iter.hasNext() -> categoryElement.setAttribute(IPaletteConstants.ISHIDDEN,Boolean.toString(!category.isVisible(),),)@iter.hasNext() -> document.getDocumentElement().appendChild(categoryElement,)@ } -> XMLUtil.serialize(document,ostream,)@ -> ostream.close()@ } CATCH { }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/DesignerPaletteCustomizationsHelper.java!DesignerPaletteCustomizationsHelper!loadUserCustomizations][SEQ] =  -> store=getPreferenceStore()@ -> it=paletteItemManager.getAllCategories().iterator()@ -> LOOP { -> tld=(TaglibPaletteDrawer) it.next()@it.hasNext() -> IF { -> tld.setVisible(!store.getBoolean(PREFS_TAGLIBHIDE_PREFIX+tld.getURI(),),)@it.hasNext() && store.contains(PREFS_TAGLIBHIDE_PREFIX+tld.getURI(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/DesignerPaletteCustomizationsHelper.java!DesignerPaletteCustomizationsHelper!save][SEQ] =  -> prefs=getPreferenceStore()@ -> it=paletteRoot.getChildren().iterator()@ -> LOOP { -> entry=(PaletteEntry) it.next()@it.hasNext() -> IF { -> pd=(TaglibPaletteDrawer) entry@it.hasNext() && entry instanceof TaglibPaletteDrawer -> prefs.putValue(PREFS_TAGLIBHIDE_PREFIX+pd.getURI(),Boolean.toString(!pd.isVisible(),),)@it.hasNext() && entry instanceof TaglibPaletteDrawer } } -> PaletteItemManager.notifyPaletteItemManagersOfCustomizationsUpdate(paletteRoot.getPaletteManager(),)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/DesignerPaletteCustomizerDialog.java!DesignerPaletteContentProvider!getChildren][SEQ] =  -> IF { -> libs=new ArrayList()@!(parentElement instanceof DesignerPaletteRoot) -> children=(DesignerPaletteRoot) parentElement.getChildren()@parentElement instanceof DesignerPaletteRoot -> IF { -> it=children.iterator()@!children.isEmpty() && parentElement instanceof DesignerPaletteRoot -> LOOP { -> entry=(PaletteEntry) it.next()@it.hasNext() && !children.isEmpty() && parentElement instanceof DesignerPaletteRoot -> IF { -> libs.add(entry,)@it.hasNext() && !children.isEmpty() && parentElement instanceof DesignerPaletteRoot && entry instanceof TaglibPaletteDrawer } } -> IF { -> return libs.toArray()@!children.isEmpty() && !libs.isEmpty() && parentElement instanceof DesignerPaletteRoot } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/TagImageManager.java!TagImageManager!getIconImageDescriptor][SEQ] =  -> trait=query.findTrait(model,"paletteInfos",)@ -> IF { -> tags=(PaletteInfos) trait.getValue()@trait!=null -> it=tags.getInfos().iterator()@trait!=null -> LOOP { -> tag=(PaletteInfo) it.next()@it.hasNext() && trait!=null -> IF { -> sourceProvider=(Trait) tag.eContainer().eContainer().getSourceModelProvider()@it.hasNext() && trait!=null && tag.getId().equalsIgnoreCase(tagName,) -> IF { -> icon=getImageDescriptorFromString(sourceProvider,tag.getSmallIcon(),DEFAULT_SMALL_ICON,)@it.hasNext() && trait!=null && tag.getId().equalsIgnoreCase(tagName,) } ELSE { -> icon=getImageDescriptorFromString(sourceProvider,tag.getLargeIcon(),DEFAULT_LARGE_ICON,)@it.hasNext() && trait!=null && tag.getId().equalsIgnoreCase(tagName,) } } } } -> IF { -> it=model.getChildEntities().iterator()@ -> LOOP { -> tagAsEntity=(Entity) it.next()@it.hasNext() && icon==null -> IF { -> IF { -> icon=getImageDescriptorFromTagTraitValueAsString(query,tagAsEntity,TRAIT_ICON_SMALL,DEFAULT_SMALL_ICON,)@it.hasNext() && tagAsEntity.getId().equalsIgnoreCase(tagName,) && icon==null } ELSE { -> icon=getImageDescriptorFromTagTraitValueAsString(query,tagAsEntity,TRAIT_ICON_LARGE,DEFAULT_LARGE_ICON,)@it.hasNext() && tagAsEntity.getId().equalsIgnoreCase(tagName,) && icon==null } } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/impl/PaletteHelper.java!PaletteHelper!findCategory][SEQ] =  -> it=manager.getAllCategories().iterator()@ -> LOOP { -> lib=(TaglibPaletteDrawer) it.next()@it.hasNext() -> IF { -> return lib@tldURI.equals(lib.getURI(),) && it.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/impl/PaletteHelper.java!PaletteHelper!loadTags][SEQ] =  -> IF { -> trait=query.findTrait(model,"paletteInfos",)@model!=null -> IF { -> tags=(PaletteInfos) trait.getValue()@trait!=null && model!=null -> it=tags.getInfos().iterator()@trait!=null && model!=null -> LOOP { -> tag=(PaletteInfo) it.next()@it.hasNext() && trait!=null && model!=null -> createTagEntry(category,tag,ns,)@it.hasNext() && trait!=null && model!=null } } ELSE { -> it=model.getChildEntities().iterator()@!(trait!=null) && model!=null -> LOOP { -> tagAsEntity=(Entity) it.next()@it.hasNext() && !(trait!=null) && model!=null -> createTagEntry(category,tagAsEntity,ns,query,)@it.hasNext() && !(trait!=null) && model!=null } } } ELSE { -> loadFromNamespace(category,ns,)@ }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/impl/PaletteHelper.java!PaletteHelper!loadTags][SEQ] =  -> IF { -> trait=query.findTrait(model,"paletteInfos",)@model!=null -> IF { -> tags=(PaletteInfos) trait.getValue()@trait!=null && model!=null -> it=tags.getInfos().iterator()@trait!=null && model!=null -> LOOP { -> tag=(PaletteInfo) it.next()@it.hasNext() && trait!=null && model!=null -> createTagEntry(category,tag,doc,)@it.hasNext() && trait!=null && model!=null } } ELSE { -> it=model.getChildEntities().iterator()@!(trait!=null) && model!=null -> LOOP { -> tagAsEntity=(Entity) it.next()@it.hasNext() && !(trait!=null) && model!=null -> createTagEntry(category,tagAsEntity,doc,query,)@it.hasNext() && !(trait!=null) && model!=null } } } ELSE { -> loadFromCMDocument(category,doc,)@ }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/impl/PaletteItemManager.java!PaletteItemManager!findCategoryByURI][SEQ] =  -> iter=getAllCategories().iterator()@ -> LOOP { -> category=(TaglibPaletteDrawer) iter.next()@iter.hasNext() -> IF { -> return category@uri.equals(category.getURI(),) && iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/impl/PaletteItemManager.java!PaletteItemManager!getTaglibPalletteDrawer][SEQ] =  -> iter=getAllCategories().iterator()@ -> LOOP { -> cat=(TaglibPaletteDrawer) iter.next()@iter.hasNext() -> IF { -> return cat@uri.equalsIgnoreCase(cat.getId(),) && iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/impl/PaletteItemManager.java!PaletteItemManager!notifyPaletteItemManagersOfCustomizationsUpdate][SEQ] =  -> TRY { -> IF { -> it=_managers.values().iterator()@ -> LOOP { -> mgr=(PaletteItemManager) it.next()@it.hasNext() -> IF { -> mgr.reset()@it.hasNext() && mgr!=null&&notifyingManager!=mgr } } } ELSE { } } CATCH { } FINALLY { -> IF { } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/impl/TaglibPaletteDrawer.java!TaglibPaletteDrawer!getTagPaletteEntryById][SEQ] =  -> it=getChildren().iterator()@ -> LOOP { -> tag=(TagToolPaletteEntry) it.next()@it.hasNext() -> IF { -> return tag@it.hasNext() && tag.getId().equals(id,) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/impl/TaglibPaletteDrawer.java!TaglibPaletteDrawer!getTagPaletteEntryByTagName][SEQ] =  -> it=getChildren().iterator()@ -> LOOP { -> tag=(TagToolPaletteEntry) it.next()@it.hasNext() -> IF { -> return tag@it.hasNext() && tag.getTagName().equalsIgnoreCase(tagName,) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/paletteinfos/internal/impl/PaletteInfoImpl.java!PaletteInfoImpl!findTag][SEQ] =  -> it=model.getChildEntities().iterator()@ -> LOOP { -> tag_=(Entity) it.next()@it.hasNext() -> IF { -> return tag_@it.hasNext() && tagid.equals(tag_.getId(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/paletteinfos/internal/impl/PaletteInfoImpl.java!PaletteInfoImpl!getTagTraitValue][SEQ] =  -> tag_=getTag(tagName,)@ -> IF { -> it=tag_.getTraits().iterator()@tag_!=null -> LOOP { -> trait=(Trait) it.next()@it.hasNext() && tag_!=null -> IF { -> return trait.getValue()@it.hasNext() && traitKey.equals(trait.getId(),) && tag_!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editors/palette/paletteinfos/internal/impl/PaletteInfosImpl.java!PaletteInfosImpl!findPaletteInfoById][SEQ] =  -> it=getInfos().iterator()@ -> LOOP { -> info=(PaletteInfo) it.next()@it.hasNext() -> IF { -> return info@it.hasNext() && id.equals(info.getId(),) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editpolicies/DropEditPolicy.java!DropEditPolicy!eraseTargetFeedback][SEQ] =  -> IF { -> it=_feedbackFigures.iterator()@_feedbackFigures!=null -> LOOP { -> figure=(IFigure) it.next()@it.hasNext() && _feedbackFigures!=null -> IF { -> removeFeedback(figure,)@it.hasNext() && _feedbackFigures!=null && figure!=null } } -> _feedbackFigures.clear()@_feedbackFigures!=null }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editpolicies/ElementMenuBar.java!ElementMenuBar!fireSelectionChanged][SEQ] =  -> it=_selectionListeners.iterator()@ -> LOOP { -> listener=(ISelectionChangedListener) it.next()@it.hasNext() -> listener.selectionChanged(new SelectionChangedEvent(this,_selection,),)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editpolicies/ElementMenuBar.java!ElementMenuBar!hasEditPartFocus][SEQ] =  -> it=getChildParts().iterator()@ -> LOOP { -> editPart=(EditPart) it.next()@it.hasNext() -> IF { -> return true@it.hasNext() && editPart.getSelected()==EditPart.SELECTED_PRIMARY } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/editpolicies/ElementMenuBar.java!ElementMenuBar!selectionChanged][SEQ] =  -> selection=event.getSelection()@ -> IF { -> mySelections=new ArrayList((IStructuredSelection) selection.size(),)@selection instanceof IStructuredSelection -> IF { -> it=(IStructuredSelection) selection.iterator()@selection instanceof IStructuredSelection -> LOOP { -> selectedObj=it.next()@it.hasNext() && selection instanceof IStructuredSelection && _childParts!=null -> IF { -> mySelections.add(selectedObj,)@it.hasNext() && _childParts.contains(selectedObj,) && selection instanceof IStructuredSelection && _childParts!=null } } } -> _selection=new StructuredSelection(mySelections,)@selection instanceof IStructuredSelection }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/itemcreation/command/ElementCustomizationCommand.java!ElementCustomizationCommand!ensureRequiredAttrs][SEQ] =  -> ed=CMUtil.getTLDElementDeclaration(creationData.getUri(),creationData.getTagName(),creationData.getModel().getDocument().getStructuredDocument(),)@ -> IF { -> it=ed.getAttributes().iterator()@ed!=null -> LOOP { -> attr=(CMAttributeDeclaration) it.next()@it.hasNext() && ed!=null -> IF { -> element.setAttribute(attr.getAttrName(),attr.getDefaultValue(),)@it.hasNext() && attr.getUsage()==CMAttributeDeclaration.REQUIRED&&element.getAttribute(attr.getAttrName(),)==null && ed!=null } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/parts/DocumentEditPart.java!DocumentEditPart!refreshStyle][SEQ] =  -> childParts=this.getChildren()@ -> iter=childParts.iterator()@ -> LOOP { -> part=(EditPart) iter.next()@iter.hasNext() -> IF { -> node=(IDOMNode) (ElementEditPart) part.getNodeForFigure()@part instanceof ElementEditPart && iter.hasNext() -> IF { -> refreshChildStyles(node,)@part instanceof ElementEditPart && node!=null && iter.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/parts/ElementEditPart.java!ElementEditPart!getModelChildren][SEQ] =  -> children_=new ArrayList(_tagConverter.getChildModeList(),)@ -> it=_tagConverter.getNonVisualChildren().iterator()@ -> LOOP { -> nonVisualChild=(Element) it.next()@it.hasNext() -> children_.add(DTManager.getInstance().getTagConverter(nonVisualChild,IConverterFactory.MODE_DESIGNER,this.getDestDocumentForDesign(),),)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/parts/ElementEditPart.java!ElementEditPart!refresh][SEQ] =  -> modelToEditPart=new HashMap()@ -> children1=getChildren()@ -> LOOP { -> editPart=(EditPart) children1.get(i,)@i<n -> modelToEditPart.put(editPart.getModel(),editPart,)@i<n -> removeChildVisual(editPart,)@i<n } -> modelObjects=getModelChildren()@ -> IF { -> LOOP { -> model=modelObjects.get(i,)@i<n -> editPart=(EditPart) modelToEditPart.remove(model,)@i<n -> IF { -> addChildVisual(editPart,i,)@editPart!=null && i<n } ELSE { -> editPart=createChild(model,)@!(editPart!=null) && i<n -> addChild(editPart,i,)@!(editPart!=null) && i<n } } -> iter=modelToEditPart.values().iterator()@ -> LOOP { -> part=(EditPart) iter.next()@iter.hasNext() -> removeChild(part,)@iter.hasNext() } } ELSE { -> iter=modelToEditPart.values().iterator()@ -> LOOP { -> part=(EditPart) iter.next()@iter.hasNext() -> removeChild(part,)@iter.hasNext() } -> LOOP { -> model=modelObjects.get(i,)@i<n -> editPart=createChild(model,)@i<n -> addChild(editPart,i,)@i<n } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/properties/celleditors/LabeledComboBoxCellEditor.java!LabeledComboBoxCellEditor!newInstance][SEQ] =  -> list=new ArrayList()@ -> iter=valueLabelMap.keySet().iterator()@ -> LOOP { -> key=iter.next()@iter.hasNext() -> label=(String) valueLabelMap.get(key,)@iter.hasNext() -> list.add( new Object[],)@iter.hasNext() } -> Collections.sort(list,new Comparator(),)@ -> LOOP { -> values[i]=(Object[]) list.get(i,)[0]@i<n -> labels[i]=(String) (Object[]) list.get(i,)[1]@i<n } -> return new LabeledComboBoxCellEditor(parent,values,labels,style,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/properties/celleditors/LabeledStyleComboCellEditor.java!LabeledStyleComboCellEditor!getPossibleValueMap][SEQ] =  -> map=new HashMap<String, String>(pvs.getPossibleValues().size(),)@ -> it=pvs.getPossibleValues().iterator()@ -> LOOP { -> pv=(IPossibleValue) it.next()@it.hasNext() -> map.put(pv.getValue(),pv.getDisplayValue(),)@it.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/properties/celleditors/LabeledStyleComboCellEditor.java!LabeledStyleComboCellEditor!newInstance][SEQ] =  -> list=new ArrayList()@ -> iter=valueLabelMap.keySet().iterator()@ -> LOOP { -> key=iter.next()@iter.hasNext() -> label=(String) valueLabelMap.get(key,)@iter.hasNext() -> list.add( new Object[],)@iter.hasNext() } -> Collections.sort(list,new Comparator(),)@ -> LOOP { -> values[i]=(Object[]) list.get(i,)[0]@i<n -> labels[i]=(String) (Object[]) list.get(i,)[1]@i<n } -> return new LabeledStyleComboCellEditor(parent,values,labels,defaultValue,style,)@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/requests/NodeCreationFactory.java!NodeCreationFactory!getNewObject][SEQ] =  -> ownerdoc=getOwnerDocument()@ -> IF { -> return null@ownerdoc==null } -> ele=ownerdoc.createElement(_tagName,)@!(ownerdoc==null) -> IF { -> prefix=getPrefix(_uri,(IDOMDocument) ownerdoc.getModel(),_suggestedPrefix,)@!(ownerdoc==null) && ele instanceof IDOMNode -> IF { -> ele.setPrefix(prefix,)@!(ownerdoc==null) && prefix!=null && ele instanceof IDOMNode } } -> IF { -> iter=_attributes.keySet().iterator()@!(ownerdoc==null) && _attributes!=null -> LOOP { -> key=(String) iter.next()@!(ownerdoc==null) && _attributes!=null && iter.hasNext() -> value=(String) _attributes.get(key,)@!(ownerdoc==null) && _attributes!=null && iter.hasNext() -> ele.setAttribute(key,value,)@!(ownerdoc==null) && _attributes!=null && iter.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/ui/common/sash/SashEditorPart.java!SashEditorPart!isDirty][SEQ] =  -> i=_nestedEditors.iterator()@ -> LOOP { -> editor=(IEditorPart) i.next()@i.hasNext() -> IF { -> return true@editor.isDirty() && i.hasNext() } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/utils/CacheManager.java!CacheManager!disposeAll][SEQ] =  -> iter=_map.keySet().iterator()@ -> LOOP { -> key=iter.next()@iter.hasNext() -> entry=_map.get(key,)@iter.hasNext() -> _creator.dispose(key,entry,)@iter.hasNext() } -> _map.clear()@
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/utils/JSPUtil.java!JSPUtil!findURIForPrefix][SEQ] =  -> IF { -> return null@prefix==null||model==null } -> m=TaglibController.getTLDCMDocumentManager(model.getStructuredDocument(),)@!(prefix==null||model==null) -> IF { -> return null@!(prefix==null||model==null) && m==null } -> trackers=m.getTaglibTrackers()@!(m==null) && !(prefix==null||model==null) -> iter=trackers.iterator()@!(m==null) && !(prefix==null||model==null) -> LOOP { -> tracker=(TaglibTracker) iter.next()@!(m==null) && !(prefix==null||model==null) && iter.hasNext() -> IF { -> cmdoc=tracker.getDocument()@prefix.equals(tracker.getPrefix(),) && !(m==null) && !(prefix==null||model==null) && iter.hasNext() -> IF { -> return (TLDDocument) cmdoc.getUri()@cmdoc instanceof TLDDocument && prefix.equals(tracker.getPrefix(),) && !(m==null) && !(prefix==null||model==null) && iter.hasNext() } } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/utils/JSPUtil.java!JSPUtil!findUnusedPrefix][SEQ] =  -> m=TaglibController.getTLDCMDocumentManager(model.getStructuredDocument(),)@ -> IF { -> return suggestion@m==null } -> trackers=m.getTaglibTrackers()@!(m==null) -> map=new HashSet()@!(m==null) -> iter=trackers.iterator()@!(m==null) -> LOOP { -> tracker=(TaglibTracker) iter.next()@!(m==null) && iter.hasNext() -> map.add(tracker.getPrefix(),)@!(m==null) && iter.hasNext() }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/utils/JSPUtil.java!JSPUtil!getPrefix][SEQ] =  -> m=TaglibController.getTLDCMDocumentManager(model.getStructuredDocument(),)@ -> IF { -> IF { -> root=getRootElement(model,)@m==null && model.getDocument().isXMLType() -> IF { -> attrs=root.getAttributes()@root!=null && m==null && model.getDocument().isXMLType() -> LOOP { -> a=(Attr) attrs.item(i,)@i<attrs.getLength() && root!=null && m==null && model.getDocument().isXMLType() -> IF { -> prefix=a.getNodeName().substring("xmlns:".length(),)@a.getValue().equals(uri,)&&a.getName().startsWith("xmlns:",) && i<attrs.getLength() && root!=null && m==null && model.getDocument().isXMLType() -> return prefix@a.getValue().equals(uri,)&&a.getName().startsWith("xmlns:",) && i<attrs.getLength() && root!=null && m==null && model.getDocument().isXMLType() } } } } -> return null@!(model.getDocument().isXMLType()) && m==null } -> trackers=m.getTaglibTrackers()@!(m==null) -> iter=trackers.iterator()@!(m==null) -> LOOP { -> tracker=(TaglibTracker) iter.next()@!(m==null) && iter.hasNext() -> IF { -> return tracker.getPrefix()@uri.equals(tracker.getURI(),) && !(m==null) && iter.hasNext() } -> cmdoc=tracker.getDocument()@!(m==null) && iter.hasNext() && !(uri.equals(tracker.getURI(),)) -> IF { -> return tracker.getPrefix()@cmdoc instanceof TLDDocument&&uri.equals((TLDDocument) cmdoc.getUri(),) && !(m==null) && iter.hasNext() && !(uri.equals(tracker.getURI(),)) } }
results[https://github.com/eclipse/webtools.jsf!jsf/plugins/org.eclipse.jst.pagedesigner/src/org/eclipse/jst/pagedesigner/viewer/FlowBoxLine.java!FlowBoxLine!getClosestPart][SEQ] =  -> IF { -> return null@_parts.isEmpty() } -> parts=_parts.values()@!(_parts.isEmpty()) -> iterator=parts.iterator()@!(_parts.isEmpty()) -> closestPart=(LayoutPart) iterator.next()@!(_parts.isEmpty()) -> IF { -> LOOP { -> nextPart=(LayoutPart) iterator.next()@!(_parts.isEmpty()) && iterator.hasNext() -> closestPart=CaretPositionResolver.getCloserPart(closestPart,nextPart,_point,)@!(_parts.isEmpty()) && iterator.hasNext() } } -> IF { -> result=CaretPositionResolver.getInstance(_validator,_point,).resolveClosestPartFrom(closestPart,)@!(_parts.isEmpty()) && _validator.getActionData().getActionType()==ActionData.KEYBOARD_NAVAGATION||closestPart.isInline() } -> IF { -> return result.getPart()@result!=null && !(_parts.isEmpty()) }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/phone/muc/MucManagerFragment.java!MucManagerFragment!getList][SEQ] =  -> map=new HashMap<String, UserModel>()@ -> LOOP { -> IF { -> map.put(userModel.getName(),userModel,)@!map.containsKey(userModel.getName(),) } } -> list=new ArrayList<UserModel>()@ -> iter=map.entrySet().iterator()@ -> LOOP { -> entry=(Entry) iter.next()@iter.hasNext() -> list.add((UserModel) entry.getValue(),)@iter.hasNext() } -> map.clear()@
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/util/IOUtils.java!IOUtils!writeLines][SEQ] =  -> IF { -> return @lines==null } -> it=lines.iterator()@!(lines==null) -> LOOP { -> line=it.next()@it.hasNext() && !(lines==null) -> IF { -> writer.write(line.toString(),)@it.hasNext() && line!=null && !(lines==null) } -> writer.write(lineEnding,)@!(lines==null) }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/util/IOUtils.java!IOUtils!writeLines][SEQ] =  -> IF { -> writeLines(lines,lineEnding,output,)@encoding==null } ELSE { -> IF { -> return @!(encoding==null) && lines==null } -> it=lines.iterator()@!(lines==null) && encoding==null -> LOOP { -> line=it.next()@it.hasNext() && !(encoding==null) && !(lines==null) -> IF { -> output.write(line.toString().getBytes(encoding,),)@it.hasNext() && !(encoding==null) && line!=null && !(lines==null) } -> output.write(lineEnding.getBytes(encoding,),)@!(encoding==null) && !(lines==null) } }
results[https://github.com/fywb251/bsl_impc_android!cube-android/src/com/foreveross/chameleon/util/IOUtils.java!IOUtils!writeLines][SEQ] =  -> IF { -> return @lines==null } -> it=lines.iterator()@!(lines==null) -> LOOP { -> line=it.next()@it.hasNext() && !(lines==null) -> IF { -> output.write(line.toString().getBytes(),)@it.hasNext() && line!=null && !(lines==null) } -> output.write(lineEnding.getBytes(),)@!(lines==null) }
results[https://github.com/hyxf/coder!source/src/cn/eoe/app/utils/CollectionUtils.java!CollectionUtils!contains][SEQ] =  -> IF { -> LOOP { -> candidate=iterator.next()@iterator.hasNext() && iterator!=null -> IF { -> return true@iterator.hasNext() && iterator!=null && ObjectUtils.nullSafeEquals(candidate,element,) } } }
results[https://github.com/hyxf/coder!source/src/cn/hyxf/app/utils/CollectionUtils.java!CollectionUtils!contains][SEQ] =  -> IF { -> LOOP { -> candidate=iterator.next()@iterator.hasNext() && iterator!=null -> IF { -> return true@iterator.hasNext() && iterator!=null && ObjectUtils.nullSafeEquals(candidate,element,) } } }
results[https://github.com/luchesar/gripmonkeys!mocks/src/test/java/com/ontologypartners/mocks/servlet/MockHttpServletRequest.java!CollectionEnumeration!nextElement][SEQ] =  -> return m_iterator.next()@
results[https://github.com/ovitas/compass2!web/src/main/java/no/ovitas/compass2/webapp/filter/StaticFilter.java!StaticFilter!parsePatterns][SEQ] =  -> patternSet=org.springframework.util.StringUtils.commaDelimitedListToSet(delimitedPatterns,)@ -> iterator=patternSet.iterator()@ -> LOOP { -> pattern=(String) iterator.next()@iterator.hasNext() -> patterns[i]=pattern.trim()@iterator.hasNext() }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/context/BaseApplication.java!BaseApplication!disconnect][SEQ] =  -> client=Scope.getClient()@ -> clients.remove(client,)@ -> IF { -> it=this.soPersistence.getSharedObjects()@this.soPersistence!=null -> LOOP { -> so=(PersistentSharedObject) it.next()@it.hasNext() && this.soPersistence!=null -> so.unregisterClient(client,)@it.hasNext() && this.soPersistence!=null } } -> onDisconnect(client,)@
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/context/BaseApplication.java!BaseApplication!onDisconnect][SEQ] =  -> it=listeners.iterator()@ -> LOOP { -> el=(AppLifecycleAware) it.next()@it.hasNext() -> el.onDisconnect(conn,)@it.hasNext() }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/io/test/AbstractIOTest.java!AbstractIOTest!testJavaBean][SEQ] =  -> beanIn=new TestJavaBean()@ -> beanIn.setTestString("test string here",)@ -> beanIn.setTestBoolean((System.currentTimeMillis()%2==0)?true:false,)@ -> beanIn.setTestBooleanObject((System.currentTimeMillis()%2==0)?Boolean.TRUE:Boolean.FALSE,)@ -> beanIn.setTestNumberObject(new Integer((int) System.currentTimeMillis()/1000,),)@ -> serializer.serialize(out,beanIn,)@ -> mapOrBean=deserializer.deserialize(in,)@ -> Assert.assertEquals(beanIn.getClass().getName(),mapOrBean.getClass().getName(),)@ -> map=(mapOrBean instanceof Map)?(Map) mapOrBean:new BeanMap(mapOrBean,)@ -> entrySet=map.entrySet()@ -> it=entrySet.iterator()@ -> beanInMap=new BeanMap(beanIn,)@ -> Assert.assertEquals(beanInMap.size(),map.size(),)@ -> LOOP { -> entry=(Map.Entry) it.next()@it.hasNext() -> propOut=(String) entry.getKey()@it.hasNext() -> valueOut=entry.getValue()@it.hasNext() -> Assert.assertTrue(beanInMap.containsKey(propOut,),)@it.hasNext() -> Assert.assertEquals(valueOut,beanInMap.get(propOut,),)@it.hasNext() }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/io/test/AbstractIOTest.java!AbstractIOTest!testMap][SEQ] =  -> mapIn=new HashMap()@ -> mapIn.put("testNumber",new Integer(34,),)@ -> mapIn.put("testString","wicked",)@ -> mapIn.put("testBean",new SimpleJavaBean(),)@ -> serializer.serialize(out,mapIn,)@ -> mapOut=(Map) deserializer.deserialize(in,)@ -> Assert.assertNotNull(mapOut,)@ -> Assert.assertEquals(mapIn.size(),mapOut.size(),)@ -> entrySet=mapOut.entrySet()@ -> it=entrySet.iterator()@ -> LOOP { -> entry=(Map.Entry) it.next()@it.hasNext() -> propOut=(String) entry.getKey()@it.hasNext() -> valueOut=entry.getValue()@it.hasNext() -> Assert.assertTrue(mapIn.containsKey(propOut,),)@it.hasNext() -> valueIn=mapIn.get(propOut,)@it.hasNext() -> Assert.assertEquals(valueOut,valueIn,)@it.hasNext() }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/io/test/AbstractIOTest.java!AbstractIOTest!testSimpleReference][SEQ] =  -> mapIn=new HashMap()@ -> bean=new SimpleJavaBean()@ -> mapIn.put("thebean",bean,)@ -> mapIn.put("thesamebeanagain",bean,)@ -> serializer.serialize(out,mapIn,)@ -> mapOut=(Map) deserializer.deserialize(in,)@ -> Assert.assertNotNull(mapOut,)@ -> Assert.assertEquals(mapIn.size(),mapOut.size(),)@ -> entrySet=mapOut.entrySet()@ -> it=entrySet.iterator()@ -> LOOP { -> entry=(Map.Entry) it.next()@it.hasNext() -> propOut=(String) entry.getKey()@it.hasNext() -> valueOut=(SimpleJavaBean) entry.getValue()@it.hasNext() -> Assert.assertTrue(mapIn.containsKey(propOut,),)@it.hasNext() -> valueIn=(SimpleJavaBean) mapIn.get(propOut,)@it.hasNext() -> Assert.assertEquals(valueOut.getNameOfBean(),valueIn.getNameOfBean(),)@it.hasNext() }
results[https://github.com/rfkrocktk/red5-server!src/org/red5/server/rtmp/RTMPSessionHandler.java!RTMPSessionHandler!onSharedObject][SEQ] =  -> ctx=conn.getAppContext()@ -> app=(BaseApplication) ctx.getBean(AppContext.APP_SERVICE_NAME,)@ -> name=request.getName()@ -> so=app.getSharedObject(name,)@ -> reply=new SharedObject()@ -> reply.setName(name,)@ -> reply.setTimestamp(0,)@ -> sync=new SharedObject()@ -> sync.setName(name,)@ -> sync.setTimestamp(0,)@ -> it=request.getEvents().iterator()@ -> LOOP { -> event=(SharedObjectEvent) it.next()@it.hasNext() -> event.getType()@it.hasNext() -> reply.addEvent(new SharedObjectEvent(SO_CLIENT_INITIAL_DATA,null,null,),)@it.hasNext() -> IF { -> reply.addEvent(new SharedObjectEvent(SO_CLIENT_UPDATE_DATA,null,so.getData(),),)@it.hasNext() && !so.getData().isEmpty() } -> so.registerClient(conn,source.getChannelId(),)@it.hasNext() -> so.updateAttribute(event.getKey(),event.getValue(),)@it.hasNext() -> reply.addEvent(new SharedObjectEvent(SO_CLIENT_UPDATE_ATTRIBUTE,event.getKey(),null,),)@it.hasNext() -> sync.addEvent(new SharedObjectEvent(SO_CLIENT_UPDATE_DATA,event.getKey(),event.getValue(),),)@it.hasNext() -> so.deleteAttribute(event.getKey(),)@it.hasNext() -> reply.addEvent(new SharedObjectEvent(SO_CLIENT_DELETE_DATA,event.getKey(),null,),)@it.hasNext() -> sync.addEvent(new SharedObjectEvent(SO_CLIENT_DELETE_DATA,event.getKey(),null,),)@it.hasNext() -> log.error("Unknown shared object update event "+event.getType(),)@it.hasNext() } -> IF { -> so.updateVersion()@ } -> reply.setSoId(so.getVersion(),)@ -> channel.write(reply,)@ -> IF { -> sync.setSoId(so.getVersion(),)@updates&&sync.getEvents().size()>0 -> sync.acquire()@updates&&sync.getEvents().size()>0 -> all_clients=so.getClients()@updates&&sync.getEvents().size()>0 -> clients=all_clients.keySet().iterator()@updates&&sync.getEvents().size()>0 -> LOOP { -> connection=(Connection) clients.next()@clients.hasNext() && updates&&sync.getEvents().size()>0 -> IF { -> log.info("Skipped "+connection,)@connection==conn && clients.hasNext() && updates&&sync.getEvents().size()>0 } -> channels=(HashSet) all_clients.get(connection,).iterator()@clients.hasNext() && updates&&sync.getEvents().size()>0 -> LOOP { -> c=connection.getChannel((Integer) channels.next().byteValue(),)@channels.hasNext() && clients.hasNext() && updates&&sync.getEvents().size()>0 -> c.write(sync,)@channels.hasNext() && clients.hasNext() && updates&&sync.getEvents().size()>0 } } -> sync.release()@updates&&sync.getEvents().size()>0 }
results[https://github.com/rfkrocktk/red5-server!test/org/red5/server/io/test/AbstractIOTest.java!AbstractIOTest!testJavaBean][SEQ] =  -> beanIn=new TestJavaBean()@ -> beanIn.setTestString("test string here",)@ -> beanIn.setTestBoolean((System.currentTimeMillis()%2==0)?true:false,)@ -> beanIn.setTestBooleanObject((System.currentTimeMillis()%2==0)?Boolean.TRUE:Boolean.FALSE,)@ -> beanIn.setTestNumberObject(Integer.valueOf((int) System.currentTimeMillis()/1000,),)@ -> serializer.serialize(out,beanIn,)@ -> mapOrBean=deserializer.deserialize(in,)@ -> Assert.assertEquals(beanIn.getClass().getName(),mapOrBean.getClass().getName(),)@ -> map=(mapOrBean instanceof Map)?(Map) mapOrBean:new BeanMap(mapOrBean,)@ -> entrySet=map.entrySet()@ -> it=entrySet.iterator()@ -> beanInMap=new BeanMap(beanIn,)@ -> Assert.assertEquals(beanInMap.size(),map.size(),)@ -> LOOP { -> entry=(Map.Entry) it.next()@it.hasNext() -> propOut=(String) entry.getKey()@it.hasNext() -> valueOut=entry.getValue()@it.hasNext() -> Assert.assertTrue(beanInMap.containsKey(propOut,),)@it.hasNext() -> Assert.assertEquals(valueOut,beanInMap.get(propOut,),)@it.hasNext() }
results[https://github.com/rfkrocktk/red5-server!test/org/red5/server/io/test/AbstractIOTest.java!AbstractIOTest!testMap][SEQ] =  -> mapIn=new HashMap()@ -> mapIn.put("testNumber",Integer.valueOf(34,),)@ -> mapIn.put("testString","wicked",)@ -> mapIn.put("testBean",new SimpleJavaBean(),)@ -> serializer.serialize(out,mapIn,)@ -> mapOut=(Map) deserializer.deserialize(in,)@ -> Assert.assertNotNull(mapOut,)@ -> Assert.assertEquals(mapIn.size(),mapOut.size(),)@ -> entrySet=mapOut.entrySet()@ -> it=entrySet.iterator()@ -> LOOP { -> entry=(Map.Entry) it.next()@it.hasNext() -> propOut=(String) entry.getKey()@it.hasNext() -> valueOut=entry.getValue()@it.hasNext() -> Assert.assertTrue(mapIn.containsKey(propOut,),)@it.hasNext() -> valueIn=mapIn.get(propOut,)@it.hasNext() -> Assert.assertEquals(valueOut,valueIn,)@it.hasNext() }
results[https://github.com/rfkrocktk/red5-server!test/org/red5/server/io/test/AbstractIOTest.java!AbstractIOTest!testSimpleReference][SEQ] =  -> mapIn=new HashMap()@ -> bean=new SimpleJavaBean()@ -> mapIn.put("thebean",bean,)@ -> mapIn.put("thesamebeanagain",bean,)@ -> serializer.serialize(out,mapIn,)@ -> mapOut=(Map) deserializer.deserialize(in,)@ -> Assert.assertNotNull(mapOut,)@ -> Assert.assertEquals(mapIn.size(),mapOut.size(),)@ -> entrySet=mapOut.entrySet()@ -> it=entrySet.iterator()@ -> LOOP { -> entry=(Map.Entry) it.next()@it.hasNext() -> propOut=(String) entry.getKey()@it.hasNext() -> valueOut=(SimpleJavaBean) entry.getValue()@it.hasNext() -> Assert.assertTrue(mapIn.containsKey(propOut,),)@it.hasNext() -> valueIn=(SimpleJavaBean) mapIn.get(propOut,)@it.hasNext() -> Assert.assertEquals(valueOut.getNameOfBean(),valueIn.getNameOfBean(),)@it.hasNext() }