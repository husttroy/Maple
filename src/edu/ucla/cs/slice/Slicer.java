package edu.ucla.cs.slice;

import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

import edu.ucla.cs.model.Method;
import edu.ucla.cs.model.Class;
import edu.ucla.cs.process.AssignmentProcessor;
import edu.ucla.cs.process.PredicateProcessor;
import edu.ucla.cs.process.Process;
import edu.ucla.cs.process.ReceiverProcessor;
import edu.ucla.cs.process.SequenceProcessor;
import edu.ucla.cs.process.TypeProcessor;

public class Slicer {
	public static HashMap<String, Method> methods = new HashMap<String, Method>();
	public static HashMap<String, Class> classes = new HashMap<String, Class>();
	
	/**
	 * Read BOA output data to build the method and class maps.
	 * Currently we handle five types of BOA outputs in the format of txt files. 
	 * These BOA outputs are generated by our BOA scripts in CodeMiner.
	 * Names of these txt files are fixed for ease of processing.
	 */
	public static void setup() {
		Process proc = new Process();
		
		try {
			// process type info
			proc.s = new TypeProcessor(); 
			proc.processByLine("/home/troy/research/BOA/Slicer/example/type.txt");
			
			// process api call sequences
			proc.s = new SequenceProcessor();
			proc.processByLine("/home/troy/research/BOA/Slicer/example/sequence.txt");
			
			// process method call arguments
			proc.s = new AssignmentProcessor();
			proc.processByLine("/home/troy/research/BOA/Slicer/example/assignment.txt");
			
			// process method call receivers
			proc.s = new ReceiverProcessor();
			proc.processByLine("/home/troy/research/BOA/Slicer/example/receiver.txt");
		
			// process method call predicates
			proc.s = new PredicateProcessor();
			proc.processByLine("/home/troy/research/BOA/Slicer/example/predicate.txt");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void slice(Set<String> api_query, Set<String> type_query){
		// find 
	}
	
	public static void main(String[] args){
		Set<String> api_query = new HashSet<String>();
		api_query.add("createNewFile");
		Set<String> type_query = new HashSet<String>();
		type_query.add("File");
		
		Slicer.setup();
		Slicer.slice(api_query, type_query);
	}
}
